<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">The goal of this paper is to deal with a problem hardly ever addressed in natural language generation, conceptual input.</S>
		<S sid ="2" ssid = "2">In order to be able to express something, one needs to have something to express to begin with: ideas, concepts and thoughts.</S>
		<S sid ="3" ssid = "3">The question is how to access thoughts and build their representation in form of messages.</S>
		<S sid ="4" ssid = "4">What are the building blocks?</S>
		<S sid ="5" ssid = "5">How to organize and index them in order to allow for quick and intuitive access later on?</S>
		<S sid ="6" ssid = "6">It is generally believed that ideas precede expressions.</S>
		<S sid ="7" ssid = "7">Indeed, meanings, imprecise as they may be, tend to precede their expression in language.</S>
		<S sid ="8" ssid = "8">Yet, message creation is hardly ever a one-step process.</S>
		<S sid ="9" ssid = "9">Conceptual inputs are generally abstract and underspecified, which implies that they need to get refined later on, possibly even during the expression phase.</S>
		<S sid ="10" ssid = "10">In this paper we investigate interactive sentence generation, the focus being on conceptual input, a major component of language generation.</S>
		<S sid ="11" ssid = "11">Our views will be illustrated via three systems: ILLICO, a system for analyzing/generating sentences and guiding their composition; SPB, a multilingual phrase-book with on the fly generated audio output and Drill Tutor (DT), an exercise generator.</S>
		<S sid ="12" ssid = "12">While ILLICO is a message-understanding system with a message-completion functionality, SPB and DT are message-specification systems.</S>
		<S sid ="13" ssid = "13">The user works quite early with fairly complete structures (sentences or patterns), making basically only local changes: replacing words in the case of SPB, and choosing them to instantiate pattern variables in the case of DT.</S>
		<S sid ="14" ssid = "14">M. Zock (1:8) · P. Sabatier · L. Jakubiec Laboratoire d’Informatique Fondamentale de Marseille, CNRS &amp; AixMarseille Université, 163, Avenue de Luminy, Case 901, 13288 Marseille Cedex 9, France email: michael.zock@lif.univmrs.fr Keywords Conceptual input · Message composition · Message, completion · Interactive natural language generation</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="15" ssid = "15">The goal of this paper is to investigate a problem hardly ever addressed in the literature of natural language generation, conceptual input.</S>
			<S sid ="16" ssid = "16">Being one of the major sources of a generator, this is clearly an important element, especially if input is to be given by a human user.</S>
			<S sid ="17" ssid = "17">Unfortunately, little is known about issues such as: – Nature of the input and compositional rules: words and sentences are linguistic means for expressing ideas, uttered to achieve a communicative (non-linguistic) goal.</S>
			<S sid ="18" ssid = "18">If we can agree that the inputs are messages and goals, we still need to clarify the nature of the building blocks (concepts, primitives), the rules of combining them (conceptual grammar), and the means to present them at the interface level: icons, semantic networks, ordinary words, or words having the status of concepts or primitives (in- terlingua), or any combination of them (hybrid approach); – Specificity of input: inputs are rarely the specific words used in a concrete sentence.</S>
			<S sid ="19" ssid = "19">Depending on the situation, messages are encoded at various levels of abstraction (semantic networks, syntactic trees).</S>
			<S sid ="20" ssid = "20">While messages may be fully specified in the case of spontaneous discourse (dialogue), they certainly are much less specific at the early stages of text production, in particular if the message is very long, challenging our short-term memory capacities (Miller 1956).</S>
			<S sid ="21" ssid = "21">The question is: what are the core message elements, typically present in a message,1 and how close are they to language; – Moment of the input: obviously input precedes output.</S>
			<S sid ="22" ssid = "22">Yet, things can be quite subtle.</S>
			<S sid ="23" ssid = "23">Not everything is necessarily fully specified or definitely encoded before initiating expression.</S>
			<S sid ="24" ssid = "24">During delivery (speaking or writing) we may change our thoughts.</S>
			<S sid ="25" ssid = "25">Realizing that our output does not fit our goal well, we may alter the initial message to a greater or lesser extent, adding or deleting details as a result of afterthoughts.</S>
			<S sid ="26" ssid = "26">In sum, conceptual input need not be fully specified prior to expression, it may also occur during expression or afterwards (feedback, corrections), language feeding back on thought; – Representation: message elements and their combination can be represented in various ways: categorially or visually (graphs, trees, menus).</S>
			<S sid ="27" ssid = "27">Storage and representation are relevant both for the long-term memory and for the working memory (intermediate structure).</S>
			<S sid ="28" ssid = "28">For example, words can be stored permanently in a dictionary, or temporarily in a graph representing the message.</S>
			<S sid ="29" ssid = "29">Graphs are useful mnemonic devices as long as the message they represent is not too complex.</S>
			<S sid ="30" ssid = "30">They allow us to see and remember what he has been encoded or built so far, helping us to realize at the same time what is still lacking; – Planning unit: atomistic (concepts) vs. holistic (messages, patterns); the planning units can be of various sizes.</S>
			<S sid ="31" ssid = "31">We tend to consider words as such units, but words can be broken down into elements (meaning, form, sound), just as sentences can be divided into smaller units (phrases, words).</S>
			<S sid ="32" ssid = "32">Yet, sentences and their underlying conceptual structure (patterns) can also be considered as tokens or units, in which case they don’t need to be synthesized.</S>
			<S sid ="33" ssid = "33">Just like words in a dictionary, they only need to be accessed.</S>
			<S sid ="34" ssid = "34">In other words, they behave like lexicalized phrases; – Building strategies: messages can be produced in various ways, step by step, i.e. incrementally, or holistically, in which case they are just retrieved.</S>
			<S sid ="35" ssid = "35">Processing can also be performed hierarchically, from top to bottom (a general idea is fleshed out with details) or from the bottom to the top (words are integrated into a larger structure).</S>
			<S sid ="36" ssid = "36">Input can be given at once (one-shot process) or in various steps, with backtrack (corrections, refinements) or not.</S>
			<S sid ="37" ssid = "37">Finally, processing can be done serially, i.e., left to right, or via a mixed approach.</S>
			<S sid ="38" ssid = "38">Natural language generation is typically driven by input messages, i.e., meanings, and goals, the usual starting points.</S>
			<S sid ="39" ssid = "39">We present here our views on how to help people provide this kind of input.</S>
			<S sid ="40" ssid = "40">Our views will be illustrated via 1 A rough first guess would be the concepts underlying the major syntactic categories (nouns, verbs, adjectives, adverbs): entities, actions, processes, qualities.</S>
			<S sid ="41" ssid = "41">three systems: ILLICO, a system that was built in the 90s, and two more recent systems which are still in the development phase and have not been tested yet by users: SPB, a multilingual speaking phrase-book, and DT, a web-based exercise generator, called ‘Drill Tutor’.</S>
			<S sid ="42" ssid = "42">While all these systems have been created for assisting the text producer, their design or blueprints have been guided by different principles and goals.</S>
			<S sid ="43" ssid = "43">One function of ILLICO is to guide the user to compose a message.</S>
			<S sid ="44" ssid = "44">In order to do so it checks both completeness and well-formedness of the message according to the context.</S>
			<S sid ="45" ssid = "45">The goal of the other two systems is language learning.</S>
			<S sid ="46" ssid = "46">With SPB we pursue two goals: helping users survive in a new culture or language, by providing them with translation equivalences, and helping them discover the underlying principles for building such sentences.</S>
			<S sid ="47" ssid = "47">The goal of DT is to help people become fluent in a new language.</S>
			<S sid ="48" ssid = "48">All three systems address the issue of message planning, but they do so by starting from different assumptions and inputs: words, concepts, or goals.</S>
			<S sid ="49" ssid = "49">While ILLICO is a message and sentence-completion system, SPB and DT are message-specification systems.</S>
	</SECTION>
	<SECTION title="Message- and Sentence-Completion. " number = "2">
			<S sid ="50" ssid = "1">Guiding a user to compose sentences can be done in many ways, much depending on the user’s knowledge state.</S>
			<S sid ="51" ssid = "2">The problem we are dealing with here is search.</S>
			<S sid ="52" ssid = "3">Obviously, knowledge available at the onset (cognitive state) plays a very important role in this kind of task, regardless of the goal (determine conceptual input, lexical access, etc.).</S>
			<S sid ="53" ssid = "4">Search strategies and relative ease of finding a given piece of information (concept, word) depend crucially on the nature of the input (available knowledge) and the distance between this input and a given output (target word).</S>
			<S sid ="54" ssid = "5">Imagine that your target word is ‘guy’, a colloquial term for ‘person’.</S>
			<S sid ="55" ssid = "6">In principle you could start searching from any of the following inputs: ‘person’ (more general term), ‘cat’, ‘fellow’ (synonyms), or ‘gars’ (equivalent word in French).</S>
			<S sid ="56" ssid = "7">Obviously, the type of search and ease of access would not be the same.2 2.1 Brief Introduction of ILLICO.</S>
			<S sid ="57" ssid = "8">We briefly present ILLICO (Pasero and Sabatier 2007), focusing on one of its functionalities: guided composition.</S>
			<S sid ="58" ssid = "9">ILLICO can be helpful in many ways.</S>
			<S sid ="59" ssid = "10">For example, it can analyze and synthesize expressions (words, phrases, clauses, 2 The nature and number of items among which to choose would be.</S>
			<S sid ="60" ssid = "11">different in each case.</S>
			<S sid ="61" ssid = "12">The influence of formally similar words is well known, the Spanish word ‘libreria’ being likely to evoke the English word ‘library’.</S>
			<S sid ="62" ssid = "13">Cognates tend to prime each other, a fact that, depending on the circumstances, can be helpful or sheer nuisance.</S>
			<S sid ="63" ssid = "14">sentences), as well as offer possible continuations for a sentence that has not been completed yet, whatever the reasons may be (lexical, syntactic, semantic, conceptual or contextual).3 Suggestions made by the system are possible expressions in line with the available constraints.</S>
			<S sid ="64" ssid = "15">To achieve this goal a powerful mechanism is used, processing in parallel all the knowledge typically needed.</S>
			<S sid ="65" ssid = "16">Written in Prolog, ILLICO’s engine is based on a mechanism of coroutine processing.</S>
			<S sid ="66" ssid = "17">Both for analysis and synthesis, it checks and executes the different constraints (lexical, syntactic, semantic, conceptual and contextual) as soon as the structures of the different representations on which they apply are built, the process being dynamic and taking place in parallel.</S>
			<S sid ="67" ssid = "18">Representations are processed non- deterministically in a top-down manner.</S>
			<S sid ="68" ssid = "19">The implemented strategy allows for analysis and synthesis to be simultaneously performed in a single pass.</S>
			<S sid ="69" ssid = "20">The same principle is used for guiding composition incrementally, i.e., by means of partial synthesis.</S>
			<S sid ="70" ssid = "21">To compose a sentence step-by-step, from left to right, ILLICO automatically and dynamically offers at each step a list of candidates for continuing the sentence built so far.</S>
			<S sid ="71" ssid = "22">Figure 1 illustrates this mode.</S>
			<S sid ="72" ssid = "23">Having reached a certain point in the chain (in our case: “The child takes a picture of the..</S>
			<S sid ="73" ssid = "24">.”) the system suggests possible continuations, satisfying the syntactic, conceptual and pragmatic constraints, explicitly and implicitly contained in the sentence fragment composed so far.</S>
			<S sid ="74" ssid = "25">It should be noted that ILLICO’s goal consists in getting the user to compose (only) sentences it can understand, that is, sentences it is able to parse (Pasero and Sabatier 1995).</S>
			<S sid ="75" ssid = "26">Offering possible continuations is but one way among many to assist a user in sentence composition.</S>
			<S sid ="76" ssid = "27">One can imagine a richer kind of assistance where the user accesses various kinds of knowledge (linguistic, conceptual, etc.) to select the one fitting best his communicative goals.</S>
			<S sid ="77" ssid = "28">2.2 The Problem of Unstructured Lists, or the Way.</S>
			<S sid ="78" ssid = "29">to Speed Up Conceptual Input The objectives of sentence-completion systems are different from those of conventional surface generators (Reiter and Dale 2000; Bateman and Zock 2003).</S>
			<S sid ="79" ssid = "30">Surface generators start from a goal and a set of messages (input) in order to produce the corresponding surface form (output).</S>
			<S sid ="80" ssid = "31">Working quietly in the background, ILLICO tries to be proactive, making reasonable guesses about what the author could say</S>
	</SECTION>
	<SECTION title="For more details and references concerning ILLICO and its appli-. " number = "3">
			<S sid ="81" ssid = "1">cations (natural language interfaces to knowledge bases, simultaneous composition of sentences in different languages, linguistic games for language learning, communication aid for disabled people, software for language rehabilitation, etc.) the reader may want to consider http://www.lif.univmrs.fr/illico.html.</S>
			<S sid ="82" ssid = "2">next.</S>
			<S sid ="83" ssid = "3">Hence, it supposes somehow, that the author knows at least to some extent what he is/was going to say.</S>
			<S sid ="84" ssid = "4">ILLICO performs analysis by synthesis (top-down strategy), and while it does not need any help from the user for analysis, it certainly does so for synthesis.</S>
			<S sid ="85" ssid = "5">Otherwise it would produce unreasonably large sets of possible continuations, most of which are completely outside of the users’ scope, i.e. his or her intention.</S>
			<S sid ="86" ssid = "6">Figure 1 should give the reader a rough idea of how ILLICO works.</S>
			<S sid ="87" ssid = "7">We can see basically three frames (A, B, and C–F) with at the bottom (A), the output produced so far (generally an incomplete sentence, in our case: the child takes a picture of the ..</S>
			<S sid ="88" ssid = "8">.); at the very left (B), the candidates for the next slot (apple, beer, brother, ..</S>
			<S sid ="89" ssid = "9">.), and in the main frame (C–F), various kinds of representation, such as the system’s underlying conceptual ontology (C), semantic (D), logic (E), and syntactic representation concerning the sentence still in the making (F).</S>
			<S sid ="90" ssid = "10">Offering rich assistance during sentence composition was not the main goal of the designers of ILLICO.</S>
			<S sid ="91" ssid = "11">The production of possible continuations is only one functionality among others, though a very useful one.4 It is easily implemented due to the power of Prolog’s core mechanisms.</S>
			<S sid ="92" ssid = "12">A system providing more sophisticated assistance would look different: (a) the nodes of the tree in screen A would be categories (types) rather than instances (words), the latter being shown only at the leaf-level; (b) frequency would be taken into account (the words’ likelihood varying with the topic); (c) governors (e.g. nouns) would precede their dependants (e.g. determiners, adjectives); and (d) variables would be used rather than extensive lists of possible morphological values, etc. We hope that the user will share (or, at least, understand) our conceptual views and the implicit metalanguage used for displaying information.</S>
			<S sid ="93" ssid = "13">The goal of all these features is to limit the alternatives (set size), as having to choose among (too) many candidates causes distraction, mental fatigue (consumption of time and energy) and forgetting (we don’t remember anymore what we were looking for).</S>
			<S sid ="94" ssid = "14">Indeed, as the number of lexical candidates grows (as is typically the case at the beginning of a clause), grows the danger of getting “drowned”, distracted or to “downslide”.</S>
			<S sid ="95" ssid = "15">Likewise, with the distance between the governor and its dependant growing, increases the danger to produce something that, while linguistically correct, does not correspond anymore to what one had in mind (memory and divided attention having taken their toll).</S>
			<S sid ="96" ssid = "16">In order to avoid this, we suggest determining the governing elements first, and keeping the set of data from which to choose small.</S>
			<S sid ="97" ssid = "17">In other words, filtering and navigation become critical issues, and there are at least two ways to deal with them.</S>
			<S sid ="98" ssid = "18">coverage of the application one is about to develop.</S>
			<S sid ="99" ssid = "19">Therefore we can check now whether all the expected continuations are produced, and whether the produced strings are correct.</S>
			<S sid ="100" ssid = "20">IL!I t ell n t a k e _ a _ p i c t u r e _ o f ,_. ..</S>
			<S sid ="101" ssid = "21">..1 h- /\ /l ldqall . human all .,./.T.&apos;-._ / l u -A--- * ca«ee /\.</S>
			<S sid ="102" ssid = "22">I &quot;&quot;&quot; apple p&apos;l\l.d1 palaiDe ulld ll!!j about clue lbll_llop • ....._._ &lt;-I&gt; e about / X clild e X yto_-take-_a_pid-ure_of th1e &lt;-1&gt; _ ..</S>
			<S sid ="103" ssid = "23">I I c:t ild ...;;;:p.tc\ture of &lt;1, &lt;-I &gt; X y 1he the child takes a picture of the ••• &gt; ,_, ......</S>
			<S sid ="104" ssid = "24">&apos;&quot;0 3g.</S>
			<S sid ="105" ssid = "25">ogJ.</S>
			<S sid ="106" ssid = "26">&quot;Q&apos;..</S>
			<S sid ="107" ssid = "27">0 Fig.</S>
			<S sid ="108" ssid = "28">1 Screenshots of ILL!CO in action: the pictures (A-F) show respectively the string built so far (A),possible lexical candidates (B), part of the conceptual ontology (C), the message to be e:Kpressed (D), the logical form (E), and the parse-tree of the complete sentence (F) ,_. ,_. :c ill Scene g &lt;....; C/:l &apos;8 ::r JL efPerspecUve t purpose mojod pol /e _ ::r :s:::&gt;.</S>
			<S sid ="109" ssid = "29">l:l 0 § 00I1 &apos;t =•que:s:ti:o:n: positive negative · relation obj compore (idea) action, state, spatial logical moClifiers •indicative •subjunctive -person •number •comm.</S>
			<S sid ="110" ssid = "30">status •coordinate -place •singular •definite •subordinate othing -plural •indefinite verb t •grasp omove •ingest process tense -past -present •future relation relation quality I state manner prepOSition conjunction adjective adverb t t t t •goal -purpose •size •degree •source •condition •color •manner -position •consequence •shape •frequency • tnmf.</S>
			<S sid ="111" ssid = "31">of poss.</S>
			<S sid ="112" ssid = "32">• direction • cause • nationality r--------------------- - 11 I before now I : : Idirectly I 1:/ time I conceptual ------ ----------: :: : lzmA.NEI AI!ent-: diRJctiou l NET I : I I I 1 1 1--: 11truc:ture I pouf.ble Step1: Z&quot;dan ...</S>
			<S sid ="113" ssid = "33">I Otbjoc:tI I--------------- - - - - - - - - - - - - - - - - I 1 e : mnnbcr1 BALL I Step 2: ...hammered the ball...</S>
			<S sid ="114" ssid = "34">Step 3: ...straight into the net.</S>
			<S sid ="115" ssid = "35">I Fig.2 An interactive graph editor for authoring, i.e., incremental message composition.</S>
			<S sid ="116" ssid = "36">The figure illustrates the way how the underlying representation (graph) of the sentence &apos;Zidane hammered the ball straight into the net&apos; is built in three steps.</S>
			<S sid ="117" ssid = "37">On top of the figure (here to the left ) you see the conceptual building blocks (ontology), and at the bottom (here, to the right ), the current state(s) of the incrementally built graph.</S>
			<S sid ="118" ssid = "38">To simplify matters, we&apos;ve ignored in the graph the speaker&apos;s attitude (the speec h-act representation ) 00 V\ In order to reduce the number of candidates from which to choose, one can filter out linguistically and conceptually irrelevant material.</S>
			<S sid ="119" ssid = "39">This strategy is generally used both by the speaker and the listener as long as optimal transmission of information, i.e., reasonable input/output are considered as a major means to achieve a given communication goal (default case).</S>
			<S sid ="120" ssid = "40">Hearing someone say: “I’d love to smoke a..</S>
			<S sid ="121" ssid = "41">.”, our mind or ears will be “tuned” to smokeable items (cigar, cigarette, pipe) rather than just to any noun, no matter how correct all of them may be from a syntactic point of view.</S>
			<S sid ="122" ssid = "42">With regard to our problem (sentence completion or message composition) this means, that the list to be presented should be small, structured by types or categories (apple, pear → fruit) and contain but “reasonable” items, that is, items in line with the constraints of the string produced so far.5 How can this be achieved without sacrificing coverage?</S>
			<S sid ="123" ssid = "43">Indeed, even a filtered list can still be quite large.</S>
			<S sid ="124" ssid = "44">Imagine that you were to talk about people, food, or a day of the year, etc. The number of representatives of each category is far too big to allow for fast identification, if the candidates are presented extensively in an unstructured, or only alphabetically ordered list.</S>
			<S sid ="125" ssid = "45">This challenge can be avoided, and navigation can considerably be eased by categorizing items, presenting them as a conceptually structured tree (type hierarchy) rather than as a flat list.</S>
			<S sid ="126" ssid = "46">Instead of operating at the concrete level of instances (all days of the year) the user will now operate (navigate or choose) at a much higher level, using more abstract words (generic concepts, type names, hypernyms) like month, weekdays, hour, etc. Ultimately s/he will have to choose one of the concrete instances, but having eliminated rapidly, i.e., via categories, most of the irrelevant data, s/he will choose from a much smaller list.</S>
			<S sid ="127" ssid = "47">The gain is obvious in terms of storage (at the interface level) and speed of navigation.</S>
			<S sid ="128" ssid = "48">2.3 Incremental Building and Refining of a Message Graph.</S>
			<S sid ="129" ssid = "49">To show what we have in mind, take a look at Fig.</S>
			<S sid ="130" ssid = "50">2.</S>
			<S sid ="131" ssid = "51">It is inspired by SWIM, an ontology-driven interactive sentence generator (Zock 1991).6 How is this meant to work?</S>
			<S sid ="132" ssid = "52">Suppose you were to produce the underlying message of the following sentence “Zidane hammered the ball straight into the net”.</S>
			<S sid ="133" ssid = "53">This would require several walks through the conceptual network, one for each major category (Zidane, hammer, ball, straight, net).</S>
			<S sid ="134" ssid = "54">The path for ‘Zidane’ (step 1) would be “scene/idea/objects/entity/person”, 5 This idea is contained to some extent in Tesnière’s valency theory.</S>
			<S sid ="135" ssid = "55">(Tesnière 1959), in Schank’s conceptual dependancy (Schank 1975) and in McCoy and Cheng’s notion of discourse focus trees (McCoy and Cheng 1991).</S>
			<S sid ="136" ssid = "56">6 For a somewhat similar approach see Power et al.</S>
			<S sid ="137" ssid = "57">(1998)..</S>
			<S sid ="138" ssid = "58">while the one for the ‘shooting-act’ (step 2) would be “scene/idea/relation/action/verb”.</S>
			<S sid ="139" ssid = "59">Concerning this yet-to- be-built resource, various questions arise with respect to the components (nature), their composition and usage.</S>
			<S sid ="140" ssid = "60">The three problems are somehow related.</S>
			<S sid ="141" ssid = "61">What are the components?</S>
			<S sid ="142" ssid = "62">In order to allow for the interactive building of the message graph we will need three components: a linguistically motivated ontology, a dictionary and a graph generator.</S>
			<S sid ="143" ssid = "63">The first and last elements can be seen in Fig.</S>
			<S sid ="144" ssid = "64">2.</S>
			<S sid ="145" ssid = "65">The ontology is needed for guiding the user to make their choices concerning the elements to build the message from: concepts/words.</S>
			<S sid ="146" ssid = "66">The fact that the user has chosen a set of building blocks (concepts, i.e., class names, or words) does not mean that we have a message.</S>
			<S sid ="147" ssid = "67">At this point we have only a set of elements which still need to be connected to form a coherent whole (conceptual structure or message graph).</S>
			<S sid ="148" ssid = "68">To this end the system might need additional information and knowledge.</S>
			<S sid ="149" ssid = "69">Part of this can be put into the dictionary.</S>
			<S sid ="150" ssid = "70">Hence, nouns can be specified in terms of subcategorial information (animate, human, etc.), verbs in terms of case-frames and roles, etc. These kinds of restrictions should allow the connection of the proper arguments, for example, ‘Zidane’ and ‘ball’, to a verb like hammer.</S>
			<S sid ="151" ssid = "71">The argument connected via the link agent is necessarily animate, the information being stated in the lexicon.</S>
			<S sid ="152" ssid = "72">If despite all this, the system still cannot build the graph (suppose the user had given only the equivalent of two nouns and two adjectives), it will engage in a clarification dialogue, asking the user to specify, which attribute qualifies which object.</S>
			<S sid ="153" ssid = "73">Once all objects (nodes) are linked, the result still needs to be displayed.</S>
			<S sid ="154" ssid = "74">This is accomplished via the graph generator, which parallel to the input displays incrementally the message structure in the making.</S>
			<S sid ="155" ssid = "75">How should the resource be used?</S>
			<S sid ="156" ssid = "76">Obviously, as the on- tology or conceptual tree grows, increases also access time, or more precisely, the number of elements from which to choose in order to reach the terminal level (words).</S>
			<S sid ="157" ssid = "77">In addition, the metalanguage (class names) will become more and more idiosyncratic.</S>
			<S sid ="158" ssid = "78">Both of these consequences are shortcomings which should definitely be avoided.</S>
			<S sid ="159" ssid = "79">This could be done in several ways: (1) allow the message to be input in the user’s mother tongue.</S>
			<S sid ="160" ssid = "80">Having a multilingual dictionary allows for doing so in the users’ mother tongue or any of the languages known by the resource, which would considerably speed up conceptual input.</S>
			<S sid ="161" ssid = "81">Of course, this poses other problems: lexical ambiguity, structural mismatches between the source and the target language; (2) start navigation at any level.</S>
			<S sid ="162" ssid = "82">Indeed, when producing a sentence like, “give me a cigarette”, hardly anyone would start at the root level, to reach eventually the level of the desired object.</S>
			<S sid ="163" ssid = "83">Most people would immediately start from the hyperonym or base level; (3) allow access via the words’ initial letters, or, even better, (4) via associatively linked concepts/words.7 Finally, there is no good reason to have the user give all the details necessary to reach the leaf-, i.e. word-level.</S>
			<S sid ="164" ssid = "84">He could stop anywhere in the hierarchy, providing details later on.</S>
			<S sid ="165" ssid = "85">This being so, he can combine breadth-first and depth-first strategies, depending on his knowledge states and needs.</S>
			<S sid ="166" ssid = "86">Obviously, the less specific the input, the larger the number of words from which the user must choose later on.</S>
			<S sid ="167" ssid = "87">However, this is not necessarily a shortcoming, quite to the contrary.</S>
			<S sid ="168" ssid = "88">It is a good thing, since users can now decide whether they want to concentrate first on the big picture (general structure or frame of the idea) or rather on the low level details (which specific words to use).</S>
			<S sid ="169" ssid = "89">Full lexical specification is probably not even wanted, as it is not only tiresome as soon as the ontology grows (imagine the time it might take just to produce the conceptual equivalent to a message like ‘a beer, please!’), but also it may pose problems later on (e.g., during surface generation), as the words occurring in the message graph might not be syntactically compatible with each other.</S>
			<S sid ="170" ssid = "90">Hence, we will be blocked, facing a problem of expressibility (Meteer 1992; Nicolov and Mellish 2000).</S>
			<S sid ="171" ssid = "91">2.4 Conceptual, Computational and Psychological Issues.</S>
			<S sid ="172" ssid = "92">Building the kind of editor illustrated in Fig.</S>
			<S sid ="173" ssid = "93">2 is not a trivial issue, and various problems need be addressed and solved: – Coverage: obviously, the bigger the coverage, the more complex the task.</S>
			<S sid ="174" ssid = "94">For practical reasons we shall start with a small domain (soccer), as we can rely already on a good set of resources both in terms of the ontology and the corresponding dictionary (Sabatier 1997).</S>
			<S sid ="175" ssid = "95">Kicktionary, developed by Schmidt (2007), is a domain-specific trilingual (English, German, and French) lexical resource of the language of soccer (http://www.kicktionary.de/ 7 Suppose you were looking for the word mocha (target word: tw ), yet.</S>
			<S sid ="176" ssid = "96">the only token coming to your mind were computer (source word: sw ).</S>
			<S sid ="177" ssid = "97">Taking this latter as starting point, the system would show all the connected words, for example, Java, Perl, Scala, Prolog (programing languages), mouse, printer (hardware), Mac, PC (type of machines), etc. querying the user to decide on the direction of search by choosing one of these words.</S>
			<S sid ="178" ssid = "98">After all, s/he knows best which of them comes closest to the tw . Having started from the sw ‘computer’, and knowing that the tw is neither some kind of software nor a type of computer, s/he would probably choose Java, which is not only a programming language but also an island.</S>
			<S sid ="179" ssid = "99">Taking this latter as the new starting point s/he might choose coffee (since s/he is looking for some kind of beverage, possibly made from an ingredient produced in Java, coffee), and finally mocha, a type of beverage made from these beans.</S>
			<S sid ="180" ssid = "100">Of course, the word Java might just as well trigger Kawa which not only rhymes with the sw , but also evokes Kawa Igen, a Javanese volcano, or familiar word of coffee in French.</S>
			<S sid ="181" ssid = "101">For more details, see Zock and Schwab (2008).</S>
			<S sid ="182" ssid = "102">Introduction.html).</S>
			<S sid ="183" ssid = "103">It is based on Fillmore’s Frame Semantics (Baker et al. 1998) and uses WordNet style semantic relations (Fellbaum 1998) as an additional layer to structure the conceptual level.</S>
			<S sid ="184" ssid = "104">– Language specificity: there are good reasons to believe that the conceptual tree will be language dependent.</S>
			<S sid ="185" ssid = "105">Think of Spanish or Russian where verb-form depends on aspect, that is, on the speaker’s choice of considering an action as completed, i.e perfective, or not, yielding two, morphologically speaking, entirely different lemmas (ser/estar, meaning to be in Spanish, or “uchodits” vs “uitsi” to walk in Russian).</S>
			<S sid ="186" ssid = "106">– Ergonomic aspects (readability): the graph’s readability will become an issue as soon as messages grow big.</S>
			<S sid ="187" ssid = "107">Imagine the underlying graph of a multiply embedded relative- clause.</S>
			<S sid ="188" ssid = "108">Also, rather than frightening the user by showing him the entire tree as in Fig.</S>
			<S sid ="189" ssid = "109">2, we will show only the useful parts (don’t drown the user), for example, the children nodes for a selected node.</S>
			<S sid ="190" ssid = "110">– The limits of symbolic representation: as shown elsewhere for time (Ligozat and Zock 1992) and space (Briffault and Zock 1994), symbolic representations can be quite cumbersome.</S>
			<S sid ="191" ssid = "111">Just think of gradient phenomena like colors or sounds, which are much easier represented analogically (for example, in terms of a color-wheel), than categori- ally.</S>
			<S sid ="192" ssid = "112">– The problem of metalanguage: we will discourage the user if learning the target language is only possible by learning yet another (meta) language.</S>
			<S sid ="193" ssid = "113">– The conceptual tree: there are basically two issues at stake.</S>
			<S sid ="194" ssid = "114">Which categories to put into the tree and where to place each one of them.</S>
			<S sid ="195" ssid = "115">Indeed, there are various problematic points in Fig.</S>
			<S sid ="196" ssid = "116">2.</S>
			<S sid ="197" ssid = "117">Where shall we put negation?</S>
			<S sid ="198" ssid = "118">Shall we factor it out, or put it at every node where it is needed?</S>
			<S sid ="199" ssid = "119">There are several other issues, relevant and important for natural language generation in general, and interactive language generation (our case) in particular.</S>
			<S sid ="200" ssid = "120">We have mentioned some of them already in the introduction: – Representation: in what terms to encode the message (concepts vs. words) and at what level of abstraction (general vs. specific)?; – Size of the planning unit: concepts vs. messages; – Processing strategy: is planning done as a one-shot process or is it performed in various steps, i.e., incremen- tally, possibly allowing for corrections?; – Direction: is planning done left to right or top to bottom?; – Processing order: Do thoughts precede language, and if so, is this always the case?</S>
			<S sid ="201" ssid = "121">We will touch upon these points here only very briefly.</S>
			<S sid ="202" ssid = "122">For more details see Zock (1996), where a worked out example is giving, showing how language may feedback on thought, the lexicon acting as interface between language (output) and thought (input).</S>
			<S sid ="203" ssid = "123">Suppose you wanted to produce the following sentence: When the old man saw the little boy drowning in the river, he went to his canoe in order to rescue him.</S>
			<S sid ="204" ssid = "124">Obviously, before producing such a sentence its content must be planned and represented somehow, but how is this done?</S>
			<S sid ="205" ssid = "125">There are several good reasons to believe that this sentence has not been planned entirely in advance, neither from left to right, nor in a single pass.</S>
			<S sid ="206" ssid = "126">There are both psychological and linguistic reasons supporting these claims.</S>
			<S sid ="207" ssid = "127">Psychological reasons: The sentence is simply too long for a speaker to hold all its information in short-term- memory.</S>
			<S sid ="208" ssid = "128">It is highly unlikely that the speaker has all this information available at the onset of verbalization.</S>
			<S sid ="209" ssid = "129">The need for planning, that is, the need to look ahead and to plan in general terms, increases with the length of the sentence and with the number and type of embeddings (for example, center embedded sentences).</S>
			<S sid ="210" ssid = "130">There is also good evidence in the speech error literature supporting the claim that people plan in abstract terms.</S>
			<S sid ="211" ssid = "131">False starts or repairs, like “I ’ve turned on the stove switch, I mean the heater switch” suggest that the temperature increasing device has been present in the speakers mind, yet at an abstract level (Levelt 1989; Fromkin 1993).</S>
			<S sid ="212" ssid = "132">Linguistic reasons: as is well known, the order of words does not necessarily parallel the order of thought.</S>
			<S sid ="213" ssid = "133">For example, the generation of the first word of the sentence here above, the temporal adverbial “when”, requires knowledge of the fact that there is another event taking place.</S>
			<S sid ="214" ssid = "134">Yet, this information appears fairly late in the sentence.</S>
			<S sid ="215" ssid = "135">3 Two Alternatives: Message Specification Systems.</S>
			<S sid ="216" ssid = "136">Message completion as described for ILLICO is a special case of conceptual input, as the input is provided fairly late in the process, namely during the formulation phase.</S>
			<S sid ="217" ssid = "137">Actually, in the systems described here below we don’t compose messages, at least not from scratch.</S>
			<S sid ="218" ssid = "138">What we do is complete an existing sentence fragment.</S>
			<S sid ="219" ssid = "139">The most frequent cases are probably situations where the author knows beforehand, perhaps only in crude terms, what he wants to convey.</S>
			<S sid ="220" ssid = "140">This is particularly true in spontaneous discourse where sentences are short, but to a lesser degree for writing, which needs to be planned at various levels of abstraction (macro-plan, micro-plan).</S>
			<S sid ="221" ssid = "141">We will describe here two other systems (SPB and DT), providing new challenges, but also new possibilities for helping people to provide conceptual input.</S>
			<S sid ="222" ssid = "142">They have been developed separately, but they will be used in conjunction.</S>
			<S sid ="223" ssid = "143">Since both systems are still in the prototype phase, they have not been evaluated yet.</S>
			<S sid ="224" ssid = "144">3.1 Context and Problem.</S>
			<S sid ="225" ssid = "145">To be able to communicate in a foreign language is vital in our globalized world, yet this is a complex task which needs to be learned.</S>
			<S sid ="226" ssid = "146">We will restrict ourselves here to speaking, i.e., translation of ideas into sentences and speech.</S>
			<S sid ="227" ssid = "147">More precisely, we will be concerned with language learning: Asian (for the time being Japanese, but later also Chinese) and IndoEuropean languages (for the time being English and French).</S>
			<S sid ="228" ssid = "148">The scope will be the survival-level, i.e., acquisition of the basic words and structures to be able to survive in a new culture and to become relatively autonomous in this new environment.8 In sum, we’d like to help someone learn the basic stock of phrases and expressions that are generally taught in the classroom, or that are acquired via a phrase book, the latter being structured by tasks a tourist is likely to perform: ask for information in public places (post office, airport), do shopping, etc. Yet, we would like to go one step further and help the learner not only learn by heart the form of a stock of phrases, but also (or, more importantly) the underlying principles (structures) to build similar sentences.</S>
			<S sid ="229" ssid = "149">To reach this kind of open-ended generativeness we propose an electronic version of two well-known methods, a multilingual phrase-book and pattern drills.</S>
			<S sid ="230" ssid = "150">There are two good reasons for this: – If speaking in one’s mother tongue is a daunting task, to do so in a foreign language can be overwhelming.</S>
			<S sid ="231" ssid = "151">In order to gain control, it is good to divide the task and automate part of it.</S>
			<S sid ="232" ssid = "152">Yet, this requires practice.</S>
			<S sid ="233" ssid = "153">Without the latter we will not only forget, do things in the wrong order (what should be done when?)</S>
			<S sid ="234" ssid = "154">and end up being incapable of delivering the expected result in time; – Different people have different needs, and needs tend to change.</S>
			<S sid ="235" ssid = "155">This being so, we propose an open system, allowing the user to tailor it to his or her liking.</S>
			<S sid ="236" ssid = "156">In sum, we propose the building of an exercise generator to help people develop basic communication skills and become fluent in a foreign language.</S>
			<S sid ="237" ssid = "157">The goal is to assist the memorization of words and sentence patterns, and help people acquire the needed skills, automatisms to access and to instantiate them, such as to be proficient enough to participate in a simple conversation.</S>
			<S sid ="238" ssid = "158">3.2 A Multilingual Phrasebook Able to Speak To achieve the above-mentioned goal we have started building a multilingual phrasebook (SPB) to convert meanings into speech.</S>
			<S sid ="239" ssid = "159">The idea is to provide a web-based service helping people reach the survival level in the new language.9 8 For a similar goal, but with a quite different method, see Boitet et al..</S>
			<S sid ="240" ssid = "160">(2007).</S>
			<S sid ="241" ssid = "161">9 For a similar goal, but with a quite different method, see Boitet et al..</S>
			<S sid ="242" ssid = "162">(2007).</S>
			<S sid ="243" ssid = "163">More precisely, we aim at building an open, generic, customizable multilingual phrase-book allowing not only to see and hear the translation of a given sentence in various languages (currently Japanese, English, French), but also to learn the language and the underlying principles for producing fluently such kind of sentences.</S>
			<S sid ="244" ssid = "164">The core element is a multilingual database composed of sentences occurring in specific discourse situations, that is, sentences, typically used to achieve specific communicative goals: in a shop or in a restaurant, at the bank, train station, police station, etc. The base has been built for the three languages.</S>
			<S sid ="245" ssid = "165">It is open and meant to grow.</S>
			<S sid ="246" ssid = "166">The current base is still quite small, containing only about 10,000 sentences and their translation into the other two languages, but we expect to have about 40,000 sentences per language by the end of 2010.</S>
			<S sid ="247" ssid = "167">To allow the user to find quickly the information he is looking for, we have started to structure the database in terms of domains and scenarios and we have added indexing terms (lemmata, goals).</S>
			<S sid ="248" ssid = "168">Hence, navigation (input) can be done via any of these categories (and their combination): the system will display all the sentences containing a given word, sentences being part of a scenario or realizing a specific goal.</S>
			<S sid ="249" ssid = "169">The system is open in the sense that the user can add sentences or terms for indexing them.</S>
			<S sid ="250" ssid = "170">In addition to the database, the system needs two other elements: a multilingual dictionary and a speech synthesizer.</S>
			<S sid ="251" ssid = "171">Only the latter exists at present.</S>
			<S sid ="252" ssid = "172">The dictionary should contain not only translation equivalences, but also relational information concerning the (nature of the) links between words.</S>
			<S sid ="253" ssid = "173">In particular it should contain hypernyms.</S>
			<S sid ="254" ssid = "174">One of the many benefits of this kind of information is, that it allows replacement of a specific term (word instance) by a more general term (dog—animal).</S>
			<S sid ="255" ssid = "175">This being so, we can now go beyond the information given and replace concrete data (instances: words and sentences) with more abstract forms (hypernyms, patterns).</S>
			<S sid ="256" ssid = "176">In other words, with this method we can convert a sentence-database into a pattern library.</S>
			<S sid ="257" ssid = "177">This is a very valuable asset, as patterns can now be used to extract other instances or example sentences in a given corpus (Hearst 1998), growing the database.10 Patterns can also be used to guide and constrain conceptual input, especially if they are linked to goals (see below ‘Drill Tutor’).</S>
			<S sid ="258" ssid = "178">For example, ‘Didn’t you know that person love sweet?’, allowing the creation of a sentence like ‘Didn’t you know that kids love chocolate?’.</S>
			<S sid ="259" ssid = "179">Of course, there are numerous phrasebooks, but they are all closed and hard-wired.</S>
			<S sid ="260" ssid = "180">For example, unlike commercial systems, we do not store audio-files, sound is generated on 10 For example, a pattern like ‘the major export good of country-x.</S>
			<S sid ="261" ssid = "181">is object-y, might yield sentences containing ‘perfume’, ‘wine’ and ‘cheese’ as lexical instances in the case of France, and ‘cigars’ and ‘rhum’ in the case of Cuba.</S>
			<S sid ="262" ssid = "182">the fly.</S>
			<S sid ="263" ssid = "183">The Japanese colleagues with whom we do this research have a speech synthesizer for the three languages mentioned here above.</S>
			<S sid ="264" ssid = "184">Phrasebooks are interesting for learners for several reasons: – they allow quick building of a huge translation memory: a set of phrases and their equivalence in the target language; – words appear immediately in the context of a sentence, which reveals their usage, fosters fluency and increases their memorizability: co-occurring words strengthen each others links, increasing the likelihood of evoking each other later on (priming); – sentences are, at least implicitly linked to a domain or goal.</S>
			<S sid ="265" ssid = "185">Meaning is conveyed directly or in several steps by choosing and possibly refining any of the existing sentences.</S>
			<S sid ="266" ssid = "186">Access can be performed via the above-mentioned methods (words, goals, domains).</S>
			<S sid ="267" ssid = "187">Meanings can also be changed locally, by replacing one of the words of the chosen sentence.</S>
			<S sid ="268" ssid = "188">Since sentences are aligned translations, access can be performed via any of the languages for which there are sentences in the base, hence also via the mother tongue, provided that it is part of the existing languages.</S>
			<S sid ="269" ssid = "189">Of course there are limitations.</S>
			<S sid ="270" ssid = "190">We can express only ideas that fit into the patterns abstracted away via the sentences of our domain.</S>
			<S sid ="271" ssid = "191">Put differently, we can instantiate only patterns that are part of the database, or have become part of it.</S>
			<S sid ="272" ssid = "192">Still, this can be quite a bit more than the initial set of sentences, and, given the scope or our goal, this is not too much of a problem.</S>
			<S sid ="273" ssid = "193">We want to reach the survival level and not cover everything that can be conceived and expressed in a given language.</S>
			<S sid ="274" ssid = "194">3.3 The Drill Tutor.</S>
			<S sid ="275" ssid = "195">The goal of the drill tutor is to help people to become fluent in a foreign language, i.e., produce at a ‘normal’ rate, that is, without too many hesitations, a sentence expressing some message.</S>
			<S sid ="276" ssid = "196">To this end we have chosen a set of basic patterns which we indexed in terms of goals.</S>
			<S sid ="277" ssid = "197">Figure 3 illustrates the way how the student gets from the starting point, a goal (frame A), to its linguistic realization, the endpoint (frame D) by using the Drill Tutor.</S>
			<S sid ="278" ssid = "198">Having reached frame C, the system presents sequentially a model,11 the stimulus (chosen word), followed by the student’s answer and the system’s confirmation/information 11 The latter is basically composed of a sentence (step 1), a stimulus.</S>
			<S sid ="279" ssid = "199">(the lexical value of the variable: B1, B2, etc.), and the new sentence based on the model and the stimulus (frame D).</S>
			<S sid ="280" ssid = "200">Fig.</S>
			<S sid ="281" ssid = "201">3 The basic interaction process between Drill Tutor and the student.</S>
			<S sid ="282" ssid = "202">The process is initiated via the choice of a goal (introduce somebody, step 1, frame A) to which the system answers with a set of patterns (frame B).</S>
			<S sid ="283" ssid = "203">The user chooses one of them (step 2: B1 vs. B2), signalling then the specific lexical values with which s/he would like the pattern to be instantiated (frame C).</S>
			<S sid ="284" ssid = "204">The system has now all the information needed to create the exercise or the sentence expressing the conceptual input (frame D) (normally also a sentence, implying that the student’s answer is correct if the two sentences match and incorrect otherwise).</S>
			<S sid ="285" ssid = "205">The process continues until the student has done all the exercises, or until s/he decides to stop.</S>
			<S sid ="286" ssid = "206">Note that, if the values of the variables &lt;title&gt;, &lt;name&gt;, &lt;origin&gt; were (Professor, Tsuji, Japan) rather than (Mr, Smith, Germany), then the outputs would vary, of course, accordingly.</S>
			<S sid ="287" ssid = "207">It should be noted that conceptual input takes place in three-steps: at a global level the learner chooses the pattern via a goal (step 1), next s/he provides lexical values for the pattern’s variables (step 2), to refine this global message by specifying morphological values: number, tense, etc.</S>
			<S sid ="288" ssid = "208">(step 3).</S>
			<S sid ="289" ssid = "209">This approach is much more economical for storing and accessing patterns, than storing a pattern for every morphological variant.</S>
			<S sid ="290" ssid = "210">This approach also allows faster authoring, i.e., message building, than long-winded navigation through a conceptual ontology.</S>
			<S sid ="291" ssid = "211">For more details see Zock and Afantenos (2008); Zock and Afantenos (2009).</S>
	</SECTION>
	<SECTION title="Checking Conceptual Well-Formedness. " number = "4">
			<S sid ="292" ssid = "1">Obviously, messages must be complete and well-formed, and this is something which needs to be checked.</S>
			<S sid ="293" ssid = "2">The problem of well-formedness is important, not only in sys tems where a message is built from scratch or from incomplete sentence fragments (ILLICO), but also in message- specification systems.12 Suppose you were to make a comparison, then you must (at least at the beginning) mention the two items to be compared (completeness), and the items must be comparable (well-formedness).</S>
			<S sid ="294" ssid = "3">In other words, having chosen some predicate, a certain number of specific variables or arguments are activated, waiting for instantiation.</S>
			<S sid ="295" ssid = "4">Arguments are, however, not only of a specific kind, playing a given role, they also have specific constraints which need to be satisfied.</S>
			<S sid ="296" ssid = "5">While checking well-formedness for single words does not make sense (apart from spell checking, which is not our concern here), it does make sense to check the compatibility and well-formedness of the combination of concepts or words, to see whether they produce an acceptable conceptual structure.</S>
			<S sid ="297" ssid = "6">To illustrate this further, let’s take up again the sentence illustrated in Fig.</S>
			<S sid ="298" ssid = "7">2, Zidane hammered the ball straight into the net.</S>
			<S sid ="299" ssid = "8">This means that, having received as input something like to shoot (or, to hammer), we know that there is someone, performing this action, with a specific target in mind 12 Of course, conceptual well-formedness, i.e. meaningfulness, does.</S>
			<S sid ="300" ssid = "9">not guarantee communicative adequacy.</S>
			<S sid ="301" ssid = "10">In other words, it does not assure that the message makes sense in the context of a conversion.</S>
			<S sid ="302" ssid = "11">To achieve this goal additional mechanisms are needed.</S>
			<S sid ="303" ssid = "12">(the goal), and that the action can only be performed in so many ways (manner).</S>
			<S sid ="304" ssid = "13">While not all of this information is mandatory, some of it is (agent, object, target), and there are definitely certain constraints on the various arguments (the agent must be animate, the object some kind of sphere, typically used in soccer games, etc.).</S>
			<S sid ="305" ssid = "14">Being formalized and stored in a conceptual dictionary, this information can now be used by our system to check the well formedness of a given structure and its compatibility with the user’s input.</S>
			<S sid ="306" ssid = "15">The idea according to which types allow well-formedness checking of mathematical objects is well-known.</S>
			<S sid ="307" ssid = "16">We use it them for a different domain (messages and sentences), because they allow the checking of the adequacy of the elements used to build or complete a message.</S>
			<S sid ="308" ssid = "17">Having a rigorous representation, we can reason about objects not only to check the well-formedness of the user’s input, but also its soundness.</S>
			<S sid ="309" ssid = "18">To test this hypothesis we rely on the Coq proof- assistant (Coq Development Team 2008) as it allows us to: – take advantage of its type system and its powerful representation mechanisms: polymorphism, dependent types, higher-order logic..</S>
			<S sid ="310" ssid = "19">.; – propose natural and general specification; – check automatically the well-formedness of the user’s input.</S>
			<S sid ="311" ssid = "20">The Coq system provides a formal language to specify mathematical definitions and prove them.</S>
			<S sid ="312" ssid = "21">The Coq language implements a higher-order typed λ-calculus, the calculus of constructions.</S>
			<S sid ="313" ssid = "22">Its logic is constructive and relies on the Curry-Howard isomorphism.</S>
			<S sid ="314" ssid = "23">Each Coq proposition is of type Pr op and describes a predicate.</S>
			<S sid ="315" ssid = "24">There are also objects of type Set , but they are not used in the context of this work.</S>
			<S sid ="316" ssid = "25">Coq allows an hierarchical organization of types via the coercion mechanism.</S>
			<S sid ="317" ssid = "26">In other words, it contains a mechanism to represent conceptual information in the form of a tree of concept types.</S>
			<S sid ="318" ssid = "27">We use coercions here to inject terms implicitly from one type into another, which can be viewed as a subtyping mechanism.</S>
			<S sid ="319" ssid = "28">Given this facility a user may apply an object (which is not a function, but can be coerced to a function) to the coercion, and more generally, consider that a term of type A is of type B , provided that there is a declared coercion between the two.</S>
			<S sid ="320" ssid = "29">For example, in Fig.</S>
			<S sid ="321" ssid = "30">2 we see that a Scene contains both an Attitude_Perspective (speech-act, if you prefer) and an Idea (core part of the message).</S>
			<S sid ="322" ssid = "31">This is expressed in Coq as follows: Coercion Attitude_Perspective_is_Scene : Attitude_Perspective &gt;-&gt; Scene.</S>
			<S sid ="323" ssid = "32">Coercion Idea_is_Scene : Idea &gt;-&gt; Scene.</S>
			<S sid ="324" ssid = "33">where Attitude_Perspective, Idea and Scene are declared as parameters of type Prop.</S>
			<S sid ="325" ssid = "34">These coercions declare the construction of the conceptual type Scene that can be seen as the composition of an Idea and an Attitude_Perspective.</S>
			<S sid ="326" ssid = "35">The coercions used for this study are described by an inheritance graph in Coq.</S>
			<S sid ="327" ssid = "36">Moreover, Coq detects ambiguous paths during the creation of the tree, and it checks the uniform inheritance condition according to which at most one path must be declared between two nodes.</S>
			<S sid ="328" ssid = "37">The relevant part of the inheritance graph for our example is: Parameter hammer : Agent -&gt; Object -&gt; Target -&gt; Prop.</S>
			<S sid ="329" ssid = "38">Parameter Zidane : human.</S>
			<S sid ="330" ssid = "39">Parameter ball : soccer_instrument.</S>
			<S sid ="331" ssid = "40">Parameter net : soccer_equipment.</S>
			<S sid ="332" ssid = "41">These four parameters describe the variables used in our example of Fig.</S>
			<S sid ="333" ssid = "42">2.</S>
			<S sid ="334" ssid = "43">Prop stands in Coq for the type of proposition.</S>
			<S sid ="335" ssid = "44">Roles (Agent, Object, Target) and features (human, soccer_instrument, soccer_equipment) are generic types.</S>
			<S sid ="336" ssid = "45">To express conceptual constraints such as, Agents must be animate, Coq uses the sub- type principle in order to check that all constraints are satisfied, defining human, soccer_instrument and soccer_equipment respectively as subtypes of Agent, Object and Target.When all constraints are satisfied, the semantics of a sen tence can be represented, which yields in our case “there is an agent who did something in a specific way, by using some instrument”.</S>
			<S sid ="337" ssid = "46">In other words: there is a person p, an object o and a target t that are linked via an action performed in a specific way.</S>
			<S sid ="338" ssid = "47">The user message can be defined generically and typed as follows: Parameter is_someone : Agent -&gt; Prop.</S>
			<S sid ="339" ssid = "48">Parameter is_something : Object -&gt; Prop.</S>
			<S sid ="340" ssid = "49">Parameter is_manner : Target -&gt; Prop.</S>
			<S sid ="341" ssid = "50">Parameter relation : Agent -&gt; Object -&gt; Target -&gt; Prop.</S>
			<S sid ="342" ssid = "51">Definition message := exists p, exists o, exists t, is_someone p/\is_something o/\ is_manner t/\relation p o t. This definition is a λ-expression taking as parameters the following variables (type names are referred to via their initial capital) (λs : A → P )(λo : O → P )(λt : T → P) ×(λr : A → O → T → P) Hence, to produce the global message Zidane hammered the ball straight into the net, we must instantiate the composite propositions respectively by is_Zidane (of type human -&gt; Prop), is_ball (of type soccer_instrument -&gt; Prop), is_net (of type soccer_equipment -&gt; Prop).</S>
			<S sid ="343" ssid = "52">Hammer is already declared.</S>
			<S sid ="344" ssid = "53">Once this is done, the parameters Zidane, ball and net can be applied to produce the desired result, the system type-checking the compatibility of the involved parameters.</S>
			<S sid ="345" ssid = "54">More generally speaking, checking the conceptual well- formedness and consistency of the messages amounts basically to type-checking the composite elements of the message.</S>
	</SECTION>
	<SECTION title="Conclusion and Perspectives. " number = "5">
			<S sid ="346" ssid = "1">The goal of this paper has been to deal with a problem hardly ever addressed in the literature on natural language generation, conceptual input.</S>
			<S sid ="347" ssid = "2">In order to express something, one needs to have something to express (idea, thought, concept) to begin with (input, meaning).</S>
			<S sid ="348" ssid = "3">The question is how to represent this something.</S>
			<S sid ="349" ssid = "4">What are the building blocks and how shall we organize and index them to allow for quick and intuitive access later on?</S>
			<S sid ="350" ssid = "5">Dealing with interactive sentence generation, we suggested building a linguistically motivated ontology combined with a dictionary and a graph generator.</S>
			<S sid ="351" ssid = "6">While the goal of the ontology is to guide message composition (what to say), the graph’s function is to show at an intermediate level the result of the encoding process.</S>
			<S sid ="352" ssid = "7">This reduces memory load, allowing at the same time the checking of well formedness.</S>
			<S sid ="353" ssid = "8">Does the message-graph really encode the authors intention?</S>
			<S sid ="354" ssid = "9">Of course, there are many ontologies.</S>
			<S sid ="355" ssid = "10">Unfortunately, we cannot draw on any of them directly, as they have not been built for message composition.</S>
			<S sid ="356" ssid = "11">As we have seen, different applications may require different strategies for providing input.</S>
			<S sid ="357" ssid = "12">In Illico it was driven via an ontology, taking place fairly late.</S>
			<S sid ="358" ssid = "13">Part of the message was known and expressed, thus, constraining further inputs.</S>
			<S sid ="359" ssid = "14">In the case of SPB, conceptual input consisted mainly in searching (for existing sentences or patterns) and performing local changes.</S>
			<S sid ="360" ssid = "15">Rather than starting from scratch, data are accommodated.</S>
			<S sid ="361" ssid = "16">Given the fact that we have a translation memory, input can be given in any language (mother tongue) we are confortable with, provided that it is part of the translation memory.</S>
			<S sid ="362" ssid = "17">If there is a translation between two sentences, any element is likely to evoke its equivalent and the sentence in which it occurs in the target language.</S>
			<S sid ="363" ssid = "18">Obviously, this is a nice feature, as it allows not only for natural input, but also to speed up the authoring process.</S>
			<S sid ="364" ssid = "19">In the case of DT, conceptual input is distributed over time, specification taking place in three steps: first via the choice of a goal, yielding an abstract, global structure or sentence pattern (steps 1), then via the variables’ concrete lexical- and morphological values (steps 2 and 3).</S>
			<S sid ="365" ssid = "20">In the case of DT, input is clearly underspecified at the earliest stage.</S>
			<S sid ="366" ssid = "21">Messages are gradually refined: starting from a fairly general idea, i.e., sentence pattern, one proceeds gradually to the specifics: lexical and morphological values.</S>
			<S sid ="367" ssid = "22">This seems a nice feature with respect to managing memory constraints.</S>
			<S sid ="368" ssid = "23">Many ideas presented here are somehow half-baked, needing maturation, but as mentioned earlier on, conceptual input is an area in Natural Language Generation where more work is badly needed.</S>
			<S sid ="369" ssid = "24">Acknowledgements We would like to thank Guy Lapalme for the time spent on reading, commenting and correcting our work.</S>
			<S sid ="370" ssid = "25">Sincere thanks also to Nicolas Nicolov and LihJuang for proofreading the final version.</S>
			<S sid ="371" ssid = "26">Their work helped a lot improving the final document.</S>
			<S sid ="372" ssid = "27">Finally, we would like to express our gratitude to Stergos Afantenos for implementing DT, and to Sadaoki Furui and Josafa de Jesus Aguiar Pontes from TITECH (Tokyo) for their contributions within the Speaking- Phrasebook project.</S>
	</SECTION>
</PAPER>
