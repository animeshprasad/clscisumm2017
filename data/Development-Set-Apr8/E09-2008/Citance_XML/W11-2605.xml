<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">This paper explores two different methods of learning dialectal morphology from a small parallel corpus of standard and dialect-form text, given that a computational description of the standard morphology is available.</S>
		<S sid ="2" ssid = "2">The goal is to produce a model that translates individual lexical dialectal items to their standard dialect counterparts in order to facilitate dialectal use of available NLP tools that only assume standard-form input.</S>
		<S sid ="3" ssid = "3">The results show that a learning method based on inductive logic programming quickly converges to the correct model with respect to many phonological and morphological differences that are regular in nature.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="4" ssid = "4">In our work with the Basque language, a morphological description and analyzer is available for the standard language, along with other tools for processing the language (Alegria et al., 2002).</S>
			<S sid ="5" ssid = "5">However, it would be convenient to be able to analyze variants and dialectal forms as well.</S>
			<S sid ="6" ssid = "6">As the dialectal differences within the Basque language are largely lexical and morphophonological, analyzing the dialectal forms would in effect require a separate morphological analyzer that is able to handle the unique lexical items in the dialect together with the differing affixes and phonological changes.</S>
			<S sid ="7" ssid = "7">Morphological analyzers are traditionally handwritten by linguists, most commonly using some variant of the popular finite-state morphology approach (Beesley and Karttunen, 2002).</S>
			<S sid ="8" ssid = "8">This entails 39 having an expert model a lexicon, inflectional and derivational paradigms as well as phonological alternations, and then producing a morphological analyzer/generator in the form of a finite-state transducer.</S>
			<S sid ="9" ssid = "9">As the development of such wide-coverage morphological analyzers is labor-intesive, the hope is that an analyzer for a variant could be automatically learned from a limited parallel standard/dialect corpus, given that an analyzer already exists for the standard language.</S>
			<S sid ="10" ssid = "10">This is an interesting problem because a good solution to it could be applied to many other tasks as well: to enhancing access to digital libraries (containing diachronic and dialectal variants), for example, or to improving treatment of informal registers such as SMS messages and blogs, etc. In this paper we evaluate two methods of learning a model from a standard/variant parallel corpus that translates a given word of the dialect to its standard- form equivalent.</S>
			<S sid ="11" ssid = "11">Both methods are based on finite- state phonology.</S>
			<S sid ="12" ssid = "12">The variant we use for experiments is Lapurdian,1 a dialect of Basque spoken in the La- purdi (fr.</S>
			<S sid ="13" ssid = "13">Labourd) region in the Basque Country.</S>
			<S sid ="14" ssid = "14">Because Basque is an agglutinative, highly inflected language, we believe some of the results can be extrapolated to many other languages facing similar challenges.</S>
			<S sid ="15" ssid = "15">One of the motivations for the current work is that there are a large number of NLP tools available and in development for standard Basque (also called Batua): a morphological analyzer, a POS tag- ger, a dependency analyzer, an MT engine, among 1 Sometimes also called NavarroLabourdin or Labourdin..</S>
			<S sid ="16" ssid = "16">Proceedings of EMNLP 2011, Conference on Empirical Methods in Natural Language Processing, pages 39–48, Edinburgh, Scotland, UK, July 27–31, 2011.</S>
			<S sid ="17" ssid = "17">Qc 2011 Association for Computational Linguistics others (Alegria et al., 2011).</S>
			<S sid ="18" ssid = "18">However, these tools do not work well in processing the different dialects of Basque where lexical items have a different orthographic representation owing to slight differences in phonology and morphology.</S>
			<S sid ="19" ssid = "19">Here is a brief contrastive example of the kinds of differences found in the (a) Lapurdian dialect and standard Basque (b) parallel corpus:2 (a) Ez gero uste izan nexkatxa guziek tu egiten dautatela (b) Ez gero uste izan neskatxa guztiek tu egiten didatela As the example illustrates, the differences are minor overall—the word order and syntax are unaffected, and only a few lexical items differ.</S>
			<S sid ="20" ssid = "20">This reflects the makeup of our parallel corpus quite well— in it, slightly less than 20% of the word tokens are distinct.</S>
			<S sid ="21" ssid = "21">However, even such relatively small discrepancies cause great problems in the potential reuse of current tools designed for the standard forms only.</S>
			<S sid ="22" ssid = "22">We have experimented with two approaches that attempt to improve on a simple baseline of memorizing word-pairs in the dialect and the standard.</S>
			<S sid ="23" ssid = "23">The first approach is based on work by Almeida et al.</S>
			<S sid ="24" ssid = "24">(2010) on contrasting orthography in Brazilian Portuguese and European Portuguese.</S>
			<S sid ="25" ssid = "25">In this approach differences between substrings in distinct word-pairs are memorized and these transformation patterns are then applied whenever novel words are encountered in the evaluation.</S>
			<S sid ="26" ssid = "26">To prevent over- generation, the output of this learning process is later subject to a morphological filter where only actual standard-form outputs are retained.</S>
			<S sid ="27" ssid = "27">The second approach is an Inductive Logic Programming-style (ILP) (Muggleton and De Raedt, 1994) learning algorithm where phonological transformation rules are learned from word-pairs.</S>
			<S sid ="28" ssid = "28">The goal is to find a minimal set of transformation rules that is both necessary and sufficient to be compatible with the learning data, i.e. the word pairs seen in the training data.</S>
			<S sid ="29" ssid = "29">The remainder of the paper is organized as follows.</S>
			<S sid ="30" ssid = "30">The characteristics of the corpus available to us are described in section 2.</S>
			<S sid ="31" ssid = "31">In sections 3, 4, and 5, we describe the steps and variations of the methods we have applied and how they are evaluated.</S>
			<S sid ="32" ssid = "32">Section 6 presents the experimental results, and finally, 2 English translation of the example: Don’t think all girls spit on me we discuss the results and present possibilities for potential future work in section 7.</S>
			<S sid ="33" ssid = "33">1.1 Related work.</S>
			<S sid ="34" ssid = "34">The general problem of supervised learning of dialectal variants or morphological paradigms has been discussed in the literature with various connection to computational phonology, morphology, machine learning, and corpus-based work.</S>
			<S sid ="35" ssid = "35">For example, Kestemont et al.</S>
			<S sid ="36" ssid = "36">(2010) presents a language- independent system that can ‘learn’ intra-lemma spelling variation.</S>
			<S sid ="37" ssid = "37">The system is used to produce a consistent lemmatization of texts in Middle Dutch literature in a medieval corpus, Corpus-Gysseling, which contains manuscripts dated before 1300 AD.</S>
			<S sid ="38" ssid = "38">These texts have enormous spelling variation which makes a computational analysis difficult.</S>
			<S sid ="39" ssid = "39">Koskenniemi (1991) provides a sketch of a discovery procedure for phonological two-level rules.</S>
			<S sid ="40" ssid = "40">The idea is to start from a limited number of paradigms (essentially pairs of input-output forms where the input is the surface form of a word and the output a lemmatization plus analysis).</S>
			<S sid ="41" ssid = "41">The problem of finding phonological rules to model morphological paradigms is essentially similar to the problem presented in this paper.</S>
			<S sid ="42" ssid = "42">An earlier paper, Johnson (1984), presents a ‘discovery procedure’ for learning phonological rules from data, something that can be seen as a precursor to the problem dealt with by our ILP algorithm.</S>
			<S sid ="43" ssid = "43">Mann and Yarowsky (2001) present a method for inducing translation lexicons based on transduction models of cognate pairs via bridge languages.</S>
			<S sid ="44" ssid = "44">Bilingual lexicons within languages families are induced using probabilistic string edit distance models.</S>
			<S sid ="45" ssid = "45">Inspired by that paper, Scherrer (2007) uses a generate-and-filter approach quite similar to our first method.</S>
			<S sid ="46" ssid = "46">He compares different measures of graphemic similarity applied to the task of bilingual lexicon induction between Swiss German and Standard German.</S>
			<S sid ="47" ssid = "47">Stochastic transducers are trained with the EM algorithm and using handmade transduction rules.</S>
			<S sid ="48" ssid = "48">An improvement of 11% in F-score is reported over a baseline method using Levenshtein Distance.</S>
			<S sid ="49" ssid = "49">Se nte nc es 2,1 17 1 , 6 9 4 4 2 3 Wo rds 12, 15 0 9 , 7 3 4 2 , 4 1 7 Uni qu e wo rds Sta nd ard Ba sq ue 3,5 53 3 , 0 8 0 1 , 1 9 2 La pu rdi an 3,8 30 3 , 2 9 2 1 , 2 3 9 Filt ere d pai rs 3,6 10 3 , 1 0 8 1 , 1 7 2 Ide nti cal pai rs 2,5 32 2 , 2 0 0 8 7 1 Dis tin ct pai rs 1,0 78 9 0 8 3 0 1 Table 1: Characteristics of the parallel corpus used for experiments.</S>
	</SECTION>
	<SECTION title="The corpus. " number = "2">
			<S sid ="50" ssid = "1">The parallel corpus used in this research is part of “TSABL” project developed by the IKER group in Baiona (fr.</S>
			<S sid ="51" ssid = "2">Bayonne).3 The researchers of the IKER project have provided us with examples of the La- purdian dialect and their corresponding forms in standard Basque.</S>
			<S sid ="52" ssid = "3">Our parallel corpus then contains running text in two variants: complete sentences of the Lapurdian dialect and equivalent sentences in standard Basque.</S>
			<S sid ="53" ssid = "4">The details of the corpus are presented in table 1.</S>
			<S sid ="54" ssid = "5">The corpus consists of 2,117 parallel sentences, totaling 12,150 words (roughly 3,600 types).</S>
			<S sid ="55" ssid = "6">In order to provide data for our learning algorithms and also to test their performance, we have divided the corpus into two parts: 80% of the corpus is used for the learning task (1,694 sentences) and the remaining 20% (423 sentences) for evaluation of the learning process.</S>
			<S sid ="56" ssid = "7">As is seen, roughly 23% of the word-pairs are distinct.</S>
			<S sid ="57" ssid = "8">Another measure of the average deviation between the word pairs in the corpus is given by aligning all word-pairs by minimum edit distance (MED): aligning the 3,108 word-pairs in the learning corpus can be done at a total MED cost of 1,571.</S>
			<S sid ="58" ssid = "9">That is, roughly every 14th character in the dialect data is different from the standard form.</S>
	</SECTION>
	<SECTION title="The baseline. " number = "3">
			<S sid ="59" ssid = "1">The baseline of our experiments is a simple method, based on a dictionary of equivalent words with the list of correspondences between words extracted 3 Towards a Syntactic Atlas of the Basque Language, web site: http://www.iker.cnrs.fr/-tsabl-towards-a-syntactic-atlas- of-.html list of correspondences contains all different word pairs in the variant vs. standard corpus.</S>
			<S sid ="60" ssid = "2">The baseline approach consists simply of memorizing all the distinct word pairs seen between the dialectal and standard forms, and subsequently applying this knowledge during the evaluation task.</S>
			<S sid ="61" ssid = "3">That is, if an input word during the evaluation has been seen in the training data, we provide the corresponding previously known output word as the answer.</S>
			<S sid ="62" ssid = "4">Otherwise, we assume that the output word is identical to the input word.</S>
	</SECTION>
	<SECTION title="Overview of methods. " number = "4">
			<S sid ="63" ssid = "1">We have employed two different methods to produce an application that attempts to extract generalizations from the training corpus to ultimately be able to produce the equivalent standard word corresponding to a given dialectal input word.</S>
			<S sid ="64" ssid = "2">The first method is based on already existing work by Almeida et al.</S>
			<S sid ="65" ssid = "3">(2010) that extracts all substrings from lexical pairs that are different.</S>
			<S sid ="66" ssid = "4">From this knowledge we then produce a number of phonological replacement rules that model the differences between the input and output words.</S>
			<S sid ="67" ssid = "5">In the second method, we likewise produce a set of phonological replacement rules, using an ILP approach that directly induces the rules from the pairs of words in the training corpus.</S>
			<S sid ="68" ssid = "6">The core difference between the two methods is that while both extract replacement patterns from the word-pairs, the first method does not consider negative evidence in formulating the replacement rules.</S>
			<S sid ="69" ssid = "7">Instead, the existing morphological analyzer is used as a filter after applying the rules to unknown text.</S>
			<S sid ="70" ssid = "8">The second method, however, uses negative evidence from the word-pairs in delineating the replacement rules as is standard in ILP-approaches, and the subsequent morphological filter for the output plays much less of a role.</S>
			<S sid ="71" ssid = "9">Evaluating and comparing both approaches is motivated because the first method may produce much higher recall by virtue of generating a large number of input-output candidates during application, and the question is whether the corresponding loss in precision may be mitigated by judicious application of post-processing filters.</S>
			<S sid ="72" ssid = "10">Both of the methods we have evaluated involve learning a set of string-transformation rules to convert words, morphemes, or individual letters (graphemes) in the dialectal forms to the standard variant.</S>
			<S sid ="73" ssid = "11">The rules that are learned are in the format of so-called phonological replacement rules (Beesley and Karttunen, 2002) which we have later converted into equivalent finite-state transducers using the freely available foma toolkit (Hulden, 2009a).</S>
			<S sid ="74" ssid = "12">The reason for the ultimate conversion of the rule set to finite-state transducers is twofold: first, the transducers are easy to apply rapidly to input data using available tools, and secondly, the transducers can further be modified and combined with the standard morphology already available to us as a finite transducer.</S>
			<S sid ="75" ssid = "13">In its simplest form, a replacement rule is of the format A → B || C D (1) where the arguments A,B,C ,D are all single symbols or strings.</S>
			<S sid ="76" ssid = "14">Such a rule dictates the transformation of a string A to B, whenever the A occurs between the strings C and D. Both C and D are optional arguments in such a rule, and there may be multiple conditioning environments for the same rule.</S>
			<S sid ="77" ssid = "15">For example, the rule: h -&gt; 0 || p , t , l , a s o (2) would dictate a deletion of h in a number of contexts; when the h is preceded by a p, t, or l, or succeeded by the sequence aso, for instance transforming ongiethorri (Lapurdian) to ongietorri (Batua).</S>
			<S sid ="78" ssid = "16">As we will be learning several rules that each target different input strings, we have a choice as to the mode of application of the rules in the evaluation phase.</S>
			<S sid ="79" ssid = "17">The learned rules could either be applied in some specific order (sequentially), or applied simultaneously without regard to order (in parallel).</S>
			<S sid ="80" ssid = "18">For example, the rules: u -&gt; i || z a (3) k -&gt; g || z a u (4) would together (in parallel) change zaukun into zai- gun.</S>
			<S sid ="81" ssid = "19">Note that if we imposed some sort of orderingapply first, for example, the conditioning environ ment for the second rule would no longer be met after transforming the word into zaikun.</S>
			<S sid ="82" ssid = "20">We have experimented with sequential as well as parallel processing, and the results are discussed below.</S>
			<S sid ="83" ssid = "21">4.2 Method 1 (lexdiff) details.</S>
			<S sid ="84" ssid = "22">The first method is based on the idea of identifying sequences inside word pairs where the output differs from the input.</S>
			<S sid ="85" ssid = "23">This was done through the already available tool lexdiff which has been used in automatic migration of texts between different Portuguese orthographies (Almeida et al., 2010).</S>
			<S sid ="86" ssid = "24">The lexdiff program tries to identify sequences of changes from seen word pairs and outputs string correspondences such as, for example: 76 ait -&gt; at ; 39 dautz -&gt; diz (stemming from pairs such as (joaiten/joaten and dautzut/dizut), indicating that ait has changed into at 76 times in the corpus, etc., thus directly providing suggestions as to phonologically regular changes between two texts, with frequency information included.</S>
			<S sid ="87" ssid = "25">With such information about word pairs we generate a variety of replacement rules which are then compiled into finite transducers with the foma application.</S>
			<S sid ="88" ssid = "26">Even though the lexdiff program provides a direct string-to-string change in a format that is directly compilable into a phonological rule transducer, we have experimented with some possible variations of the specific type of phonological rule we want to output: • We can restrict the rules by frequency and require that a certain type of change be seen at least n times in order to apply that rule.</S>
			<S sid ="89" ssid = "27">For example, if we set this threshold to 3, we will only apply a string-to-string changing rule that has been seen three or more times.</S>
			<S sid ="90" ssid = "28">• We limit the number of rules that can be applied to the same word.</S>
			<S sid ="91" ssid = "29">Sometimes the lexdiff application divides the change between a pair of words into two separate rules.</S>
			<S sid ="92" ssid = "30">For example the word-word correspondence agerkuntza/agerpena is expressed by two rules: rkun -&gt; rpen and ntza -&gt; na.</S>
			<S sid ="93" ssid = "31">Now, given these two rules, we have to be able to apply both to produce the correct total change changes ku into pe when flanked by r and n to the left and right, respectively, i.e. producing a rule: k u -&gt; p e || r n (5) This has a bearing on the previous point and will allow more rewritings within a single word in parallel replacement mode since there are fewer characters overlapping.</S>
			<S sid ="94" ssid = "32">Figure 1: The role of the standard Basque (Batua) analyzer in filtering out unwanted output candidates created by the induced rule set produced by method 1.</S>
			<S sid ="95" ssid = "33">agerkuntza/agerpena.</S>
			<S sid ="96" ssid = "34">By limiting the number of rules that can apply to a single input word we can avoid creating many spurious outputs, but also at the same time we may sacrifice some ability to produce the desired output forms.</S>
			<S sid ="97" ssid = "35">• We can also control the application mode of the rules: sequential or parallel.</S>
			<S sid ="98" ssid = "36">If the previous two rules are applied in parallel, the form obtained from agerkuntza will not be correct since the n overlaps with the two rules.</S>
			<S sid ="99" ssid = "37">That is, when applying rules simultaneously in parallel, the input characters for two rules may not overlap.</S>
			<S sid ="100" ssid = "38">However, if these two rules applied in sequence (the order in this example is irrelevant), the output will be the correct: we first change rkun -&gt; rpen and later ntza -&gt; na.</S>
			<S sid ="101" ssid = "39">We have not a priori chosen to use parallel or sequential rules and have decided to evaluate both approaches.</S>
			<S sid ="102" ssid = "40">• We can also compact the rules output by lexdiff by eliminating redundancies and constructing context-sensitive rules.</S>
			<S sid ="103" ssid = "41">For example: given Once a set of rules is compiled with some instantiation of the various parameters discussed above and converted to a transducer, we modify the transducer in various ways to improve on the output.</S>
			<S sid ="104" ssid = "42">First, since we already have access to a large-scale morphological transducer that models the standard Basque (Batua), we restrict the output from the conversion transducer to only allow those words as output that are legitimate words in standard Basque.</S>
			<S sid ="105" ssid = "43">Figure 1 illustrates this idea.</S>
			<S sid ="106" ssid = "44">In that figure, we see an input word in the dialect (emaiten) produce a number of candidates using the rules induced.</S>
			<S sid ="107" ssid = "45">However, after adding a morphological filter that models the Batua, we retain only one output.</S>
			<S sid ="108" ssid = "46">Secondly, in the case that even after applying the Batua filter we retain multiple outputs, we simply choose the most frequent word (these unigram counts are gathered from a separate newspaper corpus of standard Basque).</S>
			<S sid ="109" ssid = "47">4.3 Method 2 (ILP) details.</S>
			<S sid ="110" ssid = "48">The second method we have employed works directly from a collection of word-pairs (dialect/standard in this case).</S>
			<S sid ="111" ssid = "49">We have developed an algorithm that from a collection of such pairs seeks a minimal hypothesis in the form of a set of replacement rules that is consistent with all the changes found in the training data.</S>
			<S sid ="112" ssid = "50">This approach is generally in line with ILP-based machine learning methods (Muggleton and De Raedt, 1994).</S>
			<S sid ="113" ssid = "51">However, in contrast to the standard ILP, we do not learn statements of first-order logic that fit a collection of data, but rather, string-to-string replacement rules.4 4 Phonological string-to-string replacement rules can be defined as collections of statements in first-order logic and com conditioning environments for each rule, such that the collection of rules model the string transformations found in the training data.</S>
			<S sid ="114" ssid = "52">The procedure employed for the learning task is as follows: (1) Align all word pairs (using minimum edit distance by default).</S>
			<S sid ="115" ssid = "53">(2) Extract a collection of phonological rewrite rules.</S>
			<S sid ="116" ssid = "54">(3) For each rule, find counterexamples.</S>
			<S sid ="117" ssid = "55">(4) For each rule, find the shortest conditioning environment such that the rule applies to all positive examples, and none of the negative examples.</S>
			<S sid ="118" ssid = "56">Restrict rule to be triggered only in this environment.</S>
			<S sid ="119" ssid = "57">The following simple example should illustrate the method.</S>
			<S sid ="120" ssid = "58">Assuming we have a corpus of only two word pairs: emaiten ematen igorri igorri in step (1) we would perform the alignment and produce the output e m a i t e n i g o r r i e m a ∅ t e n i g o r r i From this data we would in step (2) gather that the only active phonological rule is i → ∅, since all other symbols are unchanged in the data.</S>
			<S sid ="121" ssid = "59">However, we find two counterexamples to this rule (step 3), namely two i-symbols in igorri which do not alternate with ∅.</S>
			<S sid ="122" ssid = "60">The shortest conditioning environ ment that accurately models the data and produces no overgeneration (does not apply to any of the is in igorri) is therefore: i -&gt; ∅ || a (6) see e.g. Hulden (2009b) for details.</S>
			<S sid ="123" ssid = "61">In other words, in this work, we skip the intermediate step of defining our observa tions as logical statements and directly convert our observations two competing alternatives to the shortest generalization: we could also have chosen to condition the i-deletion rule by the t that follows the i. Both conditioning environments are exactly one symbol long.</S>
			<S sid ="124" ssid = "62">To resolve such cases, we a priori choose to favor conditioning environments that extend farther to the left.</S>
			<S sid ="125" ssid = "63">This is an arbitrary decision—albeit one that does have some support from phonology as most phonological assimilation rules are conditioned by previously heard segments—and very similar results are obtained regardless of left/right bias in the learning.</S>
			<S sid ="126" ssid = "64">Also, all the rules learned with this method are applied simultaneously (in parallel) in the evaluation phase.</S>
			<S sid ="127" ssid = "65">4.3.1 String-to-string vs. single-symbol rules In some cases several consecutive input symbols fail to correspond to the output in the learning data, as in for example the pairing d a u t d i ∅ t corresponding to the dialect-standard pair daut/dit.</S>
			<S sid ="128" ssid = "66">Since there is no requirement in our formalism of rewrite rules that they be restricted to single-symbol rewrites only, there are two ways to handle this: either one can create a string-to-string rewriting rule: au → i / CONTEXT or create two separate rules a → i / CONTEXT , u → ∅ / CONTEXT where CONTEXT refers to the minimal conditioning environment determined by the rest of the data.</S>
			<S sid ="129" ssid = "67">We have evaluated both choices, and there is no notable difference between them in the final results.</S>
	</SECTION>
	<SECTION title="Evaluation. " number = "5">
			<S sid ="130" ssid = "1">We have measured the quality of different approaches by the usual parameters of precision, recall and the harmonic combination of them, the F1- score, and analyzed how the different options in the two approaches affect the results of these three parameters.</S>
			<S sid ="131" ssid = "2">Given that we, especially in method 1, produce a high recall on the conversion of unknown dialect words to the standard form.</S>
			<S sid ="132" ssid = "3">However, the downside is that this naturally leads to low precision as well, which we try to control by introducing a number of filters to remove some of the candidates output by the rules.</S>
			<S sid ="133" ssid = "4">As mentioned above, we use two filters: (1) an obligatory filter which removes all candidate words that are not found in the stan f ≥ 1 38 .9 5 66 .7 8 49 .2 0 f ≥ 2 46 .9 9 57 .1 4 51 .5 7 f ≥ 3 49 .3 9 53 .8 2 51 .5 1 Table 2: Values obtained for Precision, Recall and F- scores with method 1 by changing the minimum frequency of the correspondences to construct rules for foma.</S>
			<S sid ="134" ssid = "5">The rest of the options are the same in all three experiments: only one rule is applied within a word.</S>
			<S sid ="135" ssid = "6">dard Basque (by using an existing standard Basque morphological analyzer), and (2) using an optional filter which, given several candidates in the standard Basque, picks the most frequently occurring one by a unigram count from the separate newspaper corpus.</S>
			<S sid ="136" ssid = "7">This latter filter turns out to serve a much more prominent role in improving the results of method 1, while it is almost completely negligible for method 2.</S>
	</SECTION>
	<SECTION title="Results. " number = "6">
			<S sid ="137" ssid = "1">As mentioned above, the learning process has made use of 80% of the corpus, leaving 20% of the corpus for evaluation of the above-mentioned approaches.</S>
			<S sid ="138" ssid = "2">In the evaluation, we have only tested those words in the dialect that differ from words in the standard (which are in the minority).</S>
			<S sid ="139" ssid = "3">In total, in the evaluation part, we have tested the 301 words that differ between the dialect and the standard in the evaluation part of the corpus.</S>
			<S sid ="140" ssid = "4">The results for the baseline—i.e. simple memorization of word-word correspondences—are (in %): P = 95.62, R = 43.52 and F1 = 59.82.</S>
			<S sid ="141" ssid = "5">As expected, the precision of the baseline is high: when the method gives an answer it is usually the correct one.</S>
			<S sid ="142" ssid = "6">But the recall of the baseline is low, as is expected: slightly less than half the words in the evaluation corpus have been encountered before.5 6.1 Results with the lexdiff method.</S>
			<S sid ="143" ssid = "7">Table 2 shows the initial experiment of method 1 with different variations on the frequency 5 The reason the baseline does not show 100% precision is that the corpus contains minor inconsistencies or accepted alternative spellings, and our method of measuring the precision suffers from such examples by providing both learned alternatives to a dialectal word, while only one is counted as being correct.Table 3: Values obtained for Precision, Recall and F score with method 1 by changing the threshold frequency of the correspondences and applying a post-filter.</S>
			<S sid ="144" ssid = "8">threshold—this is the limit on the number of times we must see a string-change to learn it.</S>
			<S sid ="145" ssid = "9">The results clearly show that the more examples we extract (frequency 1), the better results we obtain for recall while at the same time the precision suffers since many spurious outputs are given—even many different ones that each legitimately correspond to a word in the standard dialect.</S>
			<S sid ="146" ssid = "10">The F1-score doesn’t vary very much and it maintains similar values throughout.</S>
			<S sid ="147" ssid = "11">The problem with this approach is one which we have noted before: the rules produce a large number of outputs for any given input word and the consequence is that the precision suffers, even though only those output words are retained that correspond to actual standard Basque.</S>
			<S sid ="148" ssid = "12">With the additional unigram filter in place, the results improve markedly.</S>
			<S sid ="149" ssid = "13">The unigram-filtered results are given in table 3.</S>
			<S sid ="150" ssid = "14">We have also varied the maximum number of possible rule applications within a single word as well as applying the rules in parallel or sequentially, and compacting the rules to provide more context- sensitivity.</S>
			<S sid ="151" ssid = "15">We shall here limit ourselves to presenting the best results of all these options in terms of the F1-score in table 4.</S>
			<S sid ="152" ssid = "16">In general, we may note that applying more than P vs R 1 without filter with filter 0.9 0.8 Table 4: Method 1.</S>
			<S sid ="153" ssid = "17">Exp1: frequency 2; 2 rules applied; in parallel; without contextual conditioning.</S>
			<S sid ="154" ssid = "18">Exp2: frequency 1; 1 rule applied; with contextual conditioning.</S>
			<S sid ="155" ssid = "19">Exp3: frequency 2; 2 rules applied; in parallel; with contextual conditioning.</S>
			<S sid ="156" ssid = "20">one rule within a word has a negative effect on 0.7 0.6 0.5 0.4 0 0.2 0.4 0.6 0.8 1 Precision the precision while not substantially improving the recall.</S>
			<S sid ="157" ssid = "21">Applying the unigram filter—choosing the most frequent candidate—yields a significant improvement: much better precision but also slightly worse recall.</S>
			<S sid ="158" ssid = "22">Choosing either parallel or sequential application of rules (when more than one rule is applied to a word) does not change the results significantly.</S>
			<S sid ="159" ssid = "23">Finally, compacting the rules and producing context-sensitive ones is clearly the best option.</S>
			<S sid ="160" ssid = "24">In all cases the F1-score improves if the unigram filter is applied; sometimes significantly and sometimes only slightly.</S>
			<S sid ="161" ssid = "25">All the results of the table 4 which lists the best performing ones come from experiments where the unigram filter was applied.</S>
			<S sid ="162" ssid = "26">Figure 2 shows how precision and recall values change in some of the experiments done with method 1.</S>
			<S sid ="163" ssid = "27">There are two different groups of points depending on if the unigram filter is applied, illustrating the tradeoff in precision and recall.</S>
			<S sid ="164" ssid = "28">6.2 Results with the ILP method.</S>
			<S sid ="165" ssid = "29">The ILP-based results are clearly better overall, and it appears that the gain in recall by using method 1 does not produce F1-scores above those produced with the ILP-method, irrespective of the frequency filters applied.</S>
			<S sid ="166" ssid = "30">Crucially, the negative evidence and subsequent narrowness of the replacement rules learned with the ILP method is responsible for the higher accuracy.</S>
			<S sid ="167" ssid = "31">Also, the results from the ILP- based method rely very little on the post-processing filters, as will be seen.</S>
			<S sid ="168" ssid = "32">The only variable parameter with the ILP method concerns how many times a word-pair must be seen to be used as learning evidence for creating a replacement rule.</S>
			<S sid ="169" ssid = "33">As expected, the strongest result Figure 2: Tradeoffs of precision and recall values in the experiments with method 1 using various different parameters.</S>
			<S sid ="170" ssid = "34">When the unigram filter is applied the precision is much better, but the recall drops.</S>
			<S sid ="171" ssid = "35">P R F1 n = 1 85.02 (86.13) 58.47 (57.80) 69.29 (69.18) n = 2 82.33 (83.42) 54.15 (53.49) 65.33 (65.18) n = 3 80.53 (82.07) 50.83 (50.17) 62.32 (62.26) n = 4 81.19 (82.32) 50.17 (49.50) 62.01 (61.83) Table 5: Experiments with the ILP method using a threshold of 1–4 (times a word-pair is seen) to trigger rule learning.</S>
			<S sid ="172" ssid = "36">The figures in parentheses are the same results with the added postprocessing unigram filter that, given several output candidates of the standard dialect, chooses the most frequent one.</S>
			<S sid ="173" ssid = "37">is obtained by using all word-pairs, i.e. setting the threshold to 1.</S>
			<S sid ="174" ssid = "38">Table 5 shows the degradation of performance resulting from using higher thresholds.</S>
			<S sid ="175" ssid = "39">Interestingly, adding the unigram filter that improved results markedly in method 1 to the output of the ILP method slightly worsens the results in most cases, and gives no discernible advantage in others.</S>
			<S sid ="176" ssid = "40">In other words, in those cases where the method provides multiple outputs, choosing the most frequent one on a unigram frequency basis gives no improvement over not doing so.</S>
			<S sid ="177" ssid = "41">Additionally, there is comparatively little advantage with this method in adding the morphological filter to the output of the words in method 2 (this is the filter that rules out nonstandard words).</S>
			<S sid ="178" ssid = "42">The results in table 5 include the morphological filter, but omitting it altogether brings down the best F1 B as eli ne 95 .6 2 43 .5 2 59 .8 2 M et ho d 1 (le xd iff) 75 .1 0 60 .1 3 66 .7 9 M et ho d 2 (IL P) 85 .0 2 58 .4 7 69 .2 9 Table 6: The best results (per F1 -score of the two methods).</S>
			<S sid ="179" ssid = "43">The parameters of method 1 included using only those string transformations that occur at least 2 times in the training data, and limiting rule application to a maximum of 2 times within a word, and including a unigram post-filter.</S>
			<S sid ="180" ssid = "44">Rules were contextually conditioned.</S>
			<S sid ="181" ssid = "45">For method 2, all the examples (threshold 1) in the training data were used as positive and negative evidence, without a unigram filter.</S>
			<S sid ="182" ssid = "46">to 56.14 from 69.29.</S>
			<S sid ="183" ssid = "47">By contrast, method 1 depends heavily on it and omitting the filter brings down the F1-score from 66.79 to 11.53 with the otherwise strongest result of method 1 seen in table 6.</S>
			<S sid ="184" ssid = "48">The most prominent difference between the two approaches is that while method 1 can be fine- tuned using frequency information and various filters to yield results close to method 2, the ILP approach provides equally robust results without any additional information—in particular, frequency information of the target language.</S>
			<S sid ="185" ssid = "49">We also find a much lower rate of errors of commission with the ILP method; this is somewhat obvious as it takes advantage of negative evidence directly while the first method only does so indirectly through filters added later.</S>
	</SECTION>
	<SECTION title="Conclusions and future work. " number = "7">
			<S sid ="186" ssid = "1">We have presented a number of experiments to solve a very concrete task: given a word in the Lapurdian dialect of Basque, produce the equivalent standard Basque word.</S>
			<S sid ="187" ssid = "2">As background knowledge, we have a complete standard Basque morphological analyzer and a small parallel corpus of dialect and standard text.</S>
			<S sid ="188" ssid = "3">The approach has been based on the idea of extracting string-to-string transformation rules from the parallel corpus, and applying these rules to unseen words.</S>
			<S sid ="189" ssid = "4">We have been able to improve on the results of a naive baseline using two methods to infer phonological rules of the information extracted from the corpus and applying them with finite state transducers.</S>
			<S sid ="190" ssid = "5">In particular, the second method, in an Inductive Logic Programming-style approach, seems promising as regards inferring phonological and morphological differences that are quite regular in nature between the two language variants.</S>
			<S sid ="191" ssid = "6">We expect that a larger parallel corpus in conjunction with this method could potentially improve the results substantially—with a larger set of data, thresholds could be set so that morphophonological generalizations are triggered only after a sufficient number of training examples (avoiding overgeneration), and, naturally, many more unique, non-regular, lexical correspondences could be learned.</S>
			<S sid ="192" ssid = "7">During the current work, we have also accumulated a small but valuable training and test corpus which may serve as a future resource for evaluation of phonological and morphological rule induction algorithms.</S>
			<S sid ="193" ssid = "8">In order to improve the results, we plan to research the combination of the previous methods with other ones which infer dialectal paradigms and relations between lemmas and morphemes for the dialect and the standard.</S>
			<S sid ="194" ssid = "9">These inferred relations could be contrasted with the information of a larger corpus of the dialect without using an additional parallel corpus.</S>
	</SECTION>
	<SECTION title="Acknowledgments">
			<S sid ="195" ssid = "10">We are grateful for the insightful comments provided by the anonymous reviewers.</S>
			<S sid ="196" ssid = "11">This research has been partially funded by the Spanish Science and Innovation Ministry via the OpenMT2 project (TIN200914675-C0301) and the European Commission’s 7th Framework Program under grant agreement no. 238405 (CLARA).</S>
	</SECTION>
</PAPER>
