<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">An important task of opinion mining is to extract people’s opinions on features of an entity.</S>
		<S sid ="2" ssid = "2">For example, the sentence, “I love the GPS function of Motorola Droid” expresses a positive opinion on the “GPS function” of the Motorola phone.</S>
		<S sid ="3" ssid = "3">“GPS function” is the feature.</S>
		<S sid ="4" ssid = "4">This paper focuses on mining features.</S>
		<S sid ="5" ssid = "5">Double propagation is a state-of-the-art technique for solving the problem.</S>
		<S sid ="6" ssid = "6">It works well for medium-size corpora.</S>
		<S sid ="7" ssid = "7">However, for large and small corpora, it can result in low precision and low recall.</S>
		<S sid ="8" ssid = "8">To deal with these two problems, two improvements based on part-whole and “no” patterns are introduced to increase the recall.</S>
		<S sid ="9" ssid = "9">Then feature ranking is applied to the extracted feature candidates to improve the precision of the top-ranked candidates.</S>
		<S sid ="10" ssid = "10">We rank feature candidates by feature importance which is determined by two factors: feature relevance and feature frequency.</S>
		<S sid ="11" ssid = "11">The problem is formulated as a bipartite graph and the well-known web page ranking algorithm HITS is used to find important features and rank them high.</S>
		<S sid ="12" ssid = "12">Experiments on diverse real-life datasets show promising results.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="13" ssid = "13">In recent years, opinion mining or sentiment analysis (Liu, 2010; Pang and Lee, 2008) has been an active research area in NLP.</S>
			<S sid ="14" ssid = "14">One task is to extract people’s opinions expressed on features of entities (Hu and Liu, 2004).</S>
			<S sid ="15" ssid = "15">For example, the sentence, “The picture of this camera is amazing”, expresses a positive opinion on the picture of the camera.</S>
			<S sid ="16" ssid = "16">“picture” is the feature.</S>
			<S sid ="17" ssid = "17">How to extract features from a corpus is an important problem.</S>
			<S sid ="18" ssid = "18">There are several studies on feature extraction (e.g., Hu and Liu, 2004, Popescu and Etzioni, 2005, Kobayashi et al., 2007, Scaffidi et al., 2007, Stoyanov and Cardie.</S>
			<S sid ="19" ssid = "19">2008, Wong et al., 2008, Qiu et al., 2009).</S>
			<S sid ="20" ssid = "20">However, this problem is far from being solved.</S>
			<S sid ="21" ssid = "21">Double Propagation (Qiu et al., 2009) is a state-of-the-art unsupervised technique for solving the problem.</S>
			<S sid ="22" ssid = "22">It mainly extracts noun features, and works well for medium-size corpora.</S>
			<S sid ="23" ssid = "23">But for large corpora, this method can introduce a great deal of noise (low precision), and for small corpora, it can miss important features.</S>
			<S sid ="24" ssid = "24">To deal with these two problems, we propose a new feature mining method, which enhances that in (Qiu et al., 2009).</S>
			<S sid ="25" ssid = "25">Firstly, two improvements based on part-whole patterns and “no” patterns are introduced to increase recall.</S>
			<S sid ="26" ssid = "26">Part-whole or meronymy is an important semantic relation in NLP, which indicates that one or more objects are parts of another object.</S>
			<S sid ="27" ssid = "27">1462 Coling 2010: Poster Volume, pages 1462–1470, Beijing, August 2010 For example, the phrase “the engine of the car” contains the part-whole relation that “engine” is part of “car”.</S>
			<S sid ="28" ssid = "28">This relation is very useful for feature extraction, because if we know one object is part of a product class, this object should be a feature.</S>
			<S sid ="29" ssid = "29">“no” pattern is another extraction pattern.</S>
			<S sid ="30" ssid = "30">Its basic form is the word “no” followed by a noun/noun phrase, for instance, “no noise”.</S>
			<S sid ="31" ssid = "31">People often express their short comments or opinions on features using this pattern.</S>
			<S sid ="32" ssid = "32">Both types of patterns can help find features missed by double propagation.</S>
			<S sid ="33" ssid = "33">As for the low precision problem, we present a feature ranking approach to tackle it.</S>
			<S sid ="34" ssid = "34">We rank feature candidates based on their importance which consists of two factors: feature relevance and feature frequency.</S>
			<S sid ="35" ssid = "35">The basic idea of feature importance ranking is that if a feature candidate is correct and frequently mentioned in a corpus, it should be ranked high; otherwise it should be ranked low in the final result.</S>
			<S sid ="36" ssid = "36">Feature frequency is the occurrence frequency of a feature in a corpus, which is easy to obtain.</S>
			<S sid ="37" ssid = "37">However, assessing feature relevance is challenging.</S>
			<S sid ="38" ssid = "38">We model the problem as a bipartite graph and use the well-known web page ranking algorithm HITS (Kleinberg, 1999) to find important features and rank them high.</S>
			<S sid ="39" ssid = "39">Our experimental results show superior performances.</S>
			<S sid ="40" ssid = "40">In practical applications, we believe that ranking is also important for feature mining because ranking can help users to discover important features from the extracted hundreds of fine-grained candidate features efficiently.</S>
	</SECTION>
	<SECTION title="Related work. " number = "2">
			<S sid ="41" ssid = "1">Hu and Liu (2004) proposed a technique based on association rule mining to extract product features.</S>
			<S sid ="42" ssid = "2">The main idea is that people often use the same words when they comment on the same product features.</S>
			<S sid ="43" ssid = "3">Then frequent itemsets of nouns in reviews are likely to be product features while the infrequent ones are less likely to be product features.</S>
			<S sid ="44" ssid = "4">This work also introduced the idea of using opinion words to find additional (often infrequent) features.</S>
			<S sid ="45" ssid = "5">Popescu and Etzioni (2005) investigated the same problem.</S>
			<S sid ="46" ssid = "6">Their algorithm requires that the product class is known.</S>
			<S sid ="47" ssid = "7">The algorithm determines whether a noun/noun phrase is a feature by computing the pointwise mutual information (PMI) score between the phrase and class- specific discriminators, e.g., “of xx”, “xx has”, “xx comes with”, etc., where xx is a product class.</S>
			<S sid ="48" ssid = "8">This work first used part-whole patterns for feature mining, but it finds part-whole based features by searching the Web.</S>
			<S sid ="49" ssid = "9">Querying the Web is time-consuming.</S>
			<S sid ="50" ssid = "10">In our method, we use predefined part-whole relation patterns to extract features in a domain corpus.</S>
			<S sid ="51" ssid = "11">These patterns are domain-independent and fairly accurate.</S>
			<S sid ="52" ssid = "12">Following the initial work in (Hu and Liu 2004), several researchers have further explored the idea of using opinion words in product feature mining.</S>
			<S sid ="53" ssid = "13">A dependency based method was proposed in (Zhuang et al., 2006) for a movie review analysis application.</S>
			<S sid ="54" ssid = "14">Qiu et al.</S>
			<S sid ="55" ssid = "15">(2009) proposed a double propagation method, which exploits certain syntactic relations of opinion words and features, and propagates through both opinion words and features iteratively.</S>
			<S sid ="56" ssid = "16">The extraction rules are designed based on different relations between opinion words and features, and among opinion words and features themselves.</S>
			<S sid ="57" ssid = "17">Dependency grammar was adopted to describe these relations.</S>
			<S sid ="58" ssid = "18">In (Wang and Wang, 2008), another bootstrapping method was proposed.</S>
			<S sid ="59" ssid = "19">In (Kobayashi et al. 2007), a pattern mining method was used.</S>
			<S sid ="60" ssid = "20">The patterns are relations between feature and opinion pairs (they call aspect-evaluation pairs).</S>
			<S sid ="61" ssid = "21">The patterns are mined from a large corpus using pattern mining.</S>
			<S sid ="62" ssid = "22">Statistics from the corpus are used to determine the confidence scores of the extraction.</S>
			<S sid ="63" ssid = "23">In general information extraction, there are two approaches: rule-based and statistical.</S>
			<S sid ="64" ssid = "24">Early extraction systems are mainly based on rules (e.g., Riloff, 1993).</S>
			<S sid ="65" ssid = "25">In statistical methods, the most popular models are Hidden Markov Models (HMM) (Rabiner, 1989), Maximum Entropy Models (ME) (Chieu et al., 2002) and Conditional Random Fields (CRF) (Lafferty et al., 2001).</S>
			<S sid ="66" ssid = "26">CRF has been shown to be the most effective method.</S>
			<S sid ="67" ssid = "27">It was used in (Stoyanov et al., 2008).</S>
			<S sid ="68" ssid = "28">However, a limitation of CRF is that it only captures local patterns rather than long range patterns.</S>
			<S sid ="69" ssid = "29">It has been shown in (Qiu et al., 2009) that many feature and opinion word pairs have long range dependencies.</S>
			<S sid ="70" ssid = "30">Experimental results in (Qiu et al., 2009) indicate that CRF does not perform well.</S>
			<S sid ="71" ssid = "31">Other related works on feature extraction mainly use topic modeling to capture topics in reviews (Mei et al., 2007).</S>
			<S sid ="72" ssid = "32">In (Su et al., 2008), the authors also proposed a clustering based method with mutual reinforcement to identify features.</S>
			<S sid ="73" ssid = "33">However, topic modeling or clustering is only able to find some general/rough features, and has difficulty in finding fine-grained or precise features, which is more related to information extraction.</S>
	</SECTION>
	<SECTION title="The Proposed  Method. " number = "3">
			<S sid ="74" ssid = "1">As discussed in the introduction section, our proposed method deals with the problems of double propagation.</S>
			<S sid ="75" ssid = "2">So let us give a short explanation why double propagation can cause problems in large or small corpora.</S>
			<S sid ="76" ssid = "3">Double propagation assumes that features are nouns/noun phrases and opinion words are adjectives.</S>
			<S sid ="77" ssid = "4">It is shown that opinion words are usually associated with features in some ways.</S>
			<S sid ="78" ssid = "5">Thus, opinion words can be recognized by identified features, and features can be identified by known opinion words.</S>
			<S sid ="79" ssid = "6">The extracted opinion words and features are utilized to identify new opinion words and new features, which are used again to extract more opinion words and features.</S>
			<S sid ="80" ssid = "7">This propagation or bootstrapping process ends when no more opinion words or features can be found.</S>
			<S sid ="81" ssid = "8">The biggest advantage of the method is that it requires no additional resources except an initial seed opinion lexicon, which is readily available (Wilson et al., 2005, Ding et al., 2008).</S>
			<S sid ="82" ssid = "9">Thus it is domain independent and unsupervised, avoiding laborious and time- consuming work of labeling data for supervised learning methods.</S>
			<S sid ="83" ssid = "10">It works well for medium– size corpora.</S>
			<S sid ="84" ssid = "11">But for large corpora, this method may extract many nouns/noun phrases which are not features.</S>
			<S sid ="85" ssid = "12">The precision of the method thus drops.</S>
			<S sid ="86" ssid = "13">The reason is that during propagation, adjectives which are not opinionated will be extracted as opinion words, e.g., “entire” and “current”.</S>
			<S sid ="87" ssid = "14">These adjectives are not opinion words but they can modify many kinds of nouns/noun phrases, thus leading to extracting wrong features.</S>
			<S sid ="88" ssid = "15">Iteratively, more and more noises may be introduced during the process.</S>
			<S sid ="89" ssid = "16">The other problem is that for certain domains, some important features do not have opinion words modifying them.</S>
			<S sid ="90" ssid = "17">For example, in reviews of mattresses, a reviewer may say “There is a valley on my mattress”, which implies a nega tive opinion because “valley” is undesirable for a mattress.</S>
			<S sid ="91" ssid = "18">Obviously, “valley” is a feature, but “valley” may not be described by any opinion adjective, especially for a small corpus.</S>
			<S sid ="92" ssid = "19">Double propagation is not applicable in this situation.</S>
			<S sid ="93" ssid = "20">To deal with the problem, we propose a novel method to mine features, which consists of two steps: feature extraction and feature ranking.</S>
			<S sid ="94" ssid = "21">For feature extraction, we still adopt the double propagation idea to populate feature candidates.</S>
			<S sid ="95" ssid = "22">But two improvements based on part-whole relation patterns and a “no” pattern are made to find features which double propagation cannot find.</S>
			<S sid ="96" ssid = "23">They can solve part of the recall problem.</S>
			<S sid ="97" ssid = "24">For feature ranking, we rank feature candidates by feature importance.</S>
			<S sid ="98" ssid = "25">A part-whole pattern indicates one object is part of another object.</S>
			<S sid ="99" ssid = "26">For the previous example “There is a valley on my mattress”, we can find that it contains a part-whole relation between “valley” and “mattress”.</S>
			<S sid ="100" ssid = "27">“valley” belongs to “mattress”, which is indicated by the preposition “on”.</S>
			<S sid ="101" ssid = "28">Note that “valley” is not actually a part of mattress, but an effect on the mattress.</S>
			<S sid ="102" ssid = "29">It is called a pseudo part-whole relation.</S>
			<S sid ="103" ssid = "30">For simplicity, we will not distinguish it from an actual part-whole relation because for our feature mining task, they have little difference.</S>
			<S sid ="104" ssid = "31">In this case, “noun1 on noun2” is a good indicative pattern which implies noun1 is part of noun2.</S>
			<S sid ="105" ssid = "32">So if we know “mattress” is a class concept, we can infer that “valley” is a feature for “mattress”.</S>
			<S sid ="106" ssid = "33">There are many phrase or sentence patterns representing this type of semantic relation which was studied in (Girju et al, 2006).</S>
			<S sid ="107" ssid = "34">Beside part-whole patterns, “no” pattern is another important and specific feature indicator in opinion documents.</S>
			<S sid ="108" ssid = "35">We introduce these patterns in detail in Sections 3.2 and 3.3.</S>
			<S sid ="109" ssid = "36">Now let us deal with the first problem: noise.</S>
			<S sid ="110" ssid = "37">With opinion words, part-whole and “no” patterns, we have three feature indicators at hands, but all of them are ambiguous, which means that they are not hard rules.</S>
			<S sid ="111" ssid = "38">We will inevitably extract wrong features (also called noises) byusing them.</S>
			<S sid ="112" ssid = "39">Pruning noises from feature candi dates is a hard task.</S>
			<S sid ="113" ssid = "40">Instead, we propose a new angle for solving this problem: feature ranking.</S>
			<S sid ="114" ssid = "41">The basic idea is that we rank the extracted feature candidates by feature importance.</S>
			<S sid ="115" ssid = "42">If a feature candidate is correct and important, it should be ranked high.</S>
			<S sid ="116" ssid = "43">For unimportant feature or noise, it should be ranked low in the final result.</S>
			<S sid ="117" ssid = "44">Ranking is also very useful in practice.</S>
			<S sid ="118" ssid = "45">In a large corpus, we may extract hundreds of fine- grained features.</S>
			<S sid ="119" ssid = "46">But the user often only cares about those important ones, which should be ranked high.</S>
			<S sid ="120" ssid = "47">We identified two major factors affecting the feature importance: one is feature relevance and the other is feature frequency.</S>
			<S sid ="121" ssid = "48">Feature relevance: it describes how possible a feature candidate is a correct feature.</S>
			<S sid ="122" ssid = "49">We find that there are three strong clues to indicate feature relevance in a corpus.</S>
			<S sid ="123" ssid = "50">The first clue is that a correct feature is often modified by multiple opinion words (adjectives or adverbs).</S>
			<S sid ="124" ssid = "51">For example, in the mattress domain, “delivery” is modified by “quick” “cumbersome” and “timely”.</S>
			<S sid ="125" ssid = "52">It shows that reviewers put emphasis on the word “delivery”.</S>
			<S sid ="126" ssid = "53">Thus we can infer that “delivery” is a possible feature.</S>
			<S sid ="127" ssid = "54">The second clue is that a feature could be extracted by multiple part-whole patterns.</S>
			<S sid ="128" ssid = "55">For example, in the car domain, if we find following two phrases, “the engine of the car” and “the car has a big engine”, we can infer that “engine” is a feature for car, because both phrases contain part-whole relations to indicate “engine” is a part of “car”.</S>
			<S sid ="129" ssid = "56">The third clue is the combination of opinion word modification, part-whole pattern extraction and “no” pattern extraction.</S>
			<S sid ="130" ssid = "57">That is, if a feature candidate is not only modified by opinion words but also extracted by part-whole or “no” patterns, we can infer that it is a feature with high confidence.</S>
			<S sid ="131" ssid = "58">For example, for sentence “there is a bad hole in the mattress”, it strongly indicates that “hole” is a feature for a mattress because it is modified by opinion word “bad” and also in the part-whole pattern.</S>
			<S sid ="132" ssid = "59">What is more, we find that there is a mutual enforcement relation between opinion words, part- whole and “no” patterns, and features.</S>
			<S sid ="133" ssid = "60">If an adjective modifies many correct features, it is highly possible to be a good opinion word.</S>
			<S sid ="134" ssid = "61">Similarly, if a feature candidate can be extracted by many opinion words, part-whole patterns, or “no” pattern, it is also highly likely to be a correct feature.</S>
			<S sid ="135" ssid = "62">This indicates that the Web page ranking algorithm HITS is applicable.</S>
			<S sid ="136" ssid = "63">Feature frequency: This is another important factor affecting feature ranking.</S>
			<S sid ="137" ssid = "64">Feature frequency has been considered in (Hu and Liu, 2004; BlairGoldensohn et al., 2008).</S>
			<S sid ="138" ssid = "65">We consider a feature f1 to be more important than fea ture f2 if f1 appears more frequently than f2 in opinion documents.</S>
			<S sid ="139" ssid = "66">In practice, it is desirable to rank those frequent features higher than infrequent features.</S>
			<S sid ="140" ssid = "67">The reason is that missing a frequently mentioned feature in opinion mining is bad, but missing a rare feature is not a big issue.</S>
			<S sid ="141" ssid = "68">Combining the above factors, we propose a new feature mining method.</S>
			<S sid ="142" ssid = "69">Experiments show good results on diverse real-life datasets.</S>
			<S sid ="143" ssid = "70">3.1 Double Propagation.</S>
			<S sid ="144" ssid = "71">As we described above, double propagation is based on the observation that there are natural relations between opinion words and features due to the fact that opinion words are often used to modify features.</S>
			<S sid ="145" ssid = "72">Furthermore, it is observed that opinion words and features themselves have relations in opinionated expressions too (Qiu et al., 2009).</S>
			<S sid ="146" ssid = "73">These relations can be identified via a dependency parser (Lin, 1998) based on the dependency grammar.</S>
			<S sid ="147" ssid = "74">The identification of the relations is the key to feature extraction.</S>
			<S sid ="148" ssid = "75">Dependency grammar: It describes the dependency relations between words in a sentence.</S>
			<S sid ="149" ssid = "76">After parsed by a dependency parser, words in a sentence are linked to each other by a certain relation.</S>
			<S sid ="150" ssid = "77">For a sentence, “The camera has a good lens”, “good” is the opinion word and “lens” is the feature of camera.</S>
			<S sid ="151" ssid = "78">After parsing, we can find that “good” depends on “lens” with relation mod.</S>
			<S sid ="152" ssid = "79">Here mod means that “good” is the adjunct modifier for “lens”.</S>
			<S sid ="153" ssid = "80">In some cases, an opinion word and a feature are not directly dependent, but they directly depend on a same word.</S>
			<S sid ="154" ssid = "81">For example, from the sentence “The lens is nice”, we can find that both feature “lens” and opinion word “nice” depend on the verb “is” with the relation s and pred respectively.</S>
			<S sid ="155" ssid = "82">Here s means that “lens” is the surface subject of “is” while pred means that “nice” is the predicate of the “is” clause.</S>
			<S sid ="156" ssid = "83">In (Qiu et al., 2009), it defines two categories of dependency relations to summarize all types of dependency relations between two words, which are illustrated in Figure 1.</S>
			<S sid ="157" ssid = "84">Arrows are used to represent dependencies.</S>
			<S sid ="158" ssid = "85">Direct relations: It represents that one word depends on the other word directly or they both depend on a third word directly, shown in (a) and (b) of Figure 1.</S>
			<S sid ="159" ssid = "86">In (a), B depends on A directly, and in (b) they both directly depend on D. Indirect relation: It represents that one word depends on the other word through other words or they both depend on a third word indirectly.</S>
			<S sid ="160" ssid = "87">For example, in (c) of Figure 1, B depends on A through D; in (d) of Figure 1, A depends on D through I1 while B depends on D through I2.</S>
			<S sid ="161" ssid = "88">For some complicated situations, there can be more than one I1 or I2.</S>
			<S sid ="162" ssid = "89">A D B A B (a) (b) A D D I1 I2 B A B (c) (d) Fig.1 Different relations between A and B Parsing indirect relations is error-prone for Web corpora.</S>
			<S sid ="163" ssid = "90">Thus we only use direct relation to extract opinion words and feature candidates in our application.</S>
			<S sid ="164" ssid = "91">For detailed extraction rules, please refer to the paper (Qiu et al., 2009).</S>
			<S sid ="165" ssid = "92">3.2 Part-whole relation.</S>
			<S sid ="166" ssid = "93">As we discussed above, a part-whole relation is a good indicator for features if the class concept word (the “whole” part) is known.</S>
			<S sid ="167" ssid = "94">For example, the compound nominal “car hood” contains the part-whole relation.</S>
			<S sid ="168" ssid = "95">If we know “car” is the class concept word, then we can infer that “hood” is a feature for car.</S>
			<S sid ="169" ssid = "96">Part-whole patterns occur frequently in text and are expressed by a variety of lexico-syntactic structures (Girju et al, 2006; Popescu and Etzioni, 2005).</S>
			<S sid ="170" ssid = "97">There are two types of lexico-syntactic structures conveying part-whole relations: unambiguous structure and ambiguous structure.</S>
			<S sid ="171" ssid = "98">The unambiguous structure clearly indicates a part-whole relation.</S>
			<S sid ="172" ssid = "99">For example, for sentences “the camera consists of lens, body and power cord.” and “the bed was made of wood”.</S>
			<S sid ="173" ssid = "100">In these cases, the detection of the patterns leads to the discovery of real part-whole relations.</S>
			<S sid ="174" ssid = "101">We can easily find features of the camera and the bed.</S>
			<S sid ="175" ssid = "102">Unfortunately, this kind of patterns is not very frequent in a corpus.</S>
			<S sid ="176" ssid = "103">However, there are many ambiguous expressions that are explicit but convey part-whole relations only in some contexts.</S>
			<S sid ="177" ssid = "104">For example, for two phrases “valley on the mattress” and “toy on the mattress”, “valley” is a part of “mattress” whereas “toy” is not a part of “mattress”.</S>
			<S sid ="178" ssid = "105">Our idea is to use both the unambiguous and ambiguous patterns.</S>
			<S sid ="179" ssid = "106">Although ambiguous patterns may bring some noise, we can rank them low in the ranking procedure.</S>
			<S sid ="180" ssid = "107">The following two kinds of patterns are what we have utilized for feature extraction.</S>
			<S sid ="181" ssid = "108">3.2.1 Phrase pattern In this case, the part-whole relation exists in a phrase.</S>
			<S sid ="182" ssid = "109">NP + Prep + CP: noun/noun phrase (NP) contains the part word and the class concept phrase (CP) contains the whole word.</S>
			<S sid ="183" ssid = "110">They are connected by the preposition word (Prep).</S>
			<S sid ="184" ssid = "111">For example, “battery of the camera” is an instance of this pattern where NP (battery) is the part noun and CP (camera) is the whole noun.</S>
			<S sid ="185" ssid = "112">For our application, we only use three specific prepositions: “of”, “in” and “on”.</S>
			<S sid ="186" ssid = "113">CP + with + NP: likewise, CP is the class concept phrase, and NP is the noun/noun phrase.</S>
			<S sid ="187" ssid = "114">They are connected by the word “with”.</S>
			<S sid ="188" ssid = "115">Here NP is likely to be a feature.</S>
			<S sid ="189" ssid = "116">For example, in a phrase, “mattress with a cover”, “cover” is a feature for mattress.</S>
			<S sid ="190" ssid = "117">NP CP or CP NP: noun/noun phase (NP) and class concept phrase (CP) forms a compound word.</S>
			<S sid ="191" ssid = "118">For example, “mattress pad”.</S>
			<S sid ="192" ssid = "119">Here “pad” is a feature of “mattress”.</S>
			<S sid ="193" ssid = "120">3.2.2 Sentence pattern In these patterns, the part-whole relation is indicated in a sentence.</S>
			<S sid ="194" ssid = "121">The patterns contain specific verbs.</S>
			<S sid ="195" ssid = "122">The part word and the whole word can be found inside noun phrases or prepositional phrases which contain specific prepositions.</S>
			<S sid ="196" ssid = "123">We utilize the following patterns in our application.</S>
			<S sid ="197" ssid = "124">“CP Verb NP”: CP is the class concept phrase that contains the whole word, NP is the noun phrase that contains the part word and the verb is restricted and specific.</S>
			<S sid ="198" ssid = "125">For example, in a sentence, “the phone has a big screen”, we can infer that “screen” is a feature for “phone”, which is a class concept.</S>
			<S sid ="199" ssid = "126">In sentence patterns, verbs play an important role.</S>
			<S sid ="200" ssid = "127">We use indicative verbs to find part-whole relations in a sentence, i.e., “has”, “have” “include” “contain” “consist”, “comprise” and so on (Girju et al, 2006).</S>
			<S sid ="201" ssid = "128">It is worth mentioning that in order to use part-whole relations, the class concept word for is the set of pages (or nodes) and E is the set of directed edges (or links).</S>
			<S sid ="202" ssid = "129">We use L to denote the adjacency matrix of the graph.</S>
			<S sid ="203" ssid = "130">a corpus is needed, which is fairly easy to find because the noun with the most frequent occur ܮ௜௝ ൌ ቄͳ ݂݅ ሺ݅ǡ ݆ሻ א ܧ Ͳ ݋ݐ݄݁ݎݓ݅ݏ݁ (1) rences in a corpus is always the class concept word based on our experiments.</S>
			<S sid ="204" ssid = "131">3.3 “no” Pattern Let the authority score of the page i be A(i), and the hub score of page i be H(i).</S>
			<S sid ="205" ssid = "132">The mutual reinforcing relationship of the two scores is represented as follows: Besides opinion word and part-whole relation, “no” pattern is also an important pattern indicating features in a corpus.</S>
			<S sid ="206" ssid = "133">Here “no” represents ܣሺ݅ሻ ൌ σሺ௝ǡ௜ሻאா ܪሺ݆ሻ ܪሺ݅ሻ ൌ σሺ௜ǡ௝ሻאா ܣሺ݆ሻ (2) (3) word no.</S>
			<S sid ="207" ssid = "134">The basic form of the pattern is “no” word followed by noun/noun phrase.</S>
			<S sid ="208" ssid = "135">This simple pattern actually is very useful to feature extraction.</S>
			<S sid ="209" ssid = "136">It is a specific pattern for product reviews and forum posts.</S>
			<S sid ="210" ssid = "137">People often express their comments or opinions on features by this short pattern.</S>
			<S sid ="211" ssid = "138">For example, in a mattress domain, people always say that “no noise” and “no indentation”.</S>
			<S sid ="212" ssid = "139">Here “noise” and “indentation” are all features for the mattress.</S>
			<S sid ="213" ssid = "140">We discover that this pattern is frequently used in corpora and a very good indicator for features with a fairly high precision.</S>
			<S sid ="214" ssid = "141">But we have to take care of the some fixed “no” expression, like “no problem” “no offense”.</S>
			<S sid ="215" ssid = "142">In these cases, “problem” and “offense” should not be regarded as features.</S>
			<S sid ="216" ssid = "143">We have a list of such words, which are manually compiled.</S>
			<S sid ="217" ssid = "144">3.4 Bipartite Graph and HITS Algorithm.</S>
			<S sid ="218" ssid = "145">Hyperlink-induced topic search (HITS) is a link analysis algorithm that rates Web pages.</S>
			<S sid ="219" ssid = "146">As discussed in the introduction section, we can apply the HITS algorithm to compute feature relevance for ranking.</S>
			<S sid ="220" ssid = "147">Before illustrating how HITS can be applied to our scenario, let us first give a brief introduction to HITS.</S>
			<S sid ="221" ssid = "148">Given a broad search query q, HITS sends the query to a search engine system, and then collects k (k = 200 in the original paper) highest ranked pages, which are assumed to be highly relevant to the search query.</S>
			<S sid ="222" ssid = "149">This set is called the root set R; then it grows R by including any page pointed to a page in R, then forms a base set S. HITS then works on the pages in S. It assigns every page in S an authority score and a hub score.</S>
			<S sid ="223" ssid = "150">Let the number of pages to be studied be n. We use G = (V, E) to denote the (directed) link graph of S. V We can write them in a matrix form.</S>
			<S sid ="224" ssid = "151">We use A to denote the column vector with all the authority scores, A = (A(1), A(2), …, A(n))T, and use H to denote the column vector with all the hub scores, H = (H(1), H(2), …, H(n))T, ۯ ൌ ܮ் ۶ (4) ۶ ൌ ܮۯ (5) To solve the problem, the widely used method is power iteration, which starts with some random values for the vectors, e.g., A0 = H0 = (1, 1, 1, …1,).</S>
			<S sid ="225" ssid = "152">It then continues to compute iteratively until the algorithm converges.</S>
			<S sid ="226" ssid = "153">From the formulas, we can see that the authority score estimates the importance of the content of the page, and the hub score estimates the values of its links to other pages.</S>
			<S sid ="227" ssid = "154">An authority score is computed as the sum of the scaled hub scores that point to that page.</S>
			<S sid ="228" ssid = "155">A hub score is the sum of the scaled authority scores of the pages it points to.</S>
			<S sid ="229" ssid = "156">The key idea of HITS is that a good hub points to many good authorities and a good authority is pointed by many good hubs.</S>
			<S sid ="230" ssid = "157">Thus, authorities and hubs have a mutual reinforcement relationship.</S>
			<S sid ="231" ssid = "158">For our scenario, we have three strong clues for features in a corpus: opinion words, part- whole patterns, and the “no” pattern.</S>
			<S sid ="232" ssid = "159">Although all these three clues are not hard rules, there exist mutual enforcement relations between them.</S>
			<S sid ="233" ssid = "160">If an adjective modify many features, it is highly likely to be a good opinion word.</S>
			<S sid ="234" ssid = "161">If a feature candidate is modified by many opinion words, it is likely to be a genuine feature.</S>
			<S sid ="235" ssid = "162">The same goes with part-whole patterns, the “no” pattern, or the combination for these three clues.</S>
			<S sid ="236" ssid = "163">This kind of mutual enforcement relation can be naturally modeled in the HITS framework.</S>
			<S sid ="237" ssid = "164">Applying the HITS algorithm: Based on the key idea of HITS algorithm and feature indicators, we can apply the HITS algorithm to obtain the feature relevance ranking.</S>
			<S sid ="238" ssid = "165">Features act as authorities and feature indicators act as hubs.</S>
			<S sid ="239" ssid = "166">Different from the general HITS algorithm, features only have authority scores and feature indicators only have hub scores in our case.</S>
			<S sid ="240" ssid = "167">They form a directed bipartite graph, which is illustrated in Figure 2.</S>
			<S sid ="241" ssid = "168">We can run the HITS algorithm on this bipartite graph.</S>
			<S sid ="242" ssid = "169">The basic idea is that if a feature candidate has a high authority score, it must be a highly-relevant feature.</S>
			<S sid ="243" ssid = "170">If a feature indicator has a high hub score, it must be a good feature indicator.</S>
			<S sid ="244" ssid = "171">Feature Indicators Features Fig.</S>
			<S sid ="245" ssid = "172">2 Relations between feature indicators and features 3.5 Feature Ranking.</S>
			<S sid ="246" ssid = "173">Although the HITS algorithm can rank features by feature relevance, the final ranking is not only determined by relevance.</S>
			<S sid ="247" ssid = "174">As we discussed before, feature frequency is another important factor affecting the final ranking.</S>
			<S sid ="248" ssid = "175">It is highly desirable to rank those correct and frequent features at top because they are more important than the infrequent ones in opinion mining (or even other applications).</S>
			<S sid ="249" ssid = "176">With this in mind, we put everything together to present the final algorithm that we use.</S>
			<S sid ="250" ssid = "177">We use two steps: Step 1: Compute feature score using HITS without considering frequency.</S>
			<S sid ="251" ssid = "178">Initially, we use three feature indicators to populate feature candidates, which form a directed bipartite graph.</S>
			<S sid ="252" ssid = "179">Each feature candidate acts as an authority node in the graph; each feature indicator acts as a hub node.</S>
			<S sid ="253" ssid = "180">For node s in the graph, we let ܪ௦ be the hub score and ܣ௦ be the authority score.</S>
			<S sid ="254" ssid = "181">Then, we initialize ܪ௦ and ܣ௦ to 1 for all nodes in the graph.</S>
			<S sid ="255" ssid = "182">We update the scores of ܪ௦ and ܣ௦ until they converge using power iteration.</S>
			<S sid ="256" ssid = "183">Finally, we normalize ܣ௦ and compute the score S for a feature.</S>
			<S sid ="257" ssid = "184">Step 2: The final score function considering the feature frequency is given in Equation (6).</S>
			<S sid ="258" ssid = "185">ܵ ൌ ܵሺ݂ሻ ሺ ݂ݎ݁ݍሺ݂ሻሻ (6) where ݂ݎ݁ݍሺ݂ሻ is the frequency count of ture ݂, and S(f) is the authority score of the candidate feature f. The idea is to push the frequent candidate features up by multiplying the log of frequency.</S>
			<S sid ="259" ssid = "186">Log is taken in order to reduce the effect of big frequency count numbers.</S>
			<S sid ="260" ssid = "187">4 Experiments This section evaluates the proposed method.</S>
			<S sid ="261" ssid = "188">We first describe the data sets, evaluation metrics and then the experimental results.</S>
			<S sid ="262" ssid = "189">We also compare our method with the double propagation method given in (Qiu et al., 2009).</S>
			<SUBSECTION>4.1 Data.</SUBSECTION>
			<S sid ="263" ssid = "190">Sets We used four diverse data sets to evaluate our techniques.</S>
			<S sid ="264" ssid = "191">They were obtained from a commercial company that provides opinion mining services.</S>
			<S sid ="265" ssid = "192">Table 1 shows the domains (based on their names) and the number of sentences in each data set (“Sent.” means the sentence).</S>
			<S sid ="266" ssid = "193">The data in “Cars” and “Mattress” are product reviews extracted from some online review sites.</S>
			<S sid ="267" ssid = "194">“Phone” and “LCD” are forum discussion posts extracted from some online forum sites.</S>
			<S sid ="268" ssid = "195">We split each review/post into sentences and the sentences are POS-tagged using the Brill’s tag- ger (Brill, 1995).</S>
			<S sid ="269" ssid = "196">The tagged sentences are the input to our system.</S>
			<S sid ="270" ssid = "197">Data Sets Cars Mattress Phone LCD # of Sent.</S>
			<S sid ="271" ssid = "198">2223 13233 15168 1783 Table 1.</S>
			<S sid ="272" ssid = "199">Experimental data sets 4.2 Evaluation.</S>
			<S sid ="273" ssid = "200">Metrics Besides precision and recall, we adopt the precision@N metric for experimental evaluation (Liu, 2006).</S>
			<S sid ="274" ssid = "201">It gives the percentage of correct features that are among the top N feature candidates in a ranked list.</S>
			<S sid ="275" ssid = "202">We compare our method’s results with those of double propagation which ranks extracted candidates only by occurrence frequency.</S>
			<SUBSECTION>4.3 Experimental.</SUBSECTION>
			<S sid ="276" ssid = "203">ResultsWe first compare our results with double propa gation on recall and precision for different corpus sizes.</S>
			<S sid ="277" ssid = "204">The results are presented in Tables 2, 3, and 4 for the four data sets.</S>
			<S sid ="278" ssid = "205">They show the precision and recall of 1000, 2000, and 3000 sentences from these data sets.</S>
			<S sid ="279" ssid = "206">We did not try more sentences because manually checking the recall and precision becomes prohibitive.</S>
			<S sid ="280" ssid = "207">Note that there are less than 3000 sentences for “Cars” and “LCD” data sets.</S>
			<S sid ="281" ssid = "208">Thus, the columns for “Cars” and “LCD” are empty in Table 4.</S>
			<S sid ="282" ssid = "209">In the Tables, “DP” represents the double propagation method; “Ours” represents our proposed method; “Pr” represents precision, and “Re” represents recall.</S>
			<S sid ="283" ssid = "210">the extracted feature candidates based on frequency for the double propagation method (DP).</S>
			<S sid ="284" ssid = "211">Using occurrence frequency is the natural way to rank features.</S>
			<S sid ="285" ssid = "212">The more frequent a feature occurs in a corpus, the more important it is. However, frequency-based ranking assumes the extracted candidates are correct features.</S>
			<S sid ="286" ssid = "213">The tables show that our proposed method (Ours) outperforms double propagation considerably.</S>
			<S sid ="287" ssid = "214">The reason is that some highly-frequent feature candidates extracted by double propagation are not correct features.</S>
			<S sid ="288" ssid = "215">Our method considers the feature relevance as an important factor.</S>
			<S sid ="289" ssid = "216">So it produces much better rankings.</S>
			<S sid ="290" ssid = "217">Cars Mattress Phone LCD DP 0.84 0.81 0.64 0.68 Ours 0.94 0.90 0.76 0.76 Table 2.</S>
			<S sid ="291" ssid = "218">Results of 1000 sentences Table 5.</S>
			<S sid ="292" ssid = "219">Precision at top 50 Table 3.</S>
			<S sid ="293" ssid = "220">Results of 2000 sentences Table 6.</S>
			<S sid ="294" ssid = "221">Precision at top 100 Table 4.</S>
			<S sid ="295" ssid = "222">Results of 3000 sentences From the tables, we can see that for corpora in all domains, our method outperforms double propagation on recall with only a small loss in precision.</S>
			<S sid ="296" ssid = "223">In data sets for “Phone” and “Mattress”, the precisions are even better.</S>
			<S sid ="297" ssid = "224">We also find that with the increase of the data size, the recall gap between the two methods becomes smaller gradually and the precisions of both methods also drop.</S>
			<S sid ="298" ssid = "225">However, in this case, feature ranking plays an important role in discovering important features.</S>
			<S sid ="299" ssid = "226">Ranking comparison between the two methods is shown in Tables 5, 6, and 7, which give the precisions of top 50, 100 and 200 results respectively.</S>
			<S sid ="300" ssid = "227">Note that the experiments reported in these tables were run on the whole data sets.</S>
			<S sid ="301" ssid = "228">There were no more results for the “LCD” data beyond top 200 as there were only a limited number of features discussed in the data.</S>
			<S sid ="302" ssid = "229">So the column for “LCD” in Table 7 is empty.</S>
			<S sid ="303" ssid = "230">We rank Table 7.</S>
			<S sid ="304" ssid = "231">Precision at top 200 5 Conclusion.</S>
			<S sid ="305" ssid = "232">Feature extraction for entities is an important task for opinion mining.</S>
			<S sid ="306" ssid = "233">The paper proposed a new method to deal with the problems of the state-of-the-art double propagation method for feature extraction.</S>
			<S sid ="307" ssid = "234">It first uses part-whole and “no” patterns to increase recall.</S>
			<S sid ="308" ssid = "235">It then ranks the extracted feature candidates by feature importance, which is determined by two factors: feature relevance and feature frequency.</S>
			<S sid ="309" ssid = "236">The Web page ranking algorithm HITS was applying to compute feature relevance.</S>
			<S sid ="310" ssid = "237">Experimental results using diverse real-life datasets show promising results.</S>
			<S sid ="311" ssid = "238">In our future work, apart from improving the current methods, we also plan to study the problem of extracting features that are verbs or verb phrases.</S>
	</SECTION>
	<SECTION title="Acknowledgement">
			<S sid ="312" ssid = "239">This work was funded by a HP Labs Innovation Research Program Award (CW165044).</S>
	</SECTION>
</PAPER>
