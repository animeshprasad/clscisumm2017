<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">This paper compares a deep and a shallow processing approach to the problem of classifying a sentence as grammatically well- formed or ill-formed.</S>
		<S sid ="2" ssid = "2">The deep processing approach uses the XLE LFG parser and English grammar: two versions are presented, one which uses the XLE directly to perform the classification, and another one which uses a decision tree trained on features consisting of the XLE’s output statistics.</S>
		<S sid ="3" ssid = "3">The shallow processing approach predicts gram- maticality based on n-gram frequency statistics: we present two versions, one which uses frequency thresholds and one which uses a decision tree trained on the frequencies of the rarest n-grams in the input sentence.</S>
		<S sid ="4" ssid = "4">We find that the use of a decision tree improves on the basic approach only for the deep parser-based approach.</S>
		<S sid ="5" ssid = "5">We also show that combining both the shallow and deep decision tree features is effective.</S>
		<S sid ="6" ssid = "6">Our evaluation is carried out using a large test set of grammatical and ungrammatical sentences.</S>
		<S sid ="7" ssid = "7">The ungrammatical test set is generated automatically by inserting grammatical errors into well-formed BNC sentences.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="8" ssid = "8">This paper is concerned with the task of predicting whether a sentence contains a grammatical error.</S>
			<S sid ="9" ssid = "9">An accurate method for carrying out automatic ∗Also affiliated to IBM CAS, Dublin.</S>
			<S sid ="10" ssid = "10">grammaticality judgements has uses in the areas of computer-assisted language learning and grammar checking.</S>
			<S sid ="11" ssid = "11">Comparative evaluation of existing error detection approaches has been hampered by a lack of large and commonly used evaluation error corpora.</S>
			<S sid ="12" ssid = "12">We attempt to overcome this by automatically creating a large error corpus, containing four different types of frequently occurring grammatical errors.</S>
			<S sid ="13" ssid = "13">We use this corpus to evaluate the performance of two approaches to the task of automatic error detection.</S>
			<S sid ="14" ssid = "14">One approach uses low-level detection techniques based on POS n-grams.</S>
			<S sid ="15" ssid = "15">The other approach is a novel parser-based method which employs deep linguistic processing to discriminate grammatical input from ungrammatical.</S>
			<S sid ="16" ssid = "16">For both approaches, we implement a basic solution, and then attempt to improve upon this solution using a decision tree classifier.</S>
			<S sid ="17" ssid = "17">We show that combining both methods improves upon the individual methods.</S>
			<S sid ="18" ssid = "18">N-gram-based approaches to the problem of error detection have been proposed and implemented in various forms by Atwell(1987), Bigert and Knutsson (2002), and Chodorow and Leacock (2000) amongst others.</S>
			<S sid ="19" ssid = "19">Existing approaches are hard to compare since they are evaluated on different test sets which vary in size and error density.</S>
			<S sid ="20" ssid = "20">Furthermore, most of these approaches concentrate on one type of grammatical error only, namely, context-sensitive or real- word spelling errors.</S>
			<S sid ="21" ssid = "21">We implement a vanilla n- gram-based approach which is tested on a very large test set containing four different types of error.</S>
			<S sid ="22" ssid = "22">The idea behind the parser-based approach to error detection is to use a broad-coverage handcrafted precision grammar to detect ungrammatical sen 112 Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pp.</S>
			<S sid ="23" ssid = "23">112–121, Prague, June 2007.</S>
			<S sid ="24" ssid = "24">Qc 2007 Association for Computational Linguistics tences.</S>
			<S sid ="25" ssid = "25">This approach exploits the fact that a precision grammar is designed, in the traditional generative grammar sense (Chomsky, 1957), to distinguish grammatical sentences from ungrammatical sentences.</S>
			<S sid ="26" ssid = "26">This is in contrast to treebank-based grammars which tend to massively overgenerate and do not generally aim to discriminate between the two.</S>
			<S sid ="27" ssid = "27">In order for our approach to work, the coverage of the precision grammars must be broad enough to parse a large corpus of grammatical sentences, and for this reason, we choose the XLE (Maxwell and Kaplan, 1996), an efficient and robust parsing system for Lexical Functional Grammar (LFG) (Kaplan and Bresnan, 1982) and the ParGram English grammar (Butt et al., 2002) for our experiments.</S>
			<S sid ="28" ssid = "28">This system employs robustness techniques, some borrowed from Optimality Theory (OT) (Prince and Smolen- sky, 1993), to parse extra-grammatical input (Frank et al., 1998), but crucially still distinguishes between optimal and suboptimal solutions.</S>
			<S sid ="29" ssid = "29">The evaluation corpus is a subset of an ungrammatical version of the British National Corpus (BNC), a 100 million word balanced corpus of British English (Burnard, 2000).</S>
			<S sid ="30" ssid = "30">This corpus is obtained by automatically inserting grammatical errors into the original BNC sentences based on an analysis of a manually compiled “real” error corpus.</S>
			<S sid ="31" ssid = "31">This paper makes the following contributions to the task of automatic error detection: 1.</S>
			<S sid ="32" ssid = "32">A novel deep processing XLE-based approach</S>
	</SECTION>
	<SECTION title="An effective and novel application of decision. " number = "2">
			<S sid ="33" ssid = "1">tree machine learning to both shallow and deep approaches</S>
	</SECTION>
	<SECTION title="A novel combination of deep and shallow pro- " number = "3">
			<S sid ="34" ssid = "1">cessing</S>
	</SECTION>
	<SECTION title="An evaluation of an n-gram-based approach on. " number = "4">
			<S sid ="35" ssid = "1">a wider variety of errors than has previously been carried out</S>
	</SECTION>
	<SECTION title="A large evaluation error corpus" number = "5">
			<S sid ="36" ssid = "1">The paper is organised as follows: in Section 2, we describe previous approaches to the problem of error detection; in Section 3, a description of the error corpus used in our evaluation experiments is presented, and in Section 4, the two approaches to error detection are presented, evaluated, combined and compared.</S>
			<S sid ="37" ssid = "2">Section 5 provides a summary and suggestions for future work.</S>
			<S sid ="38" ssid = "3">2 Background.</S>
			<S sid ="39" ssid = "4">2.1 Precision Grammars.</S>
			<S sid ="40" ssid = "5">A precision grammar is a formal grammar designed to distinguish ungrammatical from grammatical sentences.</S>
			<S sid ="41" ssid = "6">This is in contrast to large treebank-induced grammars which often accept ungrammatical input (Charniak, 1996).</S>
			<S sid ="42" ssid = "7">While high coverage is required, it is difficult to increase coverage without also increasing the amount of ungrammatical sentences that are accepted as grammatical by the grammar.</S>
			<S sid ="43" ssid = "8">Most publications in grammar-based automatic error detection focus on locating and categorising errors and giving feedback.</S>
			<S sid ="44" ssid = "9">Existing grammars are reused (Vandeventer Faltin, 2003), or grammars of limited size are developed from scratch (Reuer, 2003).</S>
			<S sid ="45" ssid = "10">The ParGram English LFG is a handcrafted broad-coverage grammar developed over several years with the XLE platform (Butt et al., 2002).</S>
			<S sid ="46" ssid = "11">The XLE parser uses OT to resolve ambiguities (Prince and Smolensky, 1993).</S>
			<S sid ="47" ssid = "12">Grammar constraints resulting in rare constructions can be marked as “dis- preferred” and constraints resulting in common ungrammatical constructions can be marked as “ungrammatical”.</S>
			<S sid ="48" ssid = "13">The use of constraint ordering and marking increases the robustness of the grammar, while maintaining the grammatical / ungrammatical distinction (Frank et al., 1998).</S>
			<S sid ="49" ssid = "14">The English Resource Grammar (ERG) is a precision Head- Driven Phrase Structure Grammar (HPSG) of English (Copestake and Flickinger, 2000; Pollard and Sag, 1994).</S>
			<S sid ="50" ssid = "15">Its coverage is not as broad as the XLE English grammar.</S>
			<S sid ="51" ssid = "16">Baldwin et al.</S>
			<S sid ="52" ssid = "17">(2004) propose a method to identify gaps in the grammar.</S>
			<S sid ="53" ssid = "18">Blunsom and Baldwin (2006) report ongoing development.</S>
			<S sid ="54" ssid = "19">There has been previous work using the ERG and the XLE grammars in the area of computer-assisted language learning.</S>
			<S sid ="55" ssid = "20">Bender et al.</S>
			<S sid ="56" ssid = "21">(2004) use a version of the ERG containing mal-rules to parse ill- formed sentences from the SST corpus of Japanese learner English (Emi et al., 2004).</S>
			<S sid ="57" ssid = "22">They then use the semantic representations of the ill-formed input to generate well-formed corrections.</S>
			<S sid ="58" ssid = "23">Khader et al.</S>
			<S sid ="59" ssid = "24">(2004) study whether the ParGram English LFG can be used for computer-assisted language learning by adding additional OT marks for ungrammatical constructions observed in a learner corpus.</S>
			<S sid ="60" ssid = "25">However, the evaluation is preliminary, on only 50 test items.</S>
			<S sid ="61" ssid = "26">2.2 N-gram Methods Most shallow approaches to grammar error detection originate from the area of real-word spelling error correction.</S>
			<S sid ="62" ssid = "27">A real-word spelling error is a spelling or typing error which results in a token which is another valid word of the language in question.</S>
			<S sid ="63" ssid = "28">The (to our knowledge) oldest work in this area is that of Atwell (1987) who uses a POS tagger to flag POS bigrams that are unlikely according to a reference corpus.</S>
			<S sid ="64" ssid = "29">While he speculates that the bi- gram frequency should be compared to how often the same POS bigram is involved in errors in an error corpus, the proposed system uses the raw frequency with an empirically established threshold to decide whether a bigram indicates an error.</S>
			<S sid ="65" ssid = "30">In the same paper, a completely different approach is presented that uses the same POS tagger to consider spelling variants that have a different POS.</S>
			<S sid ="66" ssid = "31">In the example sentence I am very hit the POS of the spelling variant hot/JJ is added to the list NNVB-VBDVBN of possible POS tags of hit.</S>
			<S sid ="67" ssid = "32">If the POS tagger chooses hit/JJ, the word is flagged and the correction hot is proposed to the user.</S>
			<S sid ="68" ssid = "33">Unlike most n-gram-based approaches, Atwell’s work aims to detect grammar errors in general and not just real-word spelling errors.</S>
			<S sid ="69" ssid = "34">However, a complete evaluation is missing.</S>
			<S sid ="70" ssid = "35">The idea of disambiguating between the elements of confusion sets is related to word sense disambiguation.</S>
			<S sid ="71" ssid = "36">Golding (1995) builds a classifier based on a rich set of context features.</S>
			<S sid ="72" ssid = "37">Mays et al.</S>
			<S sid ="73" ssid = "38">(1991) apply the noisy channel model to the disambiguation problem.</S>
			<S sid ="74" ssid = "39">For each candidate correction S′ of the input S the probability P (S′)P (S|S′) is calculated and the most likely correction selected.</S>
			<S sid ="75" ssid = "40">This method is reevaluated by Wilcox-O’Hearn et al.</S>
			<S sid ="76" ssid = "41">(2006) on WSJ data with artificial real-word spelling errors.</S>
			<S sid ="77" ssid = "42">Bigert and Knutsson (2002) extend upon a basic n-gram approach by attempting to match n-grams of low frequency with similar n-grams in order to reduce overflagging.</S>
			<S sid ="78" ssid = "43">Furthermore, n-grams crossing clause boundaries are not flagged and the similarity measure is adapted in the case of phrase boundaries that usually result in low frequency n-grams.Chodorow and Leacock (2000) use a mutual in formation measure in addition to raw frequency of n- grams.</S>
			<S sid ="79" ssid = "44">Apart from this, their ALEK system employs other extensions to the basic approach, for example frequency counts from both generic and word- specific corpora are used in the measures.</S>
			<S sid ="80" ssid = "45">It is not reported how much each of these contribute to the overall performance.</S>
			<S sid ="81" ssid = "46">Rather than trying to implement all of the previous n-gram approaches, we implement the basic approach which uses rare n-grams to predict grammaticality.</S>
			<S sid ="82" ssid = "47">This property is shared by all previous shallow approaches.</S>
			<S sid ="83" ssid = "48">We also test our approach on a wider class of grammatical errors.</S>
			<S sid ="84" ssid = "49">3 Ungrammatical Data.</S>
			<S sid ="85" ssid = "50">In this section, we discuss the notion of an artificial error corpus (Section 3.1), define the type of ungrammatical language we are dealing with (Section 3.2), and describe our procedure for creating a large artificial error corpus derived from the BNC (Section 3.3).</S>
			<S sid ="86" ssid = "51">3.1 An Artificial Error Corpus.</S>
			<S sid ="87" ssid = "52">In order to meaningfully evaluate a shallow versus deep approach to automatic error detection, a large test set of ungrammatical sentences is needed.</S>
			<S sid ="88" ssid = "53">A corpus of ungrammatical sentences can take the form of a learner corpus (Granger, 1993; Emi et al., 2004), i. e. a corpus of sentences produced by language learners, or it can take the form of a more general error corpus comprising sentences which are not necessarily produced in a language-learning context and which contain competence and performance errors produced by native and non-native speakers of the language (Becker et al., 1999; Foster and Vogel, 2004; Foster, 2005).</S>
			<S sid ="89" ssid = "54">For both types of error corpus, it is not enough to collect a large set of sentences which are likely to contain an error - it is also necessary to examine each sentence in order to determine whether an error has actually occurred, and, if it has, to note the nature of the error.</S>
			<S sid ="90" ssid = "55">Thus, like the creation of a treebank, the creation of a corpus of ungrammatical sentences requires time and linguistic knowledge, and is by no means a trivial task.</S>
			<S sid ="91" ssid = "56">A corpus of ungrammatical sentences which is large enough to be useful can be created automatically by inserting, deleting or replacing words in grammatical sentences.</S>
			<S sid ="92" ssid = "57">These transformations should be linguistically realistic and should, therefore, be based on an analysis of naturally produced grammatical errors.</S>
			<S sid ="93" ssid = "58">Automatically generated error corpora have been used before in natural language processing.</S>
			<S sid ="94" ssid = "59">Bigert (2004) and Wilcox-O’Hearn et al.</S>
			<S sid ="95" ssid = "60">(2006), for example, automatically introduce spelling errors into texts.</S>
			<S sid ="96" ssid = "61">Here, we generate a large error corpus by automatically inserting four different kinds of grammatical errors into BNC sentences.</S>
			<S sid ="97" ssid = "62">3.2 Commonly Produced Grammatical Errors.</S>
			<S sid ="98" ssid = "63">Following Foster (2005), we define a sentence to be ungrammatical if all the words in the sentence are well-formed words of the language in question, but the sentence contains one or more error.</S>
			<S sid ="99" ssid = "64">This error can take the form of a performance slip which can occur due to carelessness or tiredness, or a competence error which occurs due to a lack of knowledge of a particular construction.</S>
			<S sid ="100" ssid = "65">This definition includes real-word spelling errors and excludes non- word spelling errors.</S>
			<S sid ="101" ssid = "66">It also excludes the abbreviated informal language used in electronic communication.</S>
			<S sid ="102" ssid = "67">Using the above definition as a guideline, a 20,000 word corpus of ungrammatical English sentences was collected from a variety of written texts including newspapers, academic papers, emails and website forums (Foster and Vogel, 2004; Foster, 2005).</S>
			<S sid ="103" ssid = "68">The errors in the corpus were carefully anal- ysed and classified in terms of how they might be corrected using the three word-level correction operators: insert, delete and substitute.</S>
			<S sid ="104" ssid = "69">The following frequency ordering of the three word-level correction operators was found: substitute (48%) &gt; insert (24%) &gt; delete (17%) &gt; combination (11%) Stemberger (1982) reports the same ordering of the substitution, deletion and insertion correction operators in a study of native speaker spoken language slips.</S>
			<S sid ="105" ssid = "70">Among the grammatical errors which can be corrected by substituting one word for another, the most common errors are real-word spelling errors and agreement errors.</S>
			<S sid ="106" ssid = "71">In fact, 72% of all errors fall into one of the following four classes: 1.</S>
			<S sid ="107" ssid = "72">missing word errors: What are the subjects?</S>
			<S sid ="108" ssid = "73">&gt; What the subjects?</S>
			<S sid ="109" ssid = "74">2.</S>
			<S sid ="110" ssid = "75">extra word errors: Was that in the summer?</S>
			<S sid ="111" ssid = "76">&gt; Was that in the summer in?</S>
			<S sid ="112" ssid = "77">3.</S>
			<S sid ="113" ssid = "78">real-word spelling errors: She could not comprehend.</S>
			<S sid ="114" ssid = "79">&gt; She could no comprehend.</S>
			<S sid ="115" ssid = "80">4.</S>
			<S sid ="116" ssid = "81">agreement errors: She steered Melissa round a corner.</S>
			<S sid ="117" ssid = "82">&gt; She steered Melissa round a corners.</S>
			<S sid ="118" ssid = "83">A similar classification was adopted by Nicholls (1999), having analysed the errors in a learner corpus.</S>
			<S sid ="119" ssid = "84">Our research is currently limited to the four error types given above, i. e. missing word errors, extra word errors, real-word spelling errors and agreements errors.</S>
			<S sid ="120" ssid = "85">However, it is possible for it to be extended to handle a wider class of errors.</S>
			<S sid ="121" ssid = "86">3.3 Automatic Error Creation.</S>
			<S sid ="122" ssid = "87">The error creation procedure takes as input a part- of-speech-tagged corpus of sentences which are assumed to be well-formed, and outputs a corpus of ungrammatical sentences.</S>
			<S sid ="123" ssid = "88">The automatically introduced errors take the form of the four most common error types found in the manually created corpus, i. e. missing word errors, extra word errors, real- word spelling errors and agreement errors.</S>
			<S sid ="124" ssid = "89">For each sentence in the original tagged corpus, an attempt is made to automatically produce four ungrammatical sentences, one for each of the four error types.</S>
			<S sid ="125" ssid = "90">Thus, the output of the error creation procedure is, in fact, four error corpora.</S>
			<S sid ="126" ssid = "91">3.3.1 Missing Word Errors In the manually created error corpus of Foster (2005), missing word errors are classified based on the part-of-speech (POS) of the missing word.</S>
			<S sid ="127" ssid = "92">98% of the missing parts-of-speech come from the following list (the frequency distribution in the error corpus is given in brackets): det (28%) &gt; verb (23%) &gt; prep (21%) &gt; pro (10%) &gt; noun (7%) &gt; “to” (7%) &gt; conj (2%) We use this information when introducing missing word errors into the BNC sentences.</S>
			<S sid ="128" ssid = "93">For each sentence, all words with the above POS tags are noted.</S>
			<S sid ="129" ssid = "94">One of these is selected and deleted.</S>
			<S sid ="130" ssid = "95">The above frequency ordering is respected so that, for example, missing determiner errors are produced more often than missing pronoun errors.</S>
			<S sid ="131" ssid = "96">No ungrammatical sentence is produced if the original sentence contains just one word or if the sentence contains no words with parts-of-speech in the above list.</S>
			<S sid ="132" ssid = "97">3.3.2 Extra Word Errors We introduce extra word errors in the following three ways: 1.</S>
			<S sid ="133" ssid = "98">Random duplication of any token within a sen-.</S>
			<S sid ="134" ssid = "99">tence: That’s the way we we learn here.</S>
			<S sid ="135" ssid = "100">2.</S>
			<S sid ="136" ssid = "101">Random duplication of any POS within a sen-.</S>
			<S sid ="137" ssid = "102">tence: There it he was.</S>
			<S sid ="138" ssid = "103">3.</S>
			<S sid ="139" ssid = "104">Random insertion of an arbitrary token into the.</S>
			<S sid ="140" ssid = "105">sentence: Joanna drew as a long breadth.</S>
			<S sid ="141" ssid = "106">Apart from the case of duplicate tokens, the extra words are selected from a list of tagged words compiled from a random subset of the BNC.</S>
			<S sid ="142" ssid = "107">Again, our procedure for inserting extra words is based on the analysis of extra word errors in the 20,000 word error corpus of Foster (2005).</S>
			<S sid ="143" ssid = "108">3.3.3 Real-Word Spelling Errors We classify an error as a real-word spelling error if it can be corrected by replacing the erroneous word with another word with a Levenshtein distance of one from the erroneous word, e.g. the and they.</S>
			<S sid ="144" ssid = "109">Based on the analysis of the manually created error corpus (Foster, 2005), we compile a list of common English real-word spelling error word pairs.</S>
			<S sid ="145" ssid = "110">For each BNC sentence, the error creation procedure records all tokens in the sentence which appear as one half of one of these word pairs.</S>
			<S sid ="146" ssid = "111">One token is selected at random and replaced by the other half of the pair.</S>
			<S sid ="147" ssid = "112">The list of common real-word spelling error pairs contains such frequently occurring words as is and a, and the procedure therefore produces an ill-formed sentence for most input sentences.</S>
			<S sid ="148" ssid = "113">3.3.4 Agreement Errors We introduce subject-verb and determiner-noun number agreement errors into the BNC sentences.</S>
			<S sid ="149" ssid = "114">We consider both types of agreement error equally likely and introduce the error by replacing a singular determiner, noun or verb with its plural counterpart, or vice versa.</S>
			<S sid ="150" ssid = "115">For English, subject-verb agreement errors can only be introduced for present tense verbs, and determiner-noun agreement errors can only be introduced for determiners which are marked for number, e.g. demonstratives and the indefinite article.</S>
			<S sid ="151" ssid = "116">The procedure would be more productive if applied to a morphologically richer language.</S>
			<S sid ="152" ssid = "117">3.3.5 Covert Errors James (1998) uses the term covert error to describe a genuine language error which results in a sentence which is syntactically well-formed under some interpretation different from the intended one.</S>
			<S sid ="153" ssid = "118">The prominence of covert errors in our automatically created error corpus is estimated by manually inspecting 100 sentences of each error type.</S>
			<S sid ="154" ssid = "119">The percentage of grammatical structures that are inadvertently produced for each error type and an example of each one are shown below: • Agreement Errors, 7% Mary’s staff include Jones,Smith and Murphy &gt; Mary’s staff includes Jones,Smith and Murphy • Real-Word Spelling Errors, 10% And then?</S>
			<S sid ="155" ssid = "120">&gt; And them?</S>
			<S sid ="156" ssid = "121">• Extra Word Errors, 5%in defiance of the free rider prediction &gt; in de fiance of the free rider near prediction • Missing Word Errors, 13% She steered Melissa round a corner &gt; She steered round a corner The occurrence of these covert errors can be reduced by fine-tuning the error creation procedure but they can never be completely eliminated.</S>
			<S sid ="157" ssid = "122">Indeed, they should not be eliminated from the test data, because, ideally, an optimal error detection system should be sophisticated enough to flag syntactically well-formed sentences containing covert errors as potentially ill-formed.1 4 Error Detection Evaluation.</S>
			<S sid ="158" ssid = "123">In this section we present the error detection evaluation experiments.</S>
			<S sid ="159" ssid = "124">The experimental setup is explained in Section 4.1, the results are presented in Section 4.2 and they are analysed in Section 4.3.</S>
			<S sid ="160" ssid = "125">1 An example of this is given in the XLE User Documentation (http://www2.parc.com/isl/groups/nltt/ xle/doc/).</S>
			<S sid ="161" ssid = "126">The authors remark that an ungrammatical reading of the sentence Lets go to the store in which Lets is missing an apostrophe, is preferable to the grammatical yet implausible analysis in which Lets is a plural noun.</S>
			<S sid ="162" ssid = "127">4.1 Experimental Setup.</S>
			<S sid ="163" ssid = "128">4.1.1 Test Data and Evaluation Procedure The following steps are carried out to produce training and test data for this experiment: 1.</S>
			<S sid ="164" ssid = "129">Speech material, poems, captions and list items.</S>
			<S sid ="165" ssid = "130">are removed from the BNC.</S>
			<S sid ="166" ssid = "131">4.2 million sentences remain.</S>
			<S sid ="167" ssid = "132">The order of sentences is ran- domised.</S>
			<S sid ="168" ssid = "133">2.</S>
			<S sid ="169" ssid = "134">For the purpose of cross-validation, the corpus.</S>
			<S sid ="170" ssid = "135">is split into 10 parts.</S>
			<S sid ="171" ssid = "136">3.</S>
			<S sid ="172" ssid = "137">Each part is passed to the 4 automatic error in-.</S>
			<S sid ="173" ssid = "138">sertion modules described in Section 3.3, resulting in 40 additional sets of varying size.</S>
			<S sid ="174" ssid = "139">4.</S>
			<S sid ="175" ssid = "140">The first 60,000 sentences of each of the 50.</S>
			<S sid ="176" ssid = "141">sets, i. e. 3 million sentences, are parsed with XLE.2 5.</S>
			<S sid ="177" ssid = "142">N-gram frequency information is extracted for the first 60,000 sentences of each set.</S>
			<S sid ="178" ssid = "143">An additional 20,000 is extracted as held-out data.</S>
			<S sid ="179" ssid = "144">joining a quarter of each respective error set.</S>
			<S sid ="180" ssid = "145">7.</S>
			<S sid ="181" ssid = "146">For each error type (including mixed errors).</S>
			<S sid ="182" ssid = "147">and cross-validation set, the 60,000 grammatical and 60,000 ungrammatical sentences are joined.</S>
			<S sid ="183" ssid = "148">8.</S>
			<S sid ="184" ssid = "149">Each cross-validation run uses one set out of.</S>
			<S sid ="185" ssid = "150">the 10 as test data (120,000 sentences) and the remaining 9 sets for training (1,080,000 sentences).</S>
			<S sid ="186" ssid = "151">The experiment is a standard binary classification task.</S>
			<S sid ="187" ssid = "152">The methods classify the sentences of the test sets as grammatical or ungrammatical.</S>
			<S sid ="188" ssid = "153">We use the standard measures of precision, recall, f-score and accuracy (Figure 1).</S>
			<S sid ="189" ssid = "154">True positives are understood to be ungrammatical sentences that are identified as such.</S>
			<S sid ="190" ssid = "155">The baseline precision and accuracy is 50% as half of the test data is ungrammatical.</S>
			<S sid ="191" ssid = "156">If 100% of the test data is classified as ungrammatical, recall will be 100% and f-score 2/3.</S>
			<S sid ="192" ssid = "157">Recall shows the accuracy we would get if the grammatical half of the test data was removed.</S>
			<S sid ="193" ssid = "158">Parametrised methods 2 We use the XLE command parse-testfile with parse- literally set to 1, max xle scratch storage set to 1,000 MB, time- out to 60 seconds, and the XLE English LFG.</S>
			<S sid ="194" ssid = "159">Skimming is not switched on and fragments are.</S>
			<S sid ="195" ssid = "160">M ea su re Fo r m ul a pr eci sio n re cal l f s c o r e a c c u r a c y tp /( tp + f p) tp /( tp + f n) 2p r ∗ re /( pr + re ) (t p + tn )/ (t p + tn + f p + f n) Figure 1: Evaluation measures: tp = true positives, fp = false positives, tn = true negatives, fn = false negatives, pr = precision, re = recall are first optimised for accuracy and then the other measures are taken.</S>
			<S sid ="196" ssid = "161">Therefore, f-scores below the artificial 2/3 baseline are meaningful.</S>
			<S sid ="197" ssid = "162">4.1.2 Method 1: Precision Grammar According to the XLE documentation, a sentence is marked with a star (*) if its optimal solution uses a constraint marked as ungrammatical.</S>
			<S sid ="198" ssid = "163">We use this star feature, parser exceptions and zero number of parses to classify a sentence as ungrammatical.</S>
			<S sid ="199" ssid = "164">4.1.3 Method 2: POS N-grams In each cross-validation run, the full data of the remaining 9 sets of step 2 of the data generation (see Section 4.1.1) is used as a reference corpus of0.9×4, 200, 000 = 3, 800, 000 assumedly grammat ical sentences.</S>
			<S sid ="200" ssid = "165">The reference corpora and data sets are POS tagged with the IMS TreeTagger (Schmidt, 1994).</S>
			<S sid ="201" ssid = "166">Frequencies of POS n-grams (n = 2, . . .</S>
			<S sid ="202" ssid = "167">, 7) are counted in the reference corpora.</S>
			<S sid ="203" ssid = "168">A test sentence is flagged as ungrammatical if it contains an n-gram below a fixed frequency threshold.</S>
			<S sid ="204" ssid = "169">Method 2 has two parameters: n and the frequency threshold.</S>
			<S sid ="205" ssid = "170">4.1.4 Method 3: Decision Trees on XLE Output The XLE parser outputs additional statistics for each sentence that we encode in six features: • An integer indicating starredness (0 or 1) and various parser exceptions (-1 for time out, -2 for exceeded memory, etc.) • The number of optimal parses3 • The number of unoptimal parses • The duration of parsing • The number of subtrees • The number of words 3 The use of preferred versus dispreferred constraints are used to distinguish optimal parses from unoptimal ones.</S>
			<S sid ="206" ssid = "171">Training data for the decision tree learner is composed of 9×60, 000 = 540, 000 feature vectors from grammatical sentences and 9 × 15, 000 = 135, 000 feature vectors from ungrammatical sentences of each error type, resulting in equal amounts of grammatical and ungrammatical training data.</S>
			<S sid ="207" ssid = "172">We choose the weka implementation of machine learning algorithms for the experiments (Witten and Frank, 2000).</S>
			<S sid ="208" ssid = "173">We use a J48 decision tree learner with the default model.</S>
			<S sid ="209" ssid = "174">4.1.5 Method 4: Decision Trees on N-grams Method 4 follows the setup of Method 3.</S>
			<S sid ="210" ssid = "175">However, the features are the frequencies of the rarest n-grams (n = 2, . . .</S>
			<S sid ="211" ssid = "176">, 7) in the sentence.</S>
			<S sid ="212" ssid = "177">Therefore, the feature vector of one sentence contains 6 numbers.</S>
			<S sid ="213" ssid = "178">4.1.6 Method 5: Decision Trees on Combined Feature Sets This method combines the features of Methods 3 and 4 for training a decision tree.</S>
			<S sid ="214" ssid = "179">4.2 Results.</S>
			<S sid ="215" ssid = "180">Table 1 shows the results for Method 1, which uses XLE starredness, parser exceptions4 and zero parses to classify grammaticality.</S>
			<S sid ="216" ssid = "181">Table 2 shows the results for Method 2, the basic n-gram approach.</S>
			<S sid ="217" ssid = "182">Table 3 shows the results for Method 3, which classifies based on a decision tree of XLE features.</S>
			<S sid ="218" ssid = "183">The results for Method 4, the n-gram-based decision tree approach, are shown in Table 4.</S>
			<S sid ="219" ssid = "184">Finally, Table 5 shows the results for Method 5 which combines n- gram and XLE features in decision trees.</S>
			<S sid ="220" ssid = "185">In the case of Method 2, we first have to find optimal parameters.</S>
			<S sid ="221" ssid = "186">As only very limited integer values for n and the threshold are reasonable, an exhaustive search is feasible.</S>
			<S sid ="222" ssid = "187">We considered n = 2, . . .</S>
			<S sid ="223" ssid = "188">, 7 and frequency thresholds below 20,000.</S>
			<S sid ="224" ssid = "189">Separate held- out data (400,000 sentences) is used in order to avoid overfitting.</S>
			<S sid ="225" ssid = "190">Best accuracy is achieved with 5-grams and a threshold of 4.</S>
			<S sid ="226" ssid = "191">Table 2 reports results with these parameters.</S>
			<S sid ="227" ssid = "192">4 XLE parsing (see footnote 2 for configuration) runs out of time for 0.7 % and out of memory for 2.5 % of sentences, measured on training data of the first cross-validation run, i. e. 540,000 grammatical sentence and 135,000 of each error type.</S>
			<S sid ="228" ssid = "193">14 sentences of 3 million caused the parser to terminate abnormally.</S>
			<S sid ="229" ssid = "194">Er ro r ty pe P r. R e.F Sc . Ac c. A gr ee m en t R e al w o r d E xt ra w o r d M is si n g w o r d 66 .2 63 .5 64 .4 59 .2 64 .6 57 .3 59 .7 47 .8 6 5 . 4 6 0 . 3 6 2 . 0 5 2 . 9 65 .8 62 .2 63 .4 57 .4 Mi xe d err or s 63 .5 57 .3 6 0 . 3 62 .2 Table 1: Classification results with XLE starredness, parser exceptions and zero parses (Method 1) Er ro r ty pe P r. R e.F Sc . Ac c. A gr ee m en t R e al w o r d E xt ra w o r d M is si n g w o r d 58 .6 64 .0 64 .8 57 .2 51 .7 64 .9 67 .3 48 .8 5 5 . 0 6 4 . 5 6 6 . 0 5 2 . 7 57 .6 64 .2 65 .4 56 .1 Mi xe d err or s 61 .5 58 .2 5 9 . 8 60 .8 Table 2: Classification results with 5-gram and frequency threshold 4 (Method 2) The standard deviation of results across cross- validation runs is below 0.006 on all measures, except for Method 4.</S>
			<S sid ="230" ssid = "195">Therefore we only report average percentages.</S>
			<S sid ="231" ssid = "196">The highest observed standard deviation is 0.0257 for recall of Method 4 on agreement errors.</S>
			<S sid ="232" ssid = "197">For Methods 3, 4 and 5, the decision tree learner optimises accuracy and, in doing so, chooses a trade- off between precision and recall.</S>
			<S sid ="233" ssid = "198">4.3 Analysis.</S>
			<S sid ="234" ssid = "199">Both Method 1 (Table 1) and Method 2 (Table 2) achieve above baseline accuracy for all error types.</S>
			<S sid ="235" ssid = "200">However, Method 1, which uses the XLE starred feature, parser exceptions and zero parses to determine whether or not a sentence is grammatical, slightly outperforms Method 2, which uses the fre Er ro r ty pe P r. R e.F Sc . Ac c. A gr ee m en t R e al w o r d E xt ra w o r d M is si n g w o r d 67 .0 63 .4 63 .0 59 .7 79 .3 67 .6 66 .4 57 .8 7 2 . 6 6 5 . 4 6 4 . 7 5 8 . 7 70 .1 64 .3 63 .7 59 .4 Mi xe d err or s 63 .4 67 .8 6 5 . 6 64 .4 Table 3: Classification results with decision tree on XLE output (Method 3) Er ro r ty pe P r. R e.F Sc . Ac c. A gr ee m en t R e al w o r d E xt ra w o r d M is si n g w o r d 61 .2 65 .3 66 .4 59 .1 53 .8 64 .3 67 .4 49 .2 5 7 . 3 6 4 . 8 6 6 . 9 5 3 . 7 59 .9 65 .1 66 .7 57 .5 Mi xe d err or s 63 .3 58 .7 6 0 . 9 62 .3 Table 4: Classification results with decision tree on vectors of frequency of rarest n-grams (Method 4) Er ro r ty pe P r. R e.F Sc . Ac c. A gr ee m en t R e al w o r d E xt ra w o r d M is si n g w o r d 67 .1 65 .8 65 .9 61 .2 75 .2 70 .7 71 .2 58 .0 7 0 . 9 6 8 . 1 6 8 . 5 5 9 . 5 69 .2 67 .0 67 .2 60 .6 Mi xe d err or s 65 .2 68 .8 6 6 . 9 66 .0 Table 5: Classification results with decision tree on joined feature set (Method 5) quency of POS 5-grams to detect an error.</S>
			<S sid ="236" ssid = "201">The XLE deep-processing approach is better than the n- gram-based approach for agreement errors (f-score +10.4).</S>
			<S sid ="237" ssid = "202">Examining the various types of agreement errors, we can see that this is especially the case for singular subjects followed by plural copula verbs (recall +37.7) and determiner-noun number mismatches (recall +23.6 for singular nouns and +18.0 for plural nouns), but not for plural subjects followed by singular verbs (recall -24.0).</S>
			<S sid ="238" ssid = "203">The relatively poor performance of Method 2 on agreement errors involving determiners could be due to the lack of agreement marking on the Penn Treebank determiner tag used by TreeTagger.</S>
			<S sid ="239" ssid = "204">Method 1 is outperformed by Method 2 for real- word spelling and extra word errors (f-score -4.2, -4.0).</S>
			<S sid ="240" ssid = "205">Unsurprisingly, Method 2 has an advantage on those real-word spelling errors that change the POS (recall -8.8 for Method 1).</S>
			<S sid ="241" ssid = "206">Both methods perform poorly on missing word errors.</S>
			<S sid ="242" ssid = "207">For both methods there are only very small differences in performance between the various missing word error sub- types (identified by the POS of the deleted word).</S>
			<S sid ="243" ssid = "208">Method 3, which uses machine learning to exploit all the information returned by the XLE parser, improves performance from Method 1, the basic XLE method, for all error types.5 The general improvement comes from an improvement in recall, meaning that more ungrammatical sentences are actually flagged as such without compromising precision.</S>
			<S sid ="244" ssid = "209">The improvement is highest for agreement errors (f-score +7.2).</S>
			<S sid ="245" ssid = "210">Singular subject with plural copula errors (e. g. The man are) peak at a recall of 91.0.</S>
			<S sid ="246" ssid = "211">The Method 3 results indicate that information on the number of solutions (optimal and unoptimal), the number of subtrees, the time taken to parse the sentence and the number of words can be used to predict grammaticality.</S>
			<S sid ="247" ssid = "212">It would be interesting to investigate this approach with other parsers.</S>
			<S sid ="248" ssid = "213">Method 4, which uses a decision tree with n- gram-based features, confirms the results of Method 2.</S>
			<S sid ="249" ssid = "214">The decision trees’ root nodes are similar or even.</S>
			<S sid ="250" ssid = "215">identical (depending on cross-validation run) to the decision rule of Method 2 (5-gram frequency below 4).</S>
			<S sid ="251" ssid = "216">However, the 10 decision trees have between 1,111 and 1,905 nodes and draw from all features, even bigrams and 7-grams that perform poorly on their own.</S>
			<S sid ="252" ssid = "217">The improvements are very small though and they are not significant according the criterion of non-overlapping cross-validation results.</S>
			<S sid ="253" ssid = "218">The main reason for the evaluation of Method 4 is to provide another reference point for comparison of the final method.</S>
			<S sid ="254" ssid = "219">The overall best results are those for Method 5, the combined XLE, n-gram and machine-learning- based method, which outperforms the next best method, Method 3, on all error types apart from agreement errors (f-score -1.7, +2.7, +3.8, +0.8).</S>
			<S sid ="255" ssid = "220">For agreement errors, it seems that the relatively poor results for n-grams have a negative effect on the relatively good results for the XLE.</S>
			<S sid ="256" ssid = "221">Figure 2 shows that the performance is almost constant on ungrammatical data in the important sentence length range from 5 to 40.</S>
			<S sid ="257" ssid = "222">However, there is a negative correlation of accuracy and sentence length for grammatical sentences.</S>
			<S sid ="258" ssid = "223">Very long sentences of any kind tend to be classified as ungrammatical, except for missing word errors which remain close to the 50% baseline of coin-flipping.</S>
			<S sid ="259" ssid = "224">For all methods, missing word errors are the worst-performing, particularly in recall (i. e. the ac 5 The +0.3 increase in average accuracy for extra word errors is not clearly significant as the results of cross-validation runs overlap.</S>
			<S sid ="260" ssid = "225">Figure 2: Accuracy by sentence length for Method 5 measured on separate grammatical and ungrammatical data: Gr = Grammatical, AG = Agreement, RW = Real-Word, EW = Extra Word, MW = Missing Word curacy on ungrammatical data alone).</S>
			<S sid ="261" ssid = "226">This means that the omission of a word is less likely to result in the sentence being flagged as erroneous.</S>
			<S sid ="262" ssid = "227">In contrast, extra word errors perform consistently and relatively well for all methods.</S>
			<S sid ="263" ssid = "228">5 Conclusion and Future Work.</S>
			<S sid ="264" ssid = "229">We evaluated a deep processing approach and a POS n-gram-based approach to the automatic detection of common grammatical errors in a BNC-derived artificial error corpus.</S>
			<S sid ="265" ssid = "230">The results are broken down by error type.</S>
			<S sid ="266" ssid = "231">Together with the deep approach, a decision tree machine learning algorithm can be used effectively.</S>
			<S sid ="267" ssid = "232">However, extending the shallow approach with the same learning algorithm gives only small improvements.</S>
			<S sid ="268" ssid = "233">Combining the deep and shallow approaches gives an additional improvement on all but one error type.</S>
			<S sid ="269" ssid = "234">Our plan is to investigate why all methods perform poorly on missing word errors, to extend the error creation procedure so that it includes a wider range of errors, to try the deep approach with other parsers, to integrate additional features from state- of-the-art shallow techniques and to repeat the experiments for languages other than English.</S>
	</SECTION>
	<SECTION title="Acknowledgements">
			<S sid ="270" ssid = "235">This work is supported by the IRCSET Embark Initiative (basic research grant SC/02/298 and postdoctoral fellowship P/04/232).</S>
			<S sid ="271" ssid = "236">The training and test data used in this reseach is based on the British National Corpus (BNC), distributed by Oxford University Computing Services on behalf of the BNC Consortium.</S>
			<S sid ="272" ssid = "237">We thank Djame´ Seddah for helping us to run the XLE parsing on the SFI/HEA Irish Centre for High-End Computing (ICHEC) and the authors wish to acknowledge ICHEC for the provision of computational facilities and support.</S>
	</SECTION>
</PAPER>
