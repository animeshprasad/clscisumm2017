<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">We consider the challenge of learning semantic parsers that scale to large, open-domain problems, such as question answering with Freebase.</S>
		<S sid ="2" ssid = "2">In such settings, the sentences cover a wide variety of topics and include many phrases whose meaning is difficult to represent in a fixed target ontology.</S>
		<S sid ="3" ssid = "3">For example, even simple phrases such as ‘daughter’ and ‘number of people living in’ cannot be directly represented in Freebase, whose ontology instead encodes facts about gender, parenthood, and population.</S>
		<S sid ="4" ssid = "4">In this paper, we introduce a new semantic parsing approach that learns to resolve such ontological mismatches.</S>
		<S sid ="5" ssid = "5">The parser is learned from question-answer pairs, uses a probabilistic CCG to build linguistically motivated logical- form meaning representations, and includes an ontology matching model that adapts the output logical forms for each target ontology.</S>
		<S sid ="6" ssid = "6">Experiments demonstrate state-of-the-art performance on two benchmark semantic parsing datasets, including a nine point accuracy improvement on a recent Freebase QA corpus.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="7" ssid = "7">Semantic parsers map sentences to formal representations of their underlying meaning.</S>
			<S sid ="8" ssid = "8">Recently, algorithms have been developed to learn such parsers for many applications, including question answering (QA) (Kwiatkowski et al., 2011; Liang et al., 2011), relation extraction (Krishnamurthy and Mitchell, 2012), robot control (Matuszek et al., 2012; Krishnamurthy and Kollar, 2013), interpreting instruc tions (Chen and Mooney, 2011; Artzi and Zettlemoyer, 2013), and generating programs (Kushman and Barzilay, 2013).</S>
			<S sid ="9" ssid = "9">In each case, the parser uses a predefined set of logical constants, or an ontology, to construct meaning representations.</S>
			<S sid ="10" ssid = "10">In practice, the choice of ontology significantly impacts learning.</S>
			<S sid ="11" ssid = "11">For example, consider the following questions (Q) and candidate meaning representations (MR): Q1: What is the population of Seattle?</S>
			<S sid ="12" ssid = "12">Q2: How many people live in Seattle?</S>
			<S sid ="13" ssid = "13">MR1: λx.population(Seattle, x) MR2: count(λx.person(x) ∧ live(x, Seattle)) A semantic parser might aim to construct MR1 for Q1 and MR2 for Q2; these pairings align constants (count, person, etc.) directly to phrases (‘How many,’ ‘people,’ etc.).</S>
			<S sid ="14" ssid = "14">Unfortunately, few ontologies have sufficient coverage to support both meaning representations, for example many QA databases would only include the population relation required for MR1.</S>
			<S sid ="15" ssid = "15">Most existing approaches would, given this deficiency, simply aim to produce MR1 for Q2, thereby introducing significant lexical ambiguity that complicates learning.</S>
			<S sid ="16" ssid = "16">Such ontological mismatches become increasingly common as domain and language complexity increases.</S>
			<S sid ="17" ssid = "17">In this paper, we introduce a semantic parsing approach that supports scalable, open-domain ontological reasoning.</S>
			<S sid ="18" ssid = "18">The parser first constructs a linguistically motivated domain-independent meaning representation.</S>
			<S sid ="19" ssid = "19">For example, possibly producing MR1 for Q1 and MR2 for Q2 above.</S>
			<S sid ="20" ssid = "20">It then uses a learned ontology matching model to transform this represen 1545 Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 1545–1556, Seattle, Washington, USA, 1821 October 2013.</S>
			<S sid ="21" ssid = "21">Qc 2013 Association for Computational Linguistics x : How many people visit the public library of New York annually l0 : λx.eq(x, count(λy.people(y) ∧ ∃e.visit(y, ιz.public(z) ∧ library(z) ∧ of (z, new york), e) ∧ annually(e))) y : λx.library.public library system.annual visits(x, new york public library) a : 13,554,002 x : What works did Mozart dedicate to Joseph Haydn l0 : λx.works(x) ∧ ∃e.dedicate(mozart, x, e) ∧ to(haydn, e))) y : λx.dedicated work(x) ∧ ∃e.dedicated by(mozart, e) ∧ dedication(x, e) ∧ dedicated to(haydn, e))) a : { String Quartet No. 19, Haydn Quartets, String Quartet No. 16, String Quartet No. 18, String Quartet No. 17 } Figure 1: Examples of sentences x, domain-independent underspecified logical forms l0, fully specified logical forms y, and answers a drawn from the Freebase domain.</S>
			<S sid ="22" ssid = "22">tation for the target domain.</S>
			<S sid ="23" ssid = "23">In our example, producing either MR1, MR2 or another more appropriate option, depending on the QA database schema.</S>
			<S sid ="24" ssid = "24">This two stage approach enables parsing without any domain-dependent lexicon that pairs words with logical constants.</S>
			<S sid ="25" ssid = "25">Instead, word meaning is filled in on-the-fly through ontology matching, enabling the parser to infer the meaning of previously unseen words and more easily transfer across domains.</S>
			<S sid ="26" ssid = "26">Figure 1 shows the desired outputs for two example Freebase sentences.</S>
			<S sid ="27" ssid = "27">The first parsing stage uses a probabilistic combinatory categorial grammar (CCG) (Steedman, 2000; Clark and Curran, 2007) to map sentences to new, underspecified logical-form meaning representations containing generic logical constants that are not tied to any specific ontology.</S>
			<S sid ="28" ssid = "28">This approach enables us to share grammar structure across domains, instead of repeatedly relearning different grammars for each target ontology.</S>
			<S sid ="29" ssid = "29">The ontology-matching step considers a large number of type-equivalent domain-specific meanings.</S>
			<S sid ="30" ssid = "30">It enables us to incorporate a number of cues, including the target ontology structure and lexical similarity between the names of the domain-independent and dependent constants, to construct the final logical forms.</S>
			<S sid ="31" ssid = "31">During learning, we estimate a linear model over derivations that include all of the CCG parsing decisions and the choices for ontology matching.</S>
			<S sid ="32" ssid = "32">Following a number of recent approaches (Clarke et al., 2010; Liang et al., 2011), we treat all intermediate decisions as latent and learn from data containing only easily gathered question answer pairs.</S>
			<S sid ="33" ssid = "33">This approach aligns naturally with our two-stage parsing setup, where the final logical expression can be directly used to provide answers.</S>
			<S sid ="34" ssid = "34">We report performance on two benchmark datasets: GeoQuery (Zelle and Mooney, 1996) and Freebase QA (FQ) (Cai and Yates, 2013a).</S>
			<S sid ="35" ssid = "35">Geo- Query includes a geography database with a small ontology and questions with relatively complex, compositional structure.</S>
			<S sid ="36" ssid = "36">FQ includes questions to Freebase, a large community-authored database that spans many sub-domains.</S>
			<S sid ="37" ssid = "37">Experiments demonstrate state-of-the-art performance in both cases, including a nine point improvement in recall for the FQ test.</S>
	</SECTION>
	<SECTION title="Formal Overview. " number = "2">
			<S sid ="38" ssid = "1">Task Let an ontology O be a set of logical constants and a knowledge base K be a collection of logical statements constructed with constants from O. For example, K could be facts in Freebase (Bollacker et al., 2008) and O would define the set of entities and relation types used to encode those facts.</S>
			<S sid ="39" ssid = "2">Also, let y be a logical expression that can be executed against K to return an answer a = EXEC(y, K).</S>
			<S sid ="40" ssid = "3">Figure 1 shows example queries and answers for Freebase.</S>
			<S sid ="41" ssid = "4">Our goal is to build a function y = PARSE(x, O) for mapping a natural language sentence x to a domain-dependent logical form y. Parsing We use a two-stage approach to define the space of possible parses GEN(x, O) (Section 5).</S>
			<S sid ="42" ssid = "5">First, we use a CCG and word-class information from Wiktionary1 to build domain-independent underspecified logical forms, which closely mirror the linguistic structure of the sentence but do not useconstants from O. For example, in Figure 1, l0 de notes the underspecified logical forms paired with each sentence x. The parser then maps this intermediate representation to a logical form that uses con stants from O, such as the y seen in Figure 1.</S>
			<S sid ="43" ssid = "6">1 www.wiktionary.com question-answer pairs {(xi, ai) : i = 1 . . .</S>
			<S sid ="44" ssid = "7">n} and a corresponding knowledge base K. The learn ing algorithm (Section 7.1) estimates the parameters of a linear model for ranking the possible en tires in GEN(x, O).</S>
			<S sid ="45" ssid = "8">Unlike much previous work (e.g., Zettlemoyer and Collins (2005)), we do not induce a CCG lexicon.</S>
			<S sid ="46" ssid = "9">The lexicon is open domain, using no symbols from the ontology O for K. This allows us to write a single set of lexical templates that are reused in every domain (Section 5.1).</S>
			<S sid ="47" ssid = "10">The burden of learning word meaning is shifted to the second, ontology matching, stage of parsing (Section 5.2), and modeled with a number of new features (Section 7.2) as part of the joint model.</S>
			<S sid ="48" ssid = "11">Evaluation We evaluate on held out question- answer pairs in two benchmark domains, Freebase and GeoQuery.</S>
			<S sid ="49" ssid = "12">Following Cai and Yates (2013a), we also report a cross-domain evaluation where the Freebase data is divided by topics such as sports, film, and business.</S>
			<S sid ="50" ssid = "13">This condition ensures that the test data has a large percentage of previously unseen words, allowing us to measure the effectiveness of the real time ontology matching.</S>
	</SECTION>
	<SECTION title="Related Work. " number = "3">
			<S sid ="51" ssid = "1">Supervised approaches for learning semantic parsers have received significant attention, e.g.</S>
			<S sid ="52" ssid = "2">(Kate and Mooney, 2006; Wong and Mooney, 2007; Muresan, 2011; Kwiatkowski et al., 2010, 2011, 2012; Jones et al., 2012).</S>
			<S sid ="53" ssid = "3">However, these techniques require training data with hand-labeled domain-specific logical expressions.</S>
			<S sid ="54" ssid = "4">Recently, alternative forms of supervision were introduced, including learning from question-answer pairs (Clarke et al., 2010; Liang et al., 2011), from conversational logs (Artzi and Zettlemoyer, 2011), with distant supervision (Krishnamurthy and Mitchell, 2012; Cai and Yates, 2013b), and from sentences paired with system behavior (Goldwasser and Roth, 2011; Chen and Mooney, 2011; Artzi and Zettlemoyer, 2013).</S>
			<S sid ="55" ssid = "5">Our work adds to these efforts by demonstrating a new approach for learning with latent meaning representations that scales to large databases like Freebase.</S>
			<S sid ="56" ssid = "6">Cai and Yates (2013a) present the most closely related work.</S>
			<S sid ="57" ssid = "7">They applied schema matching techniques to expand a CCG lexicon learned with the proach was one of the first to scale to Freebase, but required labeled logical forms and did not jointly model semantic parsing and ontological reasoning.</S>
			<S sid ="58" ssid = "8">This method serves as the state of the art for our comparison in Section 9.</S>
			<S sid ="59" ssid = "9">We build on a number of existing algorithmic ideas, including using CCGs to build meaning representations (Zettlemoyer and Collins, 2005, 2007; Kwiatkowski et al., 2010, 2011), building derivations to transform the output of the CCG parser based on context (Zettlemoyer and Collins, 2009), and using weakly supervised margin-sensitive parameter updates (Artzi and Zettlemoyer, 2011, 2013).</S>
			<S sid ="60" ssid = "10">However, we introduce the idea of learning an open-domain CCG semantic parser; all previous methods suffered, to various degrees, from the onto- logical mismatch problem that motivates our work.</S>
			<S sid ="61" ssid = "11">The challenge of ontological mismatch has been previously recognized in many settings.</S>
			<S sid ="62" ssid = "12">Hobbs (1985) describes the need for ontological promiscuity in general language understanding.</S>
			<S sid ="63" ssid = "13">Many previous hand-engineered natural language understanding systems (Grosz et al., 1987; Alshawi, 1992; Bos, 2008) are designed to build general meaning representations that are adapted for different domains.</S>
			<S sid ="64" ssid = "14">Recent efforts to build natural language interfaces to large databases, for example DBpedia (Yahya et al., 2012; Unger et al., 2012), have also used hand- engineered ontology matching techniques.</S>
			<S sid ="65" ssid = "15">Fader et al.</S>
			<S sid ="66" ssid = "16">(2013) recently presented a scalable approach to learning an open domain QA system, where onto- logical mismatches are resolved with learned paraphrases.</S>
			<S sid ="67" ssid = "17">Finally, the databases research community has a long history of developing schema matching techniques (Doan et al., 2004; Euzenat et al., 2007), which has inspired more recent work on distant supervision for relation extraction with Freebase (Zhang et al., 2012).</S>
	</SECTION>
	<SECTION title="Background. " number = "4">
			<S sid ="68" ssid = "1">Semantic Modeling We use the typed lambda calculus to build logical forms that represent the meanings of words, phrases and sentences.</S>
			<S sid ="69" ssid = "2">Logical forms contain constants, variables, lambda abstractions, and literals.</S>
			<S sid ="70" ssid = "3">In this paper, we use the term literal to refer to the application of a constant to a sequence of N N \N/N P N P λx.library(x) λyλf λx.f (x) ∧ loc(x, y) N Y C &gt; N \N λf.λx.f (x) ∧ loc(x, N Y C ) &lt; N λx.library(x) ∧ loc(x, N Y C ) Figure 2: A sample CCG parse.</S>
			<S sid ="71" ssid = "4">arguments.</S>
			<S sid ="72" ssid = "5">We include types for entities e, truth values t, numbers i, events ev, and higher-order functions, such as (e, t) and ((e, t), e).</S>
			<S sid ="73" ssid = "6">We use Davidsonian event semantics (Davidson, 1967) to explic itly represent events using event-typed variables and conjunctive modifiers to capture thematic roles.</S>
			<S sid ="74" ssid = "7">Combinatory Categorial Grammars (CCG) CCGs are a linguistically-motivated formalism for modeling a wide range of language phenomena (Steedman, 1996, 2000).</S>
			<S sid ="75" ssid = "8">A CCG is defined by a lexicon and a set of combinators.</S>
			<S sid ="76" ssid = "9">The lexicon contains entries that pair words or phrases with CCG categories.</S>
			<S sid ="77" ssid = "10">For example, the lexical entry library f- N : λx.library(x) in Figure 2 pairs the word ‘library’ with the CCG category that has syntactic category N and meaning λx.library(x).</S>
			<S sid ="78" ssid = "11">A CCG parse starts from assigning lexical entries to words and phrases.</S>
			<S sid ="79" ssid = "12">These are then combined using the set of CCG combinators to build a logical form that captures the meaning of the entire sentence.</S>
			<S sid ="80" ssid = "13">We use the application, composition, and coordination combinators.</S>
			<S sid ="81" ssid = "14">Figure 2 shows an example parse.</S>
	</SECTION>
	<SECTION title="Parsing Sentences to Meanings. " number = "5">
			<S sid ="82" ssid = "1">The function GEN(x, O) defines the set of possible derivations for an input sentence x. Each derivation d = (Π, M ) builds a logical form y using constants from the ontology O. Π is a CCG parse tree that maps x to an underspecified logical form l0.</S>
			<S sid ="83" ssid = "2">M is an ontological match that maps l0 onto the fully specified logical form y. This section describes, with reference to the example in Figure 3, the operations used by Π and M . 5.1 Domain Independent Parsing.</S>
			<S sid ="84" ssid = "3">Domain-independent CCG parse trees Π are built using a predefined set of 56 underspecified lexi and the combinatory rules introduced in Section 4.</S>
			<S sid ="85" ssid = "4">An underspecified CCG lexical category has a syntactic category and a logical form containing no constants from the domain ontology O. Instead, the logical form includes underspecified constants that are typed placeholders which will later be replaced during ontology matching.</S>
			<S sid ="86" ssid = "5">For example, a noun might be assigned the lexical category N : λx.p(x), where p is an underspecified (e, t)-type constant.During parsing, lexical categories are created dy namically.</S>
			<S sid ="87" ssid = "6">We manually define a set of POS tags for each underspecified lexical category, and use Wiktionary as a tag dictionary to define the possible POS tags for words and phrases.</S>
			<S sid ="88" ssid = "7">Each phrase is assigned every matching lexical category.</S>
			<S sid ="89" ssid = "8">For example, the word ‘visit’ can be either a verb or a noun in Wiktionary.</S>
			<S sid ="90" ssid = "9">We accordingly assign it all underspecified categories for the classes, including: N : λx.p(x) , S\NP/NP : λxλy∃ev.p(y, x, ev) for nouns and transitive verbs respectively.</S>
			<S sid ="91" ssid = "10">We also define domain-independent lexical items for function words such as ‘what,’ ‘when,’ and ‘how many,’ ‘and,’ and ‘is.’ These lexical items pair a word with a lexical category containing only domain-independent con stants.</S>
			<S sid ="92" ssid = "11">For example, how many f- S/(S\NP)/N : λf.λg.λx.eq(x, count(λy.f (y) ∧ g(y))) contains the function count and the predicate eq. Figure 3a shows the lexical categories and combinator applications used to construct the underspecified logical form l0.</S>
			<S sid ="93" ssid = "12">Underspecified constants in this figure have been labeled with the words that they are associated with for readability.</S>
			<S sid ="94" ssid = "13">5.2 Ontological Matching.</S>
			<S sid ="95" ssid = "14">The second, domain specific, step M maps the underspecified logical form l0 onto the fully specified logical form y. The mapping from constants in l0 to constants in y is not one-to-one.</S>
			<S sid ="96" ssid = "15">For example, in Figure 3, l0 contains 11 constants but y contains only 2.</S>
			<S sid ="97" ssid = "16">The ontological match is a sequence of matching.</S>
			<S sid ="98" ssid = "17">operations M = (o1 . . .</S>
			<S sid ="99" ssid = "18">, on) that can transform the structure of the logical form or replace underspecified constants with constants from O.</S>
			<S sid ="100" ssid = "19">(a) Underspecified CCG parse Π: Map words onto underspecified lexical categories as described in Section 5.1.</S>
			<S sid ="101" ssid = "20">Use the CCG combinators to combine lexical categories to give the full underpecified logical form l0 . S λf.λg.λx.eq(x, count( λx.P eople(x) λx.λy.∃ev.</S>
			<S sid ="102" ssid = "21">λf.ιx.f (x) λf.λx.f (x)∧ λx.Library(x) λy.λf.λx.Of N ewY ork λev.Annually(ev) λy.f (y) ∧ g(y))) V isit(y, x, ev) P ublic(x) (x, y) ∧ f (x) &gt; &gt; &lt; &gt; &gt; &gt; &lt; &gt; S l0 : λx.eq(x, count(λy.P eople(y) ∧ ∃e.V isit(y, ιz.P ublic(z) ∧ Library(z) ∧ Of (z, N ewY ork)) ∧ Annually(e))) (b) Structure Matching Steps in M : Use the operators described in Section 5.2.1 and Figure 4 to transform l0 . In each step one of the operators is applied to a subexpression of the existing logical form to generate a modified logical form with a new underspecified constant marked in bold.</S>
			<S sid ="103" ssid = "22">l0 : λx.eq(x, count(λy.P eople(y) ∧ ∃e.V isit(y, ιz.P ublic(z) ∧ Library(z) ∧ Of (z, N ewY ork), e) ∧ Annually(e))) l1 : λx.eq(x, count(λy.P eople(y) ∧ ∃e.V isit(y, PublicLibraryOfNewYork, e) ∧ Annually(e))) l2 : λx.HowManyPeopleVisitAnnually(x, P ublicLibraryOf N ewY ork))) (c) Constant Matching Steps in M : Replace all underspecified constants in the transformed logical form with a similarly typed constant from O, as described in Section 5.2.2.</S>
			<S sid ="104" ssid = "23">The underspecified constant to be replaced is marked in bold and constants from O are written in typeset.</S>
			<S sid ="105" ssid = "24">λx.H owM anyP eopleV isitAnnually(x, PublicLibraryOfNewYork) l3 : 1→ λx.H owM anyP eopleV isitAnnually(x, new york public library) λx.HowManyPeopleVisitAnnually(x, new york public library) y : 1→ λx.public library system.annual visits(x, new york public library) Figure 3: Example derivation for the query ‘how many people visit the public library of new york annually.’ Underspecified constants are labelled with the words from the query that they are associated with for readability.</S>
			<S sid ="106" ssid = "25">Constants from O, written in typeset, are introduced in step (c).</S>
			<S sid ="107" ssid = "26">1 n Figure 4: Definition of the operations used to transform the structure of the underspecified logical form l0 to match the ontology O. The function type(c) calculates a constant c’s type.</S>
			<S sid ="108" ssid = "27">The function freev(lf ) returns the set of variables that are free in lf (not bound by a lambda term or quantifier).</S>
			<S sid ="109" ssid = "28">The function subexps(lf ) generates the set of all subexpressions of the lambda calculus expression lf . 5.2.1 Structure Matching Three structure matching operators, illustrated in Figure 4, are used to collapse or expand literals in l0.</S>
			<S sid ="110" ssid = "29">Collapses merge a subexpression from l0 to create a new underspecified constant, generating a logical form with fewer constants.</S>
			<S sid ="111" ssid = "30">Expansions split a subexpression from l0 to generate a new logical form containing one extra constant.</S>
			<S sid ="112" ssid = "31">Collapsing Operators The collapsing operator defined in Figure 4a merges all constants in a literal to generate a single constant of the same type.</S>
			<S sid ="113" ssid = "32">This operator is used to map ιz.P ublic(z)∧ Library(z)∧Of (z,N ewY ork) to P ublicLibraryOf N ewY ork in Figure 3b.</S>
			<S sid ="114" ssid = "33">Its operation is limited to entity typed expressions that do not contain free variables.</S>
			<S sid ="115" ssid = "34">The operator in Figure 4b, in contrast, can be used to collapse the expression eq(x,count(λy.P eople(y)∧ ∃e.V isit(y,P ublicLibraryOf N ewY ork,e))∧Annually(e))), which contains free variable x onto a new expression C ountP eopleV isitAnnually(x,P ublicLibraryOf N ewY ork).</S>
			<S sid ="116" ssid = "35">This is only possible when the type of the newly created constant is allowed in O and the variable x is free in the output expression.</S>
			<S sid ="117" ssid = "36">Subsets of conjuncts can be collapsed using the operator in Figure 4b by creating ad-hoc conjunctions that encapsulate them.</S>
			<S sid ="118" ssid = "37">Disjunctions are treated similarly.</S>
			<S sid ="119" ssid = "38">Performing collapses on the underspecified logical form allows non-contiguous phrases to be represented in the collapsed form.</S>
			<S sid ="120" ssid = "39">In this example, the logical form representing the phrase ‘how many people visit’ has been merged with the logical form representing the non-adjacent adverb ‘annually.’ This generates a new underspecified constant that can be mapped onto the Freebase relation public library system annual visits that relates to both phrases.</S>
			<S sid ="121" ssid = "40">The collapsing operations preserve semantic type, ensuring that all logical forms generated by the derivation sequence are well typed.</S>
			<S sid ="122" ssid = "41">The full set of allowed collapses of l0 is given by the transitive closure of the collapsing operations.</S>
			<S sid ="123" ssid = "42">The size of this set is limited by the number of constants in l0, since each collapse removes at least one constant.</S>
			<S sid ="124" ssid = "43">At each step, the number of possible collapses is polynomial in the number of constants in l0 and exponential inthe arity of the most complex type in O. For do mains of interest this arity is unlikely to be high and for triple stores such as Freebase it is 2.</S>
			<S sid ="125" ssid = "44">Expansion Operators The fully specified logical form y can contain constants relating to multiple words in x. It can also use multiple constants to represent the meaning of a single word.</S>
			<S sid ="126" ssid = "45">For example, Freebase does not contain a relation representing the concept ‘daughter’, instead using two relations representing ‘female’ and ‘child’.</S>
			<S sid ="127" ssid = "46">The expansion operator in Figure 4c allows a single predicate to be split into a pair of conjoined predicates sharing an argument variable.</S>
			<S sid ="128" ssid = "47">For example, in Figure 1, the constant for ‘dedicate’ is split in two to match its representation in Freebase.</S>
			<S sid ="129" ssid = "48">Underspecified constants from l0 can be split once.</S>
			<S sid ="130" ssid = "49">For the experiments in Section 8, we constrain the expansion operator to work on event modifiers but the procedure generalizes to all predicates.</S>
			<S sid ="131" ssid = "50">5.2.2 Constant Matching To build an executable logical form y, all under- specified constants must be replaced with constantsfrom O. This is done through a sequence of con stant replacement operations, each of which replaces a single underspecified constant with a constant of the same type from O. Two example replacements are shown in Figure 3c.</S>
			<S sid ="132" ssid = "51">The output from the last replacement operation is a fully specified logical form.</S>
	</SECTION>
	<SECTION title="Building and Scoring Derivations. " number = "6">
			<S sid ="133" ssid = "1">This section introduces a dynamic program used to construct derivations and a linear scoring model.</S>
			<S sid ="134" ssid = "2">6.1 Building Derivations.</S>
			<S sid ="135" ssid = "3">The space of derivations is too large to explicitly enumerate.</S>
			<S sid ="136" ssid = "4">However, each logical form (both final and interim) can be constructed with many different derivations, and we only need to find the highest scoring one.</S>
			<S sid ="137" ssid = "5">This allows us to develop a simple dynamic program for our two-stage semantic parser.</S>
			<S sid ="138" ssid = "6">We use a CKY style chart parser to calculate the k-best logical forms output by parses of x. We then store each interim logical form generated by an operator in M once in a hyper-graph chart structure.</S>
			<S sid ="139" ssid = "7">The branching factor of this hypergraph is polynomial in the number of constants in l0 and linear in the size of O. Subsequently, there are too many possible logical forms to enumerate explicitly; we prune as follows.</S>
			<S sid ="140" ssid = "8">We allow the top N scoring on- tological matches for each original subexpression in l0 and remove matches that differ from score from the maximum scoring match by more than a threshold τ . When building derivations, we apply constant matching operators as soon as they are applicable to new underspecified constants created by collapses and expansions.</S>
			<S sid ="141" ssid = "9">This allows the scoring function used by the pruning strategy to take advantage of all features defined in Section 7.2.</S>
			<S sid ="142" ssid = "10">6.2 Ranking Derivations.</S>
			<S sid ="143" ssid = "11">Given feature vector φ and weight vector θ, the score Input: Q/A pairs {(xi , ai ) : i = 1 . . .</S>
			<S sid ="144" ssid = "12">n}; Knowledge baseK; Ontology O; Function GEN(x, O) that computes deriva tions of x; Function YIELD(d)that returns logical form yield of derivation d; Function EXEC(y, K) that calculates execution of y in K; Margin γ; Number of iterations T . Output: Linear model parameters θ.</S>
			<S sid ="145" ssid = "13">Algorithm: For t = 1 . . .</S>
			<S sid ="146" ssid = "14">T , i = 1 . . .</S>
			<S sid ="147" ssid = "15">n : C = {d : d ∈ GEN(xi , O); EXEC(YIELD(d), K) = ai } W = {d : d ∈ GEN(xi , O); EXEC(YIELD(d), K) /= ai } C ∗ = arg maxd∈C (φ(d)θ) W ∗ = {d : d ∈ W ; ∃c ∈ C ∗ s.t. φ(c)θ − φ(d)θ &lt; γ)} If |C ∗| &gt; 0 ∧ |W ∗| &gt; 0 : θ = θ + φ(c) φ(e) |C ∗ | c∈C ∗ |W ∗ | e∈W ∗ 1 1 of a derivation d = (Π, M ) is a linear function that decomposes over the parse tree Π and the individual ontology-matching steps o. SCORE(d) = φ(d)θ (1) = φ(Π)θ + )&apos; φ(o)θ o∈M The function PARSE(x, O) introduced as our goal in Section 2 returns the logical form associated with the highest scoring derivation of x: Figure 5: Parameter estimation from Q/A pairs.</S>
			<SUBSECTION>7.2 Features.</SUBSECTION>
			<S sid ="148" ssid = "16">The feature vector φ(d) introduced in Section 6.2 decomposes over each of the derivation steps in d. CCG Parse Features Each lexical item in Π has three indicator features.</S>
			<S sid ="149" ssid = "17">The first indicates the number of times each underspecified category is used.</S>
			<S sid ="150" ssid = "18">For example, the parse in Figure 3a uses the under- specified category N : λx.p(x) twice.</S>
			<S sid ="151" ssid = "19">The second feature indicates (word, category) pairings — e.g. PARSE(x, O) = arg max d∈GEN(x,O) (SCORE(d)) that N : λx.p(x) is paired with ‘library’ and ‘public’ once each in Figure 3a.</S>
			<S sid ="152" ssid = "20">The final lexical feature The features and learning algorithm used to estimate θ are defined in the next section.</S>
	</SECTION>
	<SECTION title="Learning. " number = "7">
			<S sid ="153" ssid = "1">This section describes an online learning algorithm for question-answering data, along with the domain- independent feature set.</S>
			<S sid ="154" ssid = "2">7.1 Learning Model Parameters.</S>
			<S sid ="155" ssid = "3">Our learning algorithm estimates the parameters θ from a set {(xi, ai) : i = 1 . . .</S>
			<S sid ="156" ssid = "4">n} of questions xi paired with answers ai from the knowledge base K. Each derivation d generated by the parser is associated with a fully specified logical form y = YIELD(d) that can be executed in K. A derivation d of xi is correct if EXEC(YIELD(d), K) = ai.</S>
			<S sid ="157" ssid = "5">We use a perceptron to estimate a weight vector θ that support a separation of γ between correct and incorrect answers.</S>
			<S sid ="158" ssid = "6">Figure 5 presents the learning algorithm.</S>
			<S sid ="159" ssid = "7">indicates (part-of-speech, category) pairings for all parts of speech associated with the word.</S>
			<S sid ="160" ssid = "8">Structural Features The structure matching operators (Section 5.2.1) in M generate new under- specified constants that define the types of constants in the output logical form y. These operators are scored using features that indicate the type of each complex-typed constant present in y and the identity of domain-independent functional constants in y. The logical form y generated in Figure 3 contains one complex typed constant with type (i, (e, t)) andno domain-independent functional constants.</S>
			<S sid ="161" ssid = "9">Struc tural features allow the model to adapt to different knowledge bases K. They allow it to determine, for example, whether a numeric quantity such as ‘population’ is likely to be explicitly listed in K or if it should be computed with the count function.</S>
			<S sid ="162" ssid = "10">Lexical Features Each constant replacement operator (Section 5.2.2) in M replaces an underspec ified constant cu with a constant cO from O. Theunderspecified constant cu is associated with the se quence of words w u used in the CCG lexical entries that introduced it in Π. We assume that each of the constants cO in O is associated with a stringlabel w O . This allows us to introduce five domain independent features that measure the similarity of w u and w O . The feature φnp(cu, cO ) signals the replacement of an entity-typed constant cu with entity cO that has label w u. For the second example in Figure 1 this feature indicates the replacement of the underspecified constant associated with the word ‘mozart’ with the Freebase entity mozart.</S>
			<S sid ="163" ssid = "11">Stem and synonymy features φstem(cu, cO ) and φsyn(cu, cO ) signal the indicates entities separated from a predicate by one join in y, such as mozart and dedicated to in Fig ure 1, that exist in the same relationship in K. If two predicates that share a variable in y do not share an argument in that position in K then the execution of y against K will fail.</S>
			<S sid ="164" ssid = "12">The predicate-predicate φpp(y, K) feature indicates pairs of predicates that share a variable in y but cannot occur in this relationship in K. For ex ample, since the subject of the Freebase property date of birth does not take arguments oftype location, φpp(y, K) will fire if y con tains the logical form λxλy.date of birth(x, y) ∧ location(x).Both the predicate-argument and predicate existence of words wu ∈ w u and wu ∈ w O that predicate features operate on subexpressions of y. share a stem or synonym respectively.</S>
			<S sid ="165" ssid = "13">Stems are computed with the Porter stemmer and synonyms are extracted from Wiktionary.</S>
			<S sid ="166" ssid = "14">A single Freebase specific feature φf p:stem(cu, cO ) indicates a word stem match between wu ∈ w u and the word fillingthe most specific position in w u under Freebase’s hi erarchical naming schema.</S>
			<S sid ="167" ssid = "15">A final feature φgl (cu, cO ) calculates the overlap between Wiktionary definitions for w u and w O . Let gl(w) be the Wiktionary definition for w. Then: We also define the execution features: φemp(y, K) to signal an empty answer for y in K; φ0(y, K) to sig nal a zero-valued answer created by counting over an empty set; and φ1(y, K) to signal a one-valued answer created by counting over a singleton set.</S>
			<S sid ="168" ssid = "16">As with the lexical cues, we use knowledge base features as soft constraints since it is possible for natural language queries to refer to concepts that do not exist in K. φgl (cu, cO ) = 2·|gl(wO )∩gl(wc )|</S>
	</SECTION>
	<SECTION title="Experimental. " number = "8">
			<S sid ="169" ssid = "1">Setup wu ∈w-u ;wO ∈w-O | w-O |·|w-u |·| gl(wO )|+|gl(wc )| Data We evaluate performance on the benchmark Domain-indepedent lexical features allow the model to reason about the meaning of unseen words.</S>
			<S sid ="170" ssid = "2">In small domains, however, the majority of word usages may be covered by training data.</S>
			<S sid ="171" ssid = "3">We make use of this fact in the GeoQuery domain with features φm(cu, cO ) that indicate the pairing of w u with cO . Knowledge Base Features Guided by the observation that we generally want to create queries ywhich have answers in knowledge base K, we de fine features to signal whether each operation could build a logical form y with an answer in K. If a predicate-argument relation in y does not exist in K, then the execution of y against K will not return an answer.</S>
			<S sid ="172" ssid = "4">Two features indicate whether predicate-argument relations in y exist in K. φdirect(y, K) indicates predicate-argument applications in y that exists in K. For example, if the appli cation of dedicated by to mozart in Figure 1 exists in Freebase, φdirect(y, K) will fire.</S>
			<S sid ="173" ssid = "5">φjoin(y, K) GeoQuery dataset (Zelle and Mooney, 1996), and a newly introduced Freebase Query (FQ) dataset (Cai and Yates, 2013a).</S>
			<S sid ="174" ssid = "6">FQ contains 917 questions labeled with logical form meaning representations for querying Freebase.</S>
			<S sid ="175" ssid = "7">We gathered question answer labels by executing the logical forms against Freebase, and manually correcting any inconsistencies.</S>
			<S sid ="176" ssid = "8">Freebase (Bollacker et al., 2008) is a large, collaboratively authored database containing almost 40 million entities and two billion facts, covering more than 100 domains.</S>
			<S sid ="177" ssid = "9">We filter Freebase to cover the domains contained in the FQ dataset resulting in a database containing 18 million entities, 2072 relations, 635 types, 135 million facts and 81 domains, including for example film, sports, and business.</S>
			<S sid ="178" ssid = "10">We use this schema to define our target domain, allowing for a wider variety of queries than could be encoded with the 635 collapsed relations previously used to label the FQ data.</S>
			<S sid ="179" ssid = "11">We report two different experiments on the FQ data: test results on the existing 642/275 train/test split and domain adaptation results where the data is split three ways, partitioning the topics so that the logical meaning expressions do not share any symbols across folds.</S>
			<S sid ="180" ssid = "12">We report on the standard 600/280 training/test split for GeoQuery.</S>
			<S sid ="181" ssid = "13">Parameter Initialization and Training We initialize weights for φnp and φdirect to 10, and weights for φstem and φjoin to 5.</S>
			<S sid ="182" ssid = "14">This promotes the use of entities and relations named in sentences.</S>
			<S sid ="183" ssid = "15">We initialize weights for φpp and φemp to -1 to favour logical forms that have an interpretation in the knowledge base K. All other feature weights are initialized to 0.</S>
			<S sid ="184" ssid = "16">We run the training algorithm for one it eration on the Freebase data, at which point performance on the development set had converged.</S>
			<S sid ="185" ssid = "17">This fast convergence is due to the very small number of matching parameters used (5 lexical features and 8 K features).</S>
			<S sid ="186" ssid = "18">For GeoQuery, we include the larger domain specific feature set introduced in Section 7.2 and train for 10 iterations.</S>
			<S sid ="187" ssid = "19">We set the pruning parameters from Section 6.1 as follows: k = 5 for Freebase, k = 30 for GeoQuery, N = 50, τ = 10.</S>
			<S sid ="188" ssid = "20">Comparison Systems We compare performance to state-of-the-art systems in both domains.</S>
			<S sid ="189" ssid = "21">On GeoQuery, we report results from DCS (Liang et al., 2011) without special initialization (DCS) and with an small hand-engineered lexicon (DCS with L+).</S>
			<S sid ="190" ssid = "22">We also include results for the FUBL algorithm (Kwiatkowski et al., 2011), the CCG learning approach that is most closely related to our work.</S>
			<S sid ="191" ssid = "23">On FQ, we compare to Cai and Yates (2013a) (CY13).</S>
			<S sid ="192" ssid = "24">Evaluation We evaluate by comparing the produced question answers to the labeled ones, with no partial credit.</S>
			<S sid ="193" ssid = "25">Because the parser can fail to produce a complete query, we report recall, the percent of total questions answered correctly, and precision, the percentage of produced queries with correct answers.</S>
			<S sid ="194" ssid = "26">CY13 and FUBL report fully correct logical forms, which is a close proxy to our numbers.</S>
	</SECTION>
	<SECTION title="Results. " number = "9">
			<S sid ="195" ssid = "1">Quantitative Analysis For FQ, we report results on the test set and in the cross-domain setting, as defined in Section 8.</S>
			<S sid ="196" ssid = "2">Figure 6 shows both results.</S>
			<S sid ="197" ssid = "3">Our Setting System R P F1 Test Our Approach CY13 68.0 76.7 72.1 59 67 63 Cross Domain Our Approach CY13 67.9 73.5 71.5 60 69 65 Figure 6: Results on the FQ dataset.</S>
			<S sid ="198" ssid = "4">R P F1 All Features Without Wiktionary Without K Features 68.6 72.0 70.3 67.2 70.7 68.9 61.8 62.5 62.1 Figure 7: Ablation Results approach outperforms the previous state of the art, achieving a nine point improvement in test recall, while not requiring labeled logical forms in training.</S>
			<S sid ="199" ssid = "5">We also see consistent improvements on both scenarios, indicating that our approach is generalizing well across topic domains.</S>
			<S sid ="200" ssid = "6">The learned ontology matching model is able to reason about previously unseen ontological subdomains as well as if it was provided explicit, in-domain training data.</S>
			<S sid ="201" ssid = "7">We also performed feature ablations with 5-fold cross validation on the training set, as seen in Figure 7.</S>
			<S sid ="202" ssid = "8">Both the Wiktionary features and knowledge base features were helpful.</S>
			<S sid ="203" ssid = "9">Without the Wiktionary features, the model must rely on word stem matches which, in combination with graph constraints, can still recover many of the correct queries.</S>
			<S sid ="204" ssid = "10">However, without the knowledge base constraints, the model produces many queries that return empty answers, and significantly impacts overall performance.</S>
			<S sid ="205" ssid = "11">For GeoQuery, we report test results in Figure 8.</S>
			<S sid ="206" ssid = "12">Our approach outperforms the most closely related CCG model (FUBL) and DCS without initialization, but falls short of DCS with a small hand-built initial lexicon.</S>
			<S sid ="207" ssid = "13">Given the small size of the test set, it is fair to say that all algorithms are performing at state-of- the-art levels.</S>
			<S sid ="208" ssid = "14">This result demonstrates that our ap Recall FUBL DCS DCS with L+ Our Approach 88.6 87.9 91.1 89.0 Figure 8: GeoQuery Results Parse Failures (20%) 1.</S>
			<S sid ="209" ssid = "15">Query.</S>
			<S sid ="210" ssid = "16">in what year did motorola have the most revenue 2 Query.</S>
			<S sid ="211" ssid = "17">on how many projects was james walker a design engineer Structural Matching Failure (30%) Query how many children does jerry seinfeld have 3.</S>
			<S sid ="212" ssid = "18">Labeled λx.eq(x, count(λy.people.person.children(jerry seinfeld, y))).</S>
			<S sid ="213" ssid = "19">Predicted λx.eq(x, count(λy.people.person.children(y, jerry seinfeld))) Incomplete Database (10%) Query 4.</S>
			<S sid ="214" ssid = "20">Labeled.</S>
			<S sid ="215" ssid = "21">Predicted how many countries participated in the 2006 winter olympics λy.olympics.olympic games.number of countries(2006 winter olympics, y) λy.eq(y, count(λy.olympic participation country.olympics participated in(x, 2006 winter olympics))) Query 5.</S>
			<S sid ="216" ssid = "22">Labeled.</S>
			<S sid ="217" ssid = "23">Predicted what programming languages were used for aol instant messenger λy.computer.software.languages used(aol instant messenger, y) λy.computer.software.languages used(aol instant messenger, y) ∧ computer.programming language(y) Lexical Ambiguity (35%) Query when was the frida kahlo exhibit at the philadelphia art museum Labeled λy.∃x.exhibition run.exhibition(x, frida kahlo)∧ 6.</S>
			<S sid ="218" ssid = "24">exhibition venue.exhibitions at(philadelphia art museum, x) ∧ exhibition run.opened on(x, y) Predicted λy.∃x.exhibition run.exhibition(x, frida kahlo)∧ exhibition venue.exhibitions at(philadelphia art museum, x) ∧ exhibition run.closed on(x, y) Figure 9: Example error cases, with associated frequencies, illustrating system output and gold standard references.</S>
			<S sid ="219" ssid = "25">5% of the cases were miscellaneous or otherwise difficult to categorize.</S>
			<S sid ="220" ssid = "26">proach can handle the high degree of lexical ambiguity in the FQ data, without sacrificing the ability to understanding the rich, compositional phenomena that are common in the GeoQuery data.</S>
			<S sid ="221" ssid = "27">Qualitative Analysis We also did a qualitative analysis of errors in the FQ domain.</S>
			<S sid ="222" ssid = "28">The model learns to correctly produce complex forms that join multiple relations.</S>
			<S sid ="223" ssid = "29">However, there are a number of systematic error cases, grouped into four categories as seen in Figure 9.</S>
			<S sid ="224" ssid = "30">The first and second examples show parse failures, where the underspecified CCG grammar did not have sufficient coverage.</S>
			<S sid ="225" ssid = "31">The third shows a failed structural match, where all of the correct logical constants are selected, but the argument order is reversed for one of the literals.</S>
			<S sid ="226" ssid = "32">The fourth and fifth examples demonstrate a failures due to database incompleteness.</S>
			<S sid ="227" ssid = "33">In both cases, the predicted queries would have returned the same answers as the gold- truth ones if Freebase contained all of the required facts.</S>
			<S sid ="228" ssid = "34">Developing models that are robust to database incompleteness is a challenging problem for future work.</S>
			<S sid ="229" ssid = "35">Finally, the last example demonstrates a lexical ambiguity, where the system was unable to determine if the query should include the opening date or the closing date for the exhibit.</S>
	</SECTION>
	<SECTION title="Conclusion. " number = "10">
			<S sid ="230" ssid = "1">We considered the problem of learning domain- independent semantic parsers, with application to QA against large knowledge bases.</S>
			<S sid ="231" ssid = "2">We introduced a new approach for learning a two-stage semantic parser that enables scalable, on-the-fly ontological matching.</S>
			<S sid ="232" ssid = "3">Experiments demonstrated state-of-the- art performance on benchmark datasets, including effective generalization to previously unseen words.</S>
			<S sid ="233" ssid = "4">We would like to investigate more nuanced notions of semantic correctness, for example to support many of the essentially equivalent meaning representations we found in the error analysis.</S>
			<S sid ="234" ssid = "5">Although we focused exclusively on QA applications, the general two-stage analysis approach should allow for the reuse of learned grammars across a number of different domains, including robotics or dialog applications, where data is more challenging to gather.</S>
	</SECTION>
	<SECTION title="Acknowledgements. " number = "11">
			<S sid ="235" ssid = "1">This research was supported in part by DARPA under the DEFT program through the AFRL (FA8750 132-0019) and the CSSG (N11AP20020), the ARO (W911NF12-10197), the NSF (IIS1115966), and by a gift from Google.</S>
			<S sid ="236" ssid = "2">The authors thank Anthony Fader, Nicholas FitzGerald, Adrienne Wang, Daniel Weld, and the anonymous reviewers for their helpful comments and feedback.</S>
	</SECTION>
</PAPER>
