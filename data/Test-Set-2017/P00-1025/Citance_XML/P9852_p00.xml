<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">This paper presents our efforts at developing an Indonesian morphological analyser that pro­ vides a detailed analysis of the rich affixation process 1• We model Indonesian morphology us­ ing a two-level morphology approach, decom­ posing the process into a set of morphotactic and morphophonemic rules.</S>
		<S sid ="2" ssid = "2">These rules are modelled as a network of finite state transduc­ ers and implemented using xfst and lexc.</S>
		<S sid ="3" ssid = "3">Our approach is able to handle reduplication, a non-concatenative morphological process.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="4" ssid = "4">Morphology is the study of the way that words are built up from smaller units called morphemes, the minimal meaning-bearing units in a language (Ju­ rafsky, 2000).</S>
			<S sid ="5" ssid = "5">For example, the English word kind consists of a single morpheme (the root word kind) whilst the word players consists of three mor­ phemes: play, -er and -s.</S>
			<S sid ="6" ssid = "6">The morphemes kind and play can stand alone as words, while affixes -er and -s must appear bound to another morpheme.</S>
			<S sid ="7" ssid = "7">By applying a set of morphological rules, we can produce not just morphemes but also other in­ formation relating to the words; for example, the grammatical category of the whole word as well as the subcategorisation frame of the word if it is a verb.</S>
			<S sid ="8" ssid = "8">This process is called morphological analysis.</S>
			<S sid ="9" ssid = "9">In this respect, the value of a morphological ana­ lyser would be twofold: from a theoretical (linguis­ tic) viewpoint, it is a very useful tool for linguistic modelling and for testing certain analyses.</S>
			<S sid ="10" ssid = "10">On the 1 This research is part of a collaborative research project.</S>
			<S sid ="11" ssid = "11">funded by ARC Discovery Grant DP0877595.</S>
			<S sid ="12" ssid = "12">other hand, from a practical viewpoint, it supports many applications, e.g. information retrieval, search engines, and machine translation, among others.</S>
			<S sid ="13" ssid = "13">There is currently some interest in developing morphological tools for the Indonesian language.</S>
			<S sid ="14" ssid = "14">In previous work, Siregar (1995) and Adriani et al.</S>
			<S sid ="15" ssid = "15">(2007) discuss the development of Indonesian stemmers that recover a root from an affixed word, implemented procedurally.</S>
			<S sid ="16" ssid = "16">However, stemmers are of limited use as they do not provide any more lin­ guistic information beyond the stem.</S>
			<S sid ="17" ssid = "17">Hartono (2002) presents an initial version of a morphologi­ cal analyser developed with PC-K.IMMO, but un­ fortunately, it does not handle reduplication, a key aspect of Indonesian morphology.</S>
			<S sid ="18" ssid = "18">The morpho­ logical analyser that we are developing and that we describe here is designed to be able to handle the rich semantic, lexical and grammatical information associated with words and word formation in NLP applications.</S>
			<S sid ="19" ssid = "19">In Section 2, we first discuss Indonesian mor­ phology, followed by a brief explanation of two­ level morphology in Section 3.</S>
			<S sid ="20" ssid = "20">Sections 4 and 5 present our work in applying two-level morphol­ ogy for the Indonesian language.</S>
			<S sid ="21" ssid = "21">Finally, Section 6 presents the results of some evaluations we carried out on our developed analyser.</S>
	</SECTION>
	<SECTION title="Indonesian Language Morphology. " number = "2">
			<S sid ="22" ssid = "1">Indonesian is a variety of Malay, which belongs to the Austronesian language family (Gordon, 2005; Sneddon, 2003).</S>
			<S sid ="23" ssid = "2">It is spoken by about 190 million people in Indonesia and other parts of the world2• 2 According to Biro Pusat Statistik, as of 2004..</S>
			<S sid ="24" ssid = "3">Words in Indonesian are built from their roots by means of a variety of morphological operations including compounding, affixation, and reduplica­ tion.</S>
			<S sid ="25" ssid = "4">Indonesian concatenative morphology regu­ lates how a stem and its affixes glue together, while a non-concatenative one combines mor­ phemes in more complex ways.</S>
			<S sid ="26" ssid = "5">Affixes in Indonesian can be classified as four categories (Alwi et al., 2003).</S>
			<S sid ="27" ssid = "6">Prefixes precede the base form, i.e. meN-, di-, peN-, per-, ke-, and ter-.</S>
			<S sid ="28" ssid = "7">Suffixes follow the base form, i.e. -kan, -an, and -i.</S>
			<S sid ="29" ssid = "8">Infixes are inside the base form, i.e. -el-, -em-, and -er-.</S>
			<S sid ="30" ssid = "9">Circumfixes wrap around the base form.</S>
			<S sid ="31" ssid = "10">While circumfixes formally are combinations of allowed prefixes and suffixes, they have to be treated as discontinuous units for semantic and grammatical reasons.</S>
			<S sid ="32" ssid = "11">In our Indonesian morpho­ logical analyser, we have handled prefixes, suf­ fixes, and circumfixes.</S>
			<S sid ="33" ssid = "12">Indonesian non-concatenative morphology re­ fers to reduplicated morpheme forms.</S>
			<S sid ="34" ssid = "13">Reduplicated words based on morpheme regularity are grouped into full reduplication (e.g., the word bukubuku is derived from the stem buku) and partial reduplica­ tion of different kinds.</S>
			<S sid ="35" ssid = "14">The latter includes redupli­ cated stems with affixes (e.g. the word buah­ buahan is derived from stem buah, bertingkat­ tingkat is derived from stem bertingkat) and vari­ ous (often rather irregular) reduplications (e.g. sa­ yurmayur is derived from sayur).</S>
			<S sid ="36" ssid = "15">Indonesian affixation and reduplication are illus­ trated in the following example.</S>
			<S sid ="37" ssid = "16">From the stem pukul, we can derive words like pemukul (by con­ catenating the prefix peN-), memukuli (by concate­ nating the circumfix meN-i), and pukulanpukulan (by first concatenating the suffix -an, then apply­ ing full reduplication).</S>
			<S sid ="38" ssid = "17">Other examples include dipukul, pemukulan, and berpukulpukulan.</S>
			<S sid ="39" ssid = "18">All kinds of regular word-formation with or without reduplication are recognized in this re­ search.</S>
			<S sid ="40" ssid = "19">Morphology generally makes a distinction be­ tween inflectional and derivational processes.</S>
			<S sid ="41" ssid = "20">In the previous example, the formation of memukuli appears to be &apos;inflectional&apos; as the formation does not change the category of the stem, and the forma­ tion of pemukul and pukulanpukulan is deriva­ tional because the derived words are nouns while the stem pukul is a verb.</S>
			<S sid ="42" ssid = "21">However, the distinction between inflection and derivation, particularly in Indonesian, is not always clear cut.</S>
			<S sid ="43" ssid = "22">The formation of verbs such as memukuli from pukul is arguably derivational in nature because the new words have quite different lexical properties, even though both the new verbs and the stems are of the same cate­ gory (i.e. &apos;verb&apos;).</S>
	</SECTION>
	<SECTION title="Two-Level Morphology. " number = "3">
			<S sid ="44" ssid = "1">A morphological analyser can be used to process a list of morphemes in a lexicon to yield fully derived words.</S>
			<S sid ="45" ssid = "2">In the other direction, it can be used to identify affixes and roots from derived words.</S>
			<S sid ="46" ssid = "3">For example, taking the word membaca as input, an Indonesian morphological analyser should produce the string baca+Verb+AV, indicating that the active verb membaca is derived from baca.</S>
			<S sid ="47" ssid = "4">However, it is difficult to accomplish morpho­ logical analysis in one step only.</S>
			<S sid ="48" ssid = "5">In Indonesian, affixation does not consist of just fusing the affix with the stem.</S>
			<S sid ="49" ssid = "6">Modification of phonemes may be necessary, e.g. the concatenation of meN+putar will produce word memutar, while the result of meN+siram is menyiram.</S>
			<S sid ="50" ssid = "7">To solve this problem, we adopt a two-level morphology model.</S>
			<S sid ="51" ssid = "8">Two-level morphology is based on finite-state transducers (Koskenniemi, 1983).</S>
			<S sid ="52" ssid = "9">In practice, this model has been success­ fully applied to several languages such as English, Finnish, Japanese, Russian, and French.</S>
			<S sid ="53" ssid = "10">It is not only useful to account for various concatenative morphologies, but is also able to handle non­ concatenative processes, as has been developed in Malagasy tokenization and morphological analysis (Dalrymple et al., 2006).</S>
	</SECTION>
	<SECTION title="Design. " number = "4">
			<S sid ="54" ssid = "1">Our design for an Indonesian morphological ana­ lyser is divided into two components: morphotac­ tic rules that explain which classes of morphemes can follow other classes of morphemes inside a word, and morphophonemic rules which model the changes that occur in a word.</S>
			<S sid ="55" ssid = "2">The rules in each component are typically applied in parallel.</S>
			<S sid ="56" ssid = "3">Addi­ tionally, these rules are combined with a lexicon of stems in order to complete the full design.</S>
			<S sid ="57" ssid = "4">A word, in order to be analysed, will follow the path lexicon -7 morphotactic rules -7 morphopho­ nemic rules-7 surface.</S>
			<S sid ="58" ssid = "5">Before the result of the morphological analyser appears at the surface, it will follow the lexicon path to determine the actual morpheme of that word.</S>
			<S sid ="59" ssid = "6">After moving from the lexicon, that word will be analysed by morphotac­ tic and morphophonemic rules.</S>
			<S sid ="60" ssid = "7">Only after finishing the process in morphotactic and morphophonemic rules, will the result of morphological analyser for that word be delivered.</S>
			<S sid ="61" ssid = "8">The explanation below will explore, in a little more depth, the design of lexicon, morphotactic rules, and morphophonemic rules.</S>
			<S sid ="62" ssid = "9">4.1 Lexicon design.</S>
			<S sid ="63" ssid = "10">Our lexicon equates to a set of Indonesian stem words.</S>
			<S sid ="64" ssid = "11">Affixes are not stored in the lexicon as they are already accounted for by the morphotactic rules.</S>
			<S sid ="65" ssid = "12">For our initial design, our lexicon is divided into four classes, i.e. verbs, nouns, adjectives, and &apos;etc&apos;, which includes all other stems, e.g. pronouns, ad­ verbs, numbers, and particles.</S>
			<S sid ="66" ssid = "13">Clustering these word classes together is certainly a large oversim­ plification, and one which we hope to address in future revisions.</S>
			<S sid ="67" ssid = "14">4.2 Tag design.</S>
			<S sid ="68" ssid = "15">The design of tags has become very important in the development of morphological analysers, since the tags will deliver linguistic information that oc­ curs on a word being analysed.</S>
			<S sid ="69" ssid = "16">In our research, the tags to be designed can be divided into normal tags and special tags.</S>
			<S sid ="70" ssid = "17">Normal tags can be output by the morphotactics component without any circumstances, whilst special tags only occur if the involved stems are associated with specific markers in the lexicon.</S>
			<S sid ="71" ssid = "18">The normal tags are +VERB, +NoUN, +ADJ, +BAREVERB, +BARENoUN, +BAREADJ, +BAREETc, +AV, +PASS, +UV, and +REDUP, whilst the special tags are +CAus_KAN, +APPL_KAN, +CAUS_I,+APPL_I,+AcTOR,+INS . Tags like +VERB, +NoUN, and +ADJ give the part of speech (POS) information for fully inflected words, whereas +BAREVERB, +BARENoUN, +BAREADJ, and +BAREETc give the POS information for stems.</S>
			<S sid ="72" ssid = "19">Other tags provide important linguistic informa­ tion, such as voice, a grammatical category playing a central role in Indonesian syntax, e.g. +AV, which indicates active voice, +PASS, which indicates pas­ sive voice, and +UV, which is reserved for under­ goer voice.</S>
			<S sid ="73" ssid = "20">Furthermore, +REouP is a tag indicating redupli­ cation.</S>
			<S sid ="74" ssid = "21">+CAUS_KAN, +CAUS_I, +APPL_KAN, and +APPL_I show whether words are causative or applicative with respect to their suffixes.</S>
			<S sid ="75" ssid = "22">The last two tags (+AcToR and +INsTRUMENT) indicate either it is an ac­ tor or an instrument that is being brought with the construction of that word.</S>
			<S sid ="76" ssid = "23">4.3 Morphotactic rules.</S>
			<S sid ="77" ssid = "24">In designing a morphological analyser, morphotac­ tic rules are crucial to model how two or more morphemes can be merged.</S>
			<S sid ="78" ssid = "25">Based on (Alwi et al., 2003), the morphotactic rules for Indonesian can be classified into 13 classes.</S>
			<S sid ="79" ssid = "26">Ten of these classes are determined based on which suffixes are merged with the stem, while the other three are reduplication cases.</S>
			<S sid ="80" ssid = "27">The first ten classes can be identified as concatenative mor­ phology, while the other three are nonconcatena­ tive morphology.</S>
			<S sid ="81" ssid = "28">In our design, the ten classes that belong to con­ catenative morphology are the morphotactic rules for the prefixes meN-, peN-, di-, per-, ber-, ter-, and ke-, and the morphotactic rules for the suffixes -an, -kan, and -i.</S>
			<S sid ="82" ssid = "29">Some example cases that belong to these 10 classes are as follows: • meN+ stem(verb, noun, adjective or etc)+ kan 7 Verb.</S>
			<S sid ="83" ssid = "30">Example: membersihkan.</S>
			<S sid ="84" ssid = "31">(meN+bersih+kan).</S>
			<S sid ="85" ssid = "32">In this example, the word bersih is an adjective.</S>
			<S sid ="86" ssid = "33">After merging with meN-kan, the resulting word is a verb.</S>
			<S sid ="87" ssid = "34">• peN+ ber + stem(verb, noun, adjective or etc) + an 7 Noun.</S>
			<S sid ="88" ssid = "35">Example: pembelajaran (peN+ber+ajar+an).</S>
			<S sid ="89" ssid = "36">In this example, the word ajar is a verb.</S>
			<S sid ="90" ssid = "37">After merging with peN-ber-an, the resulting word is a noun.</S>
			<S sid ="91" ssid = "38">• ke + ber + stem(verb, noun, adjective or etc)+ an 7 Noun.</S>
			<S sid ="92" ssid = "39">Example: keberhasilan (ke+ber+hasil+an).</S>
			<S sid ="93" ssid = "40">In this example, the word hasil is a noun.</S>
			<S sid ="94" ssid = "41">After merging with keber-an, the resulting word is also a noun.</S>
			<S sid ="95" ssid = "42">• stem(verb, noun or adjective)+ i 7 Verb.</S>
			<S sid ="96" ssid = "43">Ex­ ample: terangi (terang+i).</S>
			<S sid ="97" ssid = "44">In this example, the word terang is an adjective.</S>
			<S sid ="98" ssid = "45">After merging with -i, the resulting word is a verb.</S>
			<S sid ="99" ssid = "46">The last three classes, which belong to the category of nonconcatenative morphology, are the morpho­ tactic rules for full reduplication, partial reduplica­ tion, and affixed reduplication.</S>
			<S sid ="100" ssid = "47">Some example cases that belong to these three classes are as fol­ lows: • Full reduplication without affixation.</S>
			<S sid ="101" ssid = "48">Example: bukubuku.</S>
			<S sid ="102" ssid = "49">In this example, the word buku­ buku, which is a noun, is generated from the word buku, which is also a noun.</S>
			<S sid ="103" ssid = "50">• Full reduplication with ke-an.</S>
			<S sid ="104" ssid = "51">This case has the following rule: reduplication of (ke+stem (bare verb, adjective or etc)+an) 7 Noun.</S>
			<S sid ="105" ssid = "52">Example: kekayaankekayaan (reduplication of ke+kaya+an).</S>
			<S sid ="106" ssid = "53">In this example, the word kaya is an adjective.</S>
			<S sid ="107" ssid = "54">After the morphological proc­ ess, the resulting word is a noun.</S>
			<S sid ="108" ssid = "55">• Partial reduplication with ber-.</S>
			<S sid ="109" ssid = "56">This case has the following rule: ber+ reduplicated stem (bare verb) 7 Verb.</S>
			<S sid ="110" ssid = "57">Example: berlarilari (ber+larilari).</S>
			<S sid ="111" ssid = "58">In this example, the word lari is a verb.</S>
			<S sid ="112" ssid = "59">After the morphological process, the resulting word is also a verb.</S>
			<S sid ="113" ssid = "60">• Affixed reduplication with meN-.</S>
			<S sid ="114" ssid = "61">This case has the following rule: stem (bare verb) +meN+stem (bare verb) 7 Verb.</S>
			<S sid ="115" ssid = "62">Example: tanammenanam (tanam-meN+tanam).</S>
			<S sid ="116" ssid = "63">In this example, the word tanam is a verb.</S>
			<S sid ="117" ssid = "64">After the process, the resulting word is also a verb.</S>
			<S sid ="118" ssid = "65">During the stage of morphotactic rules, there are several steps that must be followed in order to complete the process.</S>
			<S sid ="119" ssid = "66">Those steps include the addi­ tion of prefixes and preprefixes, the addition of stems and part-of-speech, the addition of suffixes, and the final processing of additional tags.</S>
			<S sid ="120" ssid = "67">After finishing all of these steps, the process moves on to the morphophonemic process.</S>
			<S sid ="121" ssid = "68">4.4 Morphophonemic rules.</S>
			<S sid ="122" ssid = "69">All the rules that define how two or more mor­ phemes can merge have been designed in morpho­ tactic rules.</S>
			<S sid ="123" ssid = "70">However, the merging process is still not completed; hence we still have to define what changes have to be made after these morphemes merge.</S>
			<S sid ="124" ssid = "71">For these issues, we define morphophone­ mic rules that defme the phonetic changes that oc­ cur.</S>
			<S sid ="125" ssid = "72">In Indonesian, these rules can generally be di­ vided into two groups.</S>
			<S sid ="126" ssid = "73">The first group consists of four rules that model the phonetic changes in stems, whereas the second group consists of seven rules that model the phonetic changes in affixes.</S>
			<S sid ="127" ssid = "74">Based on (Alwi et al., 2003), the four rules in the first group are: • /k/ replacement with /ng/ if the word starts with meN- or peN-.</S>
			<S sid ="128" ssid = "75">Example: meN+kantuk 7 mengantuk.</S>
			<S sid ="129" ssid = "76">• Is/ replacement with /ny/ if the word starts with meN- or peN-.</S>
			<S sid ="130" ssid = "77">Example: peN+sebaran 7 pen­ yebaran.</S>
			<S sid ="131" ssid = "78">• /pi replacement with lm/ if the word starts with meN- or peN-.</S>
			<S sid ="132" ssid = "79">Example: peN+pakai 7 pe­ makai.</S>
			<S sid ="133" ssid = "80">• It/ replacement with In/ if the word starts with meN- or peN-.</S>
			<S sid ="134" ssid = "81">Example: meN+tertawakan 7 menertawakan.</S>
			<S sid ="135" ssid = "82">Note that the rules above only change the stem­ initial segment.</S>
			<S sid ="136" ssid = "83">To complete the replacement processes, the following seven rules from the sec­ ond group are needed to get the correct prefix forms: • IN/ deletion if meN- is followed by Ill, /m/, In/, lr/, ly/, lw/, It/, Is/, /pi, /k/ or if there is peN­ followed by Ill, /m/, In/, /r/, /d/, /w/, It/, Is/, /pi, /k/.</S>
			<S sid ="137" ssid = "84">Example: meN+lukis 7 melukis.</S>
			<S sid ="138" ssid = "85">• /r/ deletion if there is ber-, ter-, or per- fol­ lowed by lr/ or the word that its first syllable ended with /er/.</S>
			<S sid ="139" ssid = "86">Example: ber+runding 7 berunding.</S>
			<S sid ="140" ssid = "87">• IN/ replacement with In/ if there is meN- fol­ lowed by /d/, lei, /j/, /sy/ or there is peN- fol­ lowed by /d/, lei, /j/.</S>
			<S sid ="141" ssid = "88">Example: peN+jual 7 penjual.</S>
			<S sid ="142" ssid = "89">• IN/ replacement with /m/ if there is meN- or peN- followed by /b/, /fl.</S>
			<S sid ="143" ssid = "90">Example: peN+buru 7 pemburu.</S>
			<S sid ="144" ssid = "91">• IN/ replacement with /nge/ if there is meN- fol­ lowed by a word that has only one syllable.</S>
			<S sid ="145" ssid = "92">Example: meN+rem 7 mengerem.</S>
			<S sid ="146" ssid = "93">• IN/ replacement with Ill if there is peN- fol­ lowed by the word ajar.</S>
			<S sid ="147" ssid = "94">Example: peN+ajar 7 pelajar.</S>
			<S sid ="148" ssid = "95">• /r/ replacement with Ill if there is ber- followed by the word ajar.</S>
			<S sid ="149" ssid = "96">Example: ber+ajar 7 bela­ jar.</S>
			<S sid ="150" ssid = "97">After all sub-processes invoked by the rules in the frrst group and the second group are parallel ized, then the whole morphophonemic process is finished.</S>
			<S sid ="151" ssid = "98">The design of morphophonemic rules for redu­ plication is very much the same as the one in af­ fixation, since basically the morphophonemic process in reduplication occurs in the affixation part of reduplication.</S>
			<S sid ="152" ssid = "99">However, several rules, in particular those that model morphophonemic processes where both af­ fix and stem undergo changes, had to be revised to account for their behaviour when applied to redu­ plicated forms.</S>
			<S sid ="153" ssid = "100">For example, the morphophonemic rules &apos;/k/ replacement with lng/&apos; and &apos;IN/ deletion&apos;, which work in tandem, were originally defmed as &apos;/k/ deletion&apos; and &apos;IN/ replacement with /ng/&apos; . However, this approach would not have worked for cases involving reduplication.</S>
			<S sid ="154" ssid = "101">For example, the word mengotakngotakkan will not be analysed properly if the morphological analyser uses the rules &apos;/k/ deletion&apos; and &apos;IN/ replacement with /ng/&apos;.</S>
			<S sid ="155" ssid = "102">The word mengotakngotakkan is generated from the stem kotak that is modified with affixed redu­ plication meN-kan. If &apos;/k/ deletion&apos; and &apos;IN/ re­ placement with /ng/&apos; are being used, the word will become mengotakotakkan which is not valid.</S>
			<S sid ="156" ssid = "103">This is why, for the sake of reduplication, the rule is changed to &apos;/k/ replacement with /ng/&apos; that is paral­ lelized with &apos;IN/ deletion&apos;.</S>
			<S sid ="157" ssid = "104">Consequently, mengo­ takngotakkan can be properly generated.</S>
	</SECTION>
	<SECTION title="Implementation. " number = "5">
			<S sid ="158" ssid = "1">This Indonesian morphological analyser is imple­ mented in xfst and lexc (Beesley &amp; Karttunen, 2003).</S>
			<S sid ="159" ssid = "2">The morphotactic rules are implemented in xfst while morphophonemic rules are imple­ mented in lexc.</S>
			<S sid ="160" ssid = "3">5.1 Morphotactic rules implementation.</S>
			<S sid ="161" ssid = "4">The morphotactic rules can be illustrated as the fmite-state automata shown in Figure 1.</S>
			<S sid ="162" ssid = "5">Valid In­ donesian words, i.e. those that are constructed through legal morphological processes, are ac­ cepted by the automata, whereas invalid words are rejected.</S>
			<S sid ="163" ssid = "6">Starting from the root, each state defmes the next possible state whilst emitting (or consuming) a certain symbol.</S>
			<S sid ="164" ssid = "7">In lexc, these states are called continuation classes.</S>
			<S sid ="165" ssid = "8">All continuation classes reachable from the root represent prefixes and pre­ prefixes.</S>
			<S sid ="166" ssid = "9">The distinction between the two is neces­ sary to encode the possible morphological varia­ tions that take two prefixes, e.g. memper-, diper-.</S>
			<S sid ="167" ssid = "10">From there, the next continuation class is the stem, where the root word is emitted or consumed.</S>
			<S sid ="168" ssid = "11">This is subsequently followed by several classes repre­ senting possible suffixes, but there are also Redupl and Redup2 classes that appear before and after the suffixes.</S>
			<S sid ="169" ssid = "12">Their function is to handle reduplication (Section 5.3).</S>
			<S sid ="170" ssid = "13">Lastly, the TagEmit class processes Suffix classes Figure 1.</S>
			<S sid ="171" ssid = "14">Illustration of Process Flow all tags not yet handled by preceding classes (Sec­ tion 4.2).</S>
			<S sid ="172" ssid = "15">Throughout this morphotactic process, we ex­ tensively employ flag diacritics, a crucial feature of lexc which approximates the power of feature structures, i.e. being able to specify certain con­ straints to ensure that only valid paths of the net­ work may be traversed.</S>
			<S sid ="173" ssid = "16">One benefit of this ap­ proach is the maintenance of a compact network representation.</S>
			<S sid ="174" ssid = "17">There are three flag diacritics used in our model: positive setting (@P.feat.val@), required test (@R . feat .val@), and disallow test (@D.feat.val@).</S>
			<S sid ="175" ssid = "18">Using these diacritics, we are able to stipulate values and constraints of certain aspects, which must be consistent throughout a path.</S>
			<S sid ="176" ssid = "19">For example, the prefix meN- may combine with the suffix -kan and -i, but not -an.</S>
			<S sid ="177" ssid = "20">We can repre­ sent this with a feature, e.g. PREF, which is set to meN at the appropriate (pre)prefix state (@P.PREF.meN@).</S>
			<S sid ="178" ssid = "21">Suitable tests are then added to the suffix states, e.g. if the current path went through the meN- prefix state, @R . PREF .meN@ stipulates that a suffix can be applied, whereas @D. PREF.</S>
			<S sid ="179" ssid = "22">meN@ prevents a suffix from being ap­ plied.</S>
			<S sid ="180" ssid = "23">To further exhibit the usage of flag diacritics in our morphological analyser, we provide an exam­ ple of analysing the word memukuli, which con­ sists of the prefix meN-, followed by the stem pu kul, and the suffix -i.</S>
			<S sid ="181" ssid = "24">Figure 2 shows the path through the network used to analyse this word.</S>
			<S sid ="182" ssid = "25">Starting from the root, the analyser parses the prefix meN- in memukuli and appropriately sets the flag diacritic for the feature PREF.</S>
			<S sid ="183" ssid = "26">This can be seen by the following lexc rule snippet: LEXICON PrefixMeN &lt;[0 .x. me &apos;&quot;&quot;N&quot;] &quot;@P.PREF.meN@&quot;&gt; Stems; The LEXICON PrefixMeN line defines the state in the network that represents the meN- prefix.</S>
			<S sid ="184" ssid = "27">The next line defmes a state transition where, by emit­ ting or consuming the meN- prefix, the analyser can proceed to the stems continuation class.</S>
			<S sid ="185" ssid = "28">Addi­ tionally, the PREF flag is set to meN.</S>
			<S sid ="186" ssid = "29">In reality, the PrefixMeN state has five other possible transitions, but they are not presented here.</S>
			<S sid ="187" ssid = "30">Subsequently, at the Stems state, the analyser positively sets the flag diacritic for the feature STEM with value verb.</S>
			<S sid ="188" ssid = "31">Various required and disal­ low test flags will be called at the Redupl, Suffix!, Redup2, and TagEmit stages.</S>
			<S sid ="189" ssid = "32">However, for now, we focus on the Suffix!</S>
			<S sid ="190" ssid = "33">state, detailed in the fol­ lowing lexc rule snippet: LEXICON Suffix!</S>
			<S sid ="191" ssid = "34">&lt;&quot;+Verb&quot;:i &quot;+AV&quot;:O &quot;@D.PREPREF@&quot; &quot;@D.REDUP@&quot; [&quot;@R.STEM.Vrb@&quot;I &quot;@R.STEM.Nom@&quot;I&quot;@R.STEM.Adj@&quot;] &quot;@R.PREF.meN@&quot; &quot;@P.SUFF.i@&quot;&gt; Redup2; Suffix classes Figure 2.</S>
			<S sid ="192" ssid = "35">The path for memukuli This rule represents a valid transition from the suffixi state to the Redup2 state by parsing the -i suffix and emitting the +VERB and +Av tags (&quot;+Verb&quot; :i &quot;+AV&quot; :o).</S>
			<S sid ="193" ssid = "36">Additionally, the diacritic tests &quot;@D . PREPREF@ &quot; and &quot; @D .REDUP@ &quot; stipulate that this transition can only be taken if the PREPREF and REDUP flags are not set, the disjunction [&quot;@R .STEM .Vrb@&quot;I&quot;@R .STEM .Nom@&quot;I&quot;@R .STEM .A dj@ &quot;1 states that the STEM flag must be either Vrb, Nom, or Adj, and the &quot;@R . PREF.meN@&quot; test requires that the PREF flag is set to meN.</S>
			<S sid ="194" ssid = "37">Finally, &quot;@ p .SUFF.</S>
			<S sid ="195" ssid = "38">i@ &quot; states that the SUFF flag is set to i. Should any of these tests fail, the transition cannot be taken.</S>
			<S sid ="196" ssid = "39">If no other alternative paths are available to reach the End state, the word is rejected.</S>
			<S sid ="197" ssid = "40">5.2 Reduplication Process.</S>
			<S sid ="198" ssid = "41">As discussed above in Sections 2 and 4, Indonesian morphology includes the non-concatenative proc­ ess of reduplication.</S>
			<S sid ="199" ssid = "42">Handling this with pure regu­ lar grammars as implemented by finite state auto­ mata is very difficult.</S>
			<S sid ="200" ssid = "43">Thus, we employ the com­ pile-replace feature in xfst (Beesley &amp; Karttunen, 2000).</S>
			<S sid ="201" ssid = "44">This feature allows the repetition of arbi­ trarily complex sublanguages by specifying the brackets &apos;&quot;&apos;[ &quot; and &quot;A 1 &quot; to mark the domain of re­ duplication.</S>
			<S sid ="202" ssid = "45">The right bracket is also augmented with A2 to indicate duplication; thus, the full anno­ tation is nA[&quot; and nA2A1&quot; . Given this network defmition, xfst compiles and post-processes these annotations to produce a new network where the appropriate reduplications have been carried out.</S>
			<S sid ="203" ssid = "46">For example, nA [bukuA2AJ&quot; would eventually be compiled to become bukubuku.</S>
			<S sid ="204" ssid = "47">Thus, the idea is to insert the &quot;A [ &quot; and &quot;A 2 A 1 &quot; annotations in the right places.</S>
			<S sid ="205" ssid = "48">Due to the various types of reduplication in Indonesian (see Section 2), the rules for reduplication can be found at the Re­ dup (pre)prefix state and the Redupl and Redup2 states.</S>
			<S sid ="206" ssid = "49">The Redup prefix state emits the opening &quot;A [ &quot; brackets and sets an appropriate flag as a reminder that the closing brackets are required.</S>
			<S sid ="207" ssid = "50">The Redupl state is responsible for closing partial and affixed reduplications, i.e. where the suffix is not included in the reduplication, whilst the Redup2 state is responsible for closing full reduplication, i.e. where the suffix is part of the reduplication process.</S>
			<S sid ="208" ssid = "51">Both Redupl and Redup2 states check for the value of the REDUP flag as set by the Redup pre­ fix state.</S>
			<S sid ="209" ssid = "52">5.3 Morphophonemic rules implementation.</S>
			<S sid ="210" ssid = "53">The full transducer composes the morphotactic and morphophonemic rules.</S>
			<S sid ="211" ssid = "54">As a result, the output of the morphotactic rules implementation serves as the input to the morphophonemic rules implemen­ tation.</S>
			<S sid ="212" ssid = "55">From the example in Section 5.1 regarding the implementation of morphotactic rules, it can be observed that the string me/\Npukuli has been pro­ duced.</S>
			<S sid ="213" ssid = "56">However, the morphological analysis proc­ ess is still incomplete since me/\Npukuli is not a valid word in Indonesian.</S>
			<S sid ="214" ssid = "57">In order to complete the process, the morphophonemic rules must be im­ plemented.</S>
			<S sid ="215" ssid = "58">Since the full transducer composes the morphotactic and morphophonemic rules, the word me/\Npukuli becomes the input for the morphopho­ nemic process.</S>
			<S sid ="216" ssid = "59">The implementation of morphophonemic rules differs slightly from the implementation of mor­ photactic rules.</S>
			<S sid ="217" ssid = "60">For morphotactic rules, there are several steps that can be illustrated as a flow of process.</S>
			<S sid ="218" ssid = "61">However, the implementation of morpho­ phonemic rules generally implies the rules itself.</S>
			<S sid ="219" ssid = "62">Each rule is defined as a replacement rule that will collaborate with other rules through composition or parallelization.</S>
			<S sid ="220" ssid = "63">All rules in Section 4.4 have been implemented.</S>
			<S sid ="221" ssid = "64">However, due to space constraints, we will only explain the implementation of rule &apos;RG4 &apos;, which encodes IN/ deletion parallelized with four pho­ netic stem changes: define RG4 %A N-&gt;OII [m el [p e] ]_&quot;lbrac es&quot;* [llml nl r l y lw l t l s l p lkJ &quot; t-&gt;n I I [m IPI e %AN &quot;lbra c es &quot;* _ &quot; p-&gt;m l l [m l pl e %&quot;&apos;N 11 1braces11 * _ u s-&gt;n y II [ml pJ e % AN &quot;lbraces&quot;* _&quot; k-&gt;n g II [ml pl e % AN 11 1braces11 * _; ! push define d RG4; This rule actually consists of five rules that are parallelized.</S>
			<S sid ="222" ssid = "65">The first rule is IN/ deletion, where the nasal symbol fAN/ is omitted if it is preceded by /mel or !pel and followed by either of the pho­ nemes Ill, /m/, In/, /r/, /y/, /w/, It/, Is/, /pi, or /k/.</S>
			<S sid ="223" ssid = "66">The next four rules are the phonetic stem changes, which apply to stem words preceded by the morpheme lme/\N/ or /pe/\N/ , and whose initial phoneme is one of It/, /pi, lr/, Is/ , or /k/.</S>
			<S sid ="224" ssid = "67">More spe­ cifically, the phoneme It/ will transform into In/, /pi will transform into /m/, Is/ will transform into /ny/, and finally the phoneme /k/ will transform into /ng/.</S>
			<S sid ="225" ssid = "68">All morphophonemic rules that implement the various processes are composed into one large rule, from which the morphophonemic transducer net­ work can be constructed.</S>
			<S sid ="226" ssid = "69">The morphophonemic rule that applies to the word me&apos;Npukuli used as an example in Section 5.1 would be the above &quot;IN!</S>
			<S sid ="227" ssid = "70">deletion parallelized with four phonetic stem changes&quot;, because the word me1&apos;Npukuli fulfils the requirements of that rule.</S>
			<S sid ="228" ssid = "71">As can be seen from the implementation, to get the &quot;IN!</S>
			<S sid ="229" ssid = "72">deletion process&quot; and &quot;/p/ replacement with /m/ process&quot; (&quot;/pi replacement with lm/ proc­ ess&quot; is one of those four phonetic rules), in that word there must appear the phoneme fAN/ preceded by /mel or !pel and followed by phoneme Ill, lm/, In/, /r/, !y/, !w/, It/, Is/, !pi, or !kl and it also must have the phoneme It/, /pi, /r/, Is/, or /k/ preceded by the morpheme /meAN/ or lpeANf.</S>
			<S sid ="230" ssid = "73">Since the word me&apos;Npukuli fulfils these requirements, fAN/ will be omitted and /p/ will transform into /m/ so that the word me&apos;Npukuli will transform into the word memukuli.</S>
			<S sid ="231" ssid = "74">With the word memukuli being gener­ ated, the process is finished and the word memu­ kuli is recognised as a valid word in Indonesian.</S>
	</SECTION>
	<SECTION title="Evaluation. " number = "6">
			<S sid ="232" ssid = "1">To assess our implemented system, we ran some test cases in the form of words extracted from an electronic version of the Kamus Besar Bahasa Indonesia 3 • We tested the implementations of the morphotactic and morphophonemic rules separately.</S>
			<S sid ="233" ssid = "2">To evaluate the ability of the analyser to both accept valid forms and reject invalid forms, the test cases included both valid and invalid morpheme combinations.</S>
			<S sid ="234" ssid = "3">Executing all of the test cases, we obtained the results shown in Table 1, which presents the results of morphotactic test cases, and Table 2, which presents the results of morphophonemic test cases.</S>
			<S sid ="235" ssid = "4">The &apos;Analysis&apos; column displays the results of test cases where the surface form of an Indonesian word was provided as input, and our system was tasked with parsing the morphological structure.</S>
			<S sid ="236" ssid = "5">For example, given the word memukul, our system should return pukul+VERB+Av.</S>
			<S sid ="237" ssid = "6">On the other hand, the &apos;Synthesis&apos; column concerns the opposite situation, i.e. test cases where the input is the string of morphological tags, and our system was tasked with generating the fully inflected form.</S>
			<S sid ="238" ssid = "7">3 http://www.pusatbahasa.diknas.go.id/kbbi R e s u l t An aly sis Sy nth esi s T o t a l 1.</S>
			<S sid ="239" ssid = "8">Co rre ct res ult 1 0 3 4 3 1 4 6 2 . S e v e r a l r e s u l t s , i n c l u d i n l ! c o r r e c t 4 6 1 0 6 1 5 2 3.</S>
			<S sid ="240" ssid = "9">Inc orr ect res ult 3 3 6 To tal 1 5 2 1 5 2 3 0 8 Table 1.</S>
			<S sid ="241" ssid = "10">Results of morphotactic test cases Table 2.</S>
			<S sid ="242" ssid = "11">Results ofmorphophoneimc test cases We classify the test case results into three cate­ gories.</S>
			<S sid ="243" ssid = "12">The first category indicates that our system returned exactly one correct analysis or synthesis for a valid test case, or does not produce anything for an invalid test case.</S>
			<S sid ="244" ssid = "13">The second category is that, when given a valid test case, the system produces several answers, one of which is the desired result.</S>
			<S sid ="245" ssid = "14">Finally, the last category is seen when the system fails to analyse or synthesize a valid test case, or incorrectly produces an answer for an invalid test case.</S>
			<S sid ="246" ssid = "15">From the tables, we can observe that the results for analysis are more accurate than for synthesis, where the system tends to produce more than one result.</S>
			<S sid ="247" ssid = "16">For example, our system correctly provides the single analysis for memukul.</S>
			<S sid ="248" ssid = "17">However, when trying to synthesize pukul+VERB+Av, it produces other alternatives, e.g. memukulkan, memperpukuli, mengepukulkan, etc. This suggests the need for a more refined set of morphological feature tags.</S>
	</SECTION>
	<SECTION title="Summary. " number = "7">
			<S sid ="249" ssid = "1">We have presented the design of an Indonesian morphological analyser that provides a detailed analysis of its rich affixation process using the two-level morphology approach, implemented us­ ing xfst and lexc.</S>
			<S sid ="250" ssid = "2">Our approach is able to handle reduplication, a non-concatenative morphological process.</S>
			<S sid ="251" ssid = "3">Our (not very rigorous) evaluation shows that the implementation is generally able to encode the rules of the various morphological processes.</S>
	</SECTION>
</PAPER>
