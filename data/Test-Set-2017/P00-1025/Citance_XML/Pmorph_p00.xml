<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">The theory of realizational morphology presented by Stump in his inﬂuential book Inflectional Morphology (2001) describes the derivation of inﬂected surface forms from underlying lexical forms by means of ordered blocks of realization rules.</S>
		<S sid ="2" ssid = "2">The theory presents a rich formalism for expressing generalizations about phenomena commonly found in the morphological systems of natural languages.</S>
		<S sid ="3" ssid = "3">This paper demonstrates that, in spite of the apparent complexity of Stump’s formalism, the system as a whole is no more powerful than a collection of regular relations.</S>
		<S sid ="4" ssid = "4">Consequently, a Stump-style description of the morphology of a particular language such as Lingala or Bulgarian can be compiled into a ﬁnite-state transducer that maps the underlying lexical representations directly into the corresponding surface forms or forms, and vice versa, yielding a single lexical transducer.</S>
		<S sid ="5" ssid = "5">For illustration we will present an explicit ﬁnite-state implementation of an analysis of Lingala based on Stump’s description and other sources.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="6" ssid = "6">Morphology is a domain of linguistics that studies the formation of words.</S>
			<S sid ="7" ssid = "7">It is traditional to distinguish between surface forms and their analyses, called lemmas.</S>
			<S sid ="8" ssid = "8">The lemma for a surface form such as the English word bigger typically consists of the traditional dictionary citation form of the word together with terms that convey the morphological properties of the particular form.</S>
			<S sid ="9" ssid = "9">For example, the lemma for bigger might be represented as big+Adj+Comp to indicate that bigger is the comparative form of the adjective big.</S>
			<S sid ="10" ssid = "10">Alternatively, the morphological properties might be encoded in terms of attribute-value pairs: Cat:Adj, Degr:Comp.</S>
			<S sid ="11" ssid = "11">There are two challenges in modeling natural-language morphology: 1.</S>
			<S sid ="12" ssid = "12">Morphotactics.</S>
			<S sid ="13" ssid = "13">Words are typically composed of smaller units: stems and aﬃxes that mustbe combined in a certain order.</S>
			<S sid ="14" ssid = "14">Most languages build words by concatena tion but some languages also exhibit non-concatenative processes such as interdigitation and reduplication [3].</S>
	</SECTION>
	<SECTION title="Morphological Alternations. " number = "2">
			<S sid ="15" ssid = "1">The shape of the components that make up the word often depends on their context.</S>
			<S sid ="16" ssid = "2">For example, the comparative degree of adjectives in English is expressed sometimes by -er, sometimes by -r, and the stem may also vary, as in bigger.</S>
			<S sid ="17" ssid = "3">Computational linguists generally take it for granted that the relation between the surface forms of a language and their corresponding lemmas can be described as a regular relation [4].</S>
			<S sid ="18" ssid = "4">If the relation is regular, it can be deﬁned using the metalanguage of regular expressions; and, with a suitable compiler, the regular expression source code can be compiled into a ﬁnite-state transducer that implements the relation computationally.</S>
			<S sid ="19" ssid = "5">In the resulting transducer, each path (= sequence of states and arcs) from the initial state to a ﬁnal state represents a mapping between a surface form and its lemma, also known as the lexical form.</S>
			<S sid ="20" ssid = "6">Comprehensive lexical transducers have been created for a great number of languages including most of the European languages, Turkish, Arabic, Korean, and Japanese.</S>
			<S sid ="21" ssid = "7">They are commercially available through companies such as In- xight.</S>
			<S sid ="22" ssid = "8">2 Realizational Morphology.</S>
			<S sid ="23" ssid = "9">The success of ﬁnite-state morphology has so far had very little impact within linguistics as an academic discipline.</S>
			<S sid ="24" ssid = "10">Practical issues that arise in the context of real-life applications such as completeness of coverage, physical size, and speed of applications are irrelevant from an academic morphologist’s point of view.</S>
			<S sid ="25" ssid = "11">The main purpose of a morphologist writing to an audience of fellow linguists is to be convincing that his theory of word formation provides a more insightful and elegant account of this aspect of the human linguistic endowment than the competing theories and formalisms.</S>
			<S sid ="26" ssid = "12">Gregory Stump’s work on Paradigm Function Morphology [17] is a contribution to a theoretical tradition that goes back to Matthews [15], including works by authors such as Zwicky [18] and Anderson [1].</S>
			<S sid ="27" ssid = "13">In these inferential- realizational theories, as Stump characterizes them, the presence of aﬃxes in the inﬂected form of a word arises from rules that express some morphological property or a combination of properties that are present in its lexical representation.</S>
			<S sid ="28" ssid = "14">The paradigm functions that generate all the possible forms of a word from all of its valid lexical representations are deﬁned in terms of realization rules, also called rules of exponence.</S>
			<S sid ="29" ssid = "15">These rules all have the general form shown in Table 1.</S>
			<S sid ="30" ssid = "16">The subscript n is an index for a particular block of rules; τ RRn,τ,C (&lt; X, σ &gt;) =def &lt; Y ,σ &gt; Table 1.</S>
			<S sid ="31" ssid = "17">A Template for Realization Rules is the set of morphological features that are realized by the application of the rule; C is the lexical category that the rule is concerned with; X is a phonological input string that is either a part of the lexical representation or has been derived by realization rules that have already been applied, σ is a set of morphosyntactic properties (= features), and Y’ is the resulting output string.</S>
			<S sid ="32" ssid = "18">The derivation of Y’ may involve several steps.</S>
			<S sid ="33" ssid = "19">The ﬁrst output of the rule, Y, is produced by adding some (possibly zero) aﬃx to X and subjecting the result to any number of applicable morphophonological rules.</S>
			<S sid ="34" ssid = "20">An example of Stump’s morphophono- logical rules is given in Table 2 (Stump p. 48).</S>
			<S sid ="35" ssid = "21">If no morphophonological rule is If X=W[vowel1 ] and Y = [vowel2 ]Z, then the indicated [vowel1 ] is absent from Y’ and the indicated [vowel2 ] is stressed in Y’ iﬀ [vowel1 ] is stressed in Y. Table 2.</S>
			<S sid ="36" ssid = "22">A Morphophonological Rule applicable, Y’ consists of the input form X possibly with some added phonological material as in Table 3.</S>
			<S sid ="37" ssid = "23">This rule is in Block B and realizes the present tense of a verb as e’ suﬃxed to the end of the stem.</S>
			<S sid ="38" ssid = "24">RRB,T ns:pres,V (&lt; X, σ &gt;) =def &lt; X e ,σ &gt; Table 3.</S>
			<S sid ="39" ssid = "25">A Simple Realization Rule The rule blocks are applied in a given order.</S>
			<S sid ="40" ssid = "26">Within each block the rules are in principle unordered but ranked by Panini’s principle: If two or more rules could apply, the most speciﬁc one takes precedence and the others do not apply.</S>
			<S sid ="41" ssid = "27">Realization rules may also be speciﬁed in terms of other realization rules.</S>
			<S sid ="42" ssid = "28">Such rules Stump calls rules of referral.</S>
			<S sid ="43" ssid = "29">For example, if there is a rule that expresses some set of features by a given aﬃx, another rule can be derived from it by modifying the feature set but retaining the aﬃx.</S>
			<S sid ="44" ssid = "30">This is an important aspect of Stumps formalism because it gives an account of syncretism, that is, cases where the same aﬃx appears in several places in a paradigm, possibly associated with diﬀerent morphological properties.</S>
			<S sid ="45" ssid = "31">For example, in the case of the Lingala inﬂected form bababetaki ’they hit them’, the same aﬃx ba encodes both subject and object agreement features.</S>
			<S sid ="46" ssid = "32">Lexical representations are of the general form &lt; Stem, F eatures &gt; whereStem is a phonological representation and Features is some collection of attribute value pairs.</S>
			<S sid ="47" ssid = "33">For example, the lexical representation of the Lingala inﬂected form bambetaki ’they hit me’ might have a lexical representation shown in Table 4.</S>
			<S sid ="48" ssid = "34">The &lt; bet, Sub : [P er : 3,N um : P l, Gen : 1, 2], Obj : [P er : 1,N um : Sg],T ns : P ast : Hist &gt; Table 4.</S>
			<S sid ="49" ssid = "35">A Lexical Form underlying stem of the verb is bet and its feature set consists of three attributes Sub, Obj, and Tns whose values encode the subject and object agreement features and tense.</S>
	</SECTION>
	<SECTION title="Formal and  Computational Issues. " number = "3">
			<S sid ="50" ssid = "1">Formal precision and unambiguous notation are clearly important for Stump but there is no discussion in the book about what the formal power of Realizational Morphology might be.</S>
			<S sid ="51" ssid = "2">It is obvious that the underlying lexical representations constitute a regular language.</S>
			<S sid ="52" ssid = "3">Although the features may have set values, there is no recursion.</S>
			<S sid ="53" ssid = "4">All the examples of realization rules given by Stump seem to represent regular relations.</S>
			<S sid ="54" ssid = "5">The same is clearly true of Stump’s morphophonological rules that are essentially rewrite rules in the old ChomskyHalle tradition [5].</S>
			<S sid ="55" ssid = "6">As was ﬁrst shown by Johnson [8] and subsequently by Kaplan and Kay [10], such rules represent regular relations.</S>
			<S sid ="56" ssid = "7">They can be written as regular expressions and compiled into transducers.</S>
			<S sid ="57" ssid = "8">If the lexicon itself is regular and if all the realization rules and morphophonological rules are regular, it is possible to compile the lexicon and the rules individually to ﬁnite-state automata and to compose them into a single transducer.</S>
			<S sid ="58" ssid = "9">The possibility of a ﬁnite-state implementation of realizational morphology is not surprising to computational linguists.</S>
			<S sid ="59" ssid = "10">Lexical transducers have already been constructed for a great number of languages using other ﬁnite-state formalisms.</S>
			<S sid ="60" ssid = "11">However, it is not as evident that this can be done without losing the theoretical advantages of the framework.</S>
			<S sid ="61" ssid = "12">Notions such as Panini’s Principle for resolvingcompetition between competing rules and Stump’s rules of referral have no ob vious ﬁnite-state implementation.</S>
			<S sid ="62" ssid = "13">In the next section we will show that rules of exponence and rules of referral can be expressed simply and elegantly as regular expressions and compiled with the publicly available parc/xrce xfst tool [4].</S>
			<S sid ="63" ssid = "14">A ﬁnite-state implementation of realizational morphology has a fundamental advantage over the implementations in systems such as datr/katr proposed by Finkel and Stump [7].</S>
			<S sid ="64" ssid = "15">A system of realization rules expressed as a datr theory can be used to generate an inﬂected surface form from its lexical description but such a system is not directly usable for recognition.</S>
			<S sid ="65" ssid = "16">In contrast, ﬁnite-state transducers are bidirectional.</S>
			<S sid ="66" ssid = "17">The same transducer can generate an inﬂected form from its underlying representation or analyze it into a lexical stem or stems and the associated feature bundles.</S>
	</SECTION>
	<SECTION title="Application to Lingala. " number = "4">
			<S sid ="67" ssid = "1">In this section we will show in detail how Realizational Morphology can be expressed in terms of the parc/xrce regular expression calculus as deﬁned in Beesley and Karttunen [4].</S>
			<S sid ="68" ssid = "2">The regular expressions given in this section constitute a script that can be directly compiled with the xfst tool.</S>
			<S sid ="69" ssid = "3">The data and the analysis of Lingala come from Chapter 5 in Stump’s book, from a short monograph on Lingala by Meeuwis [16], and from Michael Gasser’s course notes at http://www.indiana.edu/~gasser/L103/hw10.html.</S>
			<S sid ="70" ssid = "4">Lingala is a Bantu language spoken in Kinshasa and along the Congo river.</S>
			<S sid ="71" ssid = "5">Like other Bantu languages, Lingala has an elaborate system of noun classes or genders.</S>
			<S sid ="72" ssid = "6">The verbs contain af- ﬁxes that mark agreement with the verb’s subject’s and object’s person, number, and gender properties.</S>
			<S sid ="73" ssid = "7">4.1 Features.</S>
			<S sid ="74" ssid = "8">We start with the auxiliary deﬁnitions in Table 5.</S>
			<S sid ="75" ssid = "9">The xfst tool interprets the command define as the instruction to bind the next symbol to the network compiled from the regular expression that follows.</S>
			<S sid ="76" ssid = "10">The stems of Lingala are assigned to the variable Stem.</S>
			<S sid ="77" ssid = "11">In this case, the set includes just the stem for the verb meaning ’hit’.</S>
			<S sid ="78" ssid = "12">The braces around bet indicate that the stem consists of a sequence of single-character symbols: b e t. The variable L is deﬁned as the surface alphabet (the union of all lowercase letters).</S>
			<S sid ="79" ssid = "13">The vertical bar is the union operator.</S>
			<S sid ="80" ssid = "14">Following Stump, we ignore tones here.</S>
			<S sid ="81" ssid = "15">define Stems {bet} ; define L [a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z]; Table 5.</S>
			<S sid ="82" ssid = "16">Auxiliary Deﬁnitions The next step consist of deﬁning the feature set.</S>
			<S sid ="83" ssid = "17">To make comparisons easy, we closely follow Stump’s notation altough it makes things more cumbersome than they would need to be otherwise.</S>
			<S sid ="84" ssid = "18">A feature consists of an attribute, such as Per for ’person’ and a value such as 1.</S>
			<S sid ="85" ssid = "19">For the sake of legibility, we separate them with a colon (quoted for technical reasons).</S>
			<S sid ="86" ssid = "20">The deﬁnitions for Person, Number, Gender, and Tense are expressed in Table 6.</S>
			<S sid ="87" ssid = "21">The value of the variable Person1 for example, is a sequence consisting of three symbols: Per, :, and 1.</S>
			<S sid ="88" ssid = "22">define Person1 [Per &quot;:&quot; 1]; define Person2 [Per &quot;:&quot; 2]; define Person3 [Per &quot;:&quot; 3]; define Number [Num &quot;:&quot; [Sg | Pl] ]; define Gender3 [Gen &quot;:&quot; [1 &quot;.&quot; 2 | 1a &quot;.&quot; 2 | 3 &quot;.&quot; 4 | 5 &quot;.&quot; 6 | 7 &quot;.&quot; 8 | 9a &quot;.&quot; 10a | 10 | 11 &quot;.&quot; 6 | 14 &quot;.&quot; 6 | 15]]; define PastTense [Past &quot;:&quot; [Rec|Hist|MoreRem|MostRem]]; define PresTense [Pres &quot;:&quot; [Cont|Hab1|Hab2]]; define FutTense [Fut &quot;:&quot; [Immed|MostRem]]; Table 6.</S>
			<S sid ="89" ssid = "23">Features with Atomic Values The next set of feature deﬁnitions in Table 7 makes reference to features already deﬁned in Table 6.</S>
			<S sid ="90" ssid = "24">For example, the Tense feature consists of words such as Tns:Past:Rec and Tns:Fut:Immed.</S>
			<S sid ="91" ssid = "25">The deﬁnition of Agreement includes values such as Per:1 Num:Pl and Per:3 Num:Sg Gen:5.6.</S>
			<S sid ="92" ssid = "26">These values are to be interpreted as sets containing a number of features separated a space.</S>
			<S sid ="93" ssid = "27">The deﬁnition of Agreement feature in Table 8 builds on the deﬁnition of the Agreement values in Table 7.</S>
			<S sid ="94" ssid = "28">There is a minor complication here.</S>
			<S sid ="95" ssid = "29">Gender 15 is not expressed at all as an object marker.</S>
			<S sid ="96" ssid = "30">As a subject marker it only exists in the singular.</S>
			<S sid ="97" ssid = "31">For this reason we have to eliminate some otherwise possible strings by subtraction.</S>
			<S sid ="98" ssid = "32">The dollar sign in Figure 8 is called the contains operator.</S>
			<S sid ="99" ssid = "33">define Tense [Tns &quot;:&quot; [PastTense|PresTense|FutTense]]; define Agreement [[[Person1 | Person2] &quot; &quot; Number] | [Person3 &quot; &quot; Number &quot; &quot; Gender3]]; Table 7.</S>
			<S sid ="100" ssid = "34">Features with Set Values $15 denotes the language of strings that somewhere contain 15.</S>
			<S sid ="101" ssid = "35">The &amp; operator represents intersection.</S>
			<S sid ="102" ssid = "36">Thus [$Pl &amp; $15] denotes strings that contain both Pl (= plural) and gender 15.</S>
			<S sid ="103" ssid = "37">define SubjAgr [Sub &quot;:&quot; Agreement] - [$Pl &amp; $15]; define ObjAgr [Obj &quot;:&quot; Agreement] - $15 ; define Agr [Func &quot;:&quot; Agreement]; Table 8.</S>
			<S sid ="104" ssid = "38">Subject and Object Agreement Features We now have nearly all the deﬁnitions we need to deﬁne the lexical forms of Lingala in the style of realizational morphology.</S>
			<S sid ="105" ssid = "39">The ﬁnal deﬁnitions are in Table 9.</S>
			<S sid ="106" ssid = "40">The verb lexicon consists of forms such as &lt;bet,Sub:Per:3 Num:Sg Gen:14,6 Obj:Per:2 Num:Sg&gt;, &lt;bet,Sub:Per:3 Num:Pl Gen:5,6 Obj:Per:3 Num:Pl Gen:5,6&gt;, etc.,.in which the stem bet is paired with some valid combination of morphosyntactic features.</S>
			<S sid ="107" ssid = "41">define Features [SubjAgr &quot; &quot; ObjAgr &quot; &quot; Tense]; define VerbLex &quot;&lt;&quot; Stems &quot;,&quot; Features &quot;&gt;&quot; ; Table 9.</S>
			<S sid ="108" ssid = "42">Verb Lexicon 4.2 Realization Rules.</S>
			<S sid ="109" ssid = "43">The rules of exponence can be expressed in parc/xrce regular expression notation quite easily using the replace operator -&gt;.</S>
			<S sid ="110" ssid = "44">We will need two types of rules.</S>
			<S sid ="111" ssid = "45">Certain rules introduce speciﬁc subject or object markers, others introduce markers for both syntactic functions.</S>
			<S sid ="112" ssid = "46">Table 10 contains the speciﬁc rules.</S>
			<S sid ="113" ssid = "47">Each rule inserts (= rewrites the empty string as) a particular aﬃx in the beginning of the form derived so far, that is, immediately after the initial &lt; bracket.</S>
			<S sid ="114" ssid = "48">For example, rule R302 inserts ko to the beginning of the stem if the object agreement features of the stem include second person and singular.</S>
			<S sid ="115" ssid = "49">Thus the rule will apply to an underlying lexical form such as &lt;bet,Sub:Per:1 Num:Sg Obj:Per:2 Num:Sg Gen:1.2 Tns:Past:Rec&gt; changing bet to kobet and leaving everything else unmodiﬁed.</S>
			<S sid ="116" ssid = "50">Note that although the features occur in the underlying lexical form in a certain order, none of the rules refer to the order and would apply even if the order was changed, say, by reversing the subject and object agreement features.</S>
			<S sid ="117" ssid = "51">The naming of the rules indicates what block each rule belongs to.</S>
			<S sid ="118" ssid = "52">The rules in Block 1 (R101, R102, etc.) realize subject agreement markers; the rules in Block 3 (R301, R02, etc) mark object agreement.</S>
			<S sid ="119" ssid = "53">In Lingala verbs, the subject markers precede the object define R101 [[.</S>
			<S sid ="120" ssid = "54">-&gt; {na} || &quot;&lt;&quot; _ [$[SubjAgr &amp; $Person1 &amp; $Sg]]] ; define R102 [[.</S>
			<S sid ="121" ssid = "55">-&gt; o || &quot;&lt;&quot; _ [$[SubjAgr &amp; $Person2 &amp; $Sg]]] ; define R103 [[.</S>
			<S sid ="122" ssid = "56">-&gt; a || &quot;&lt;&quot; _ [$[SubjAgr &amp; $Person3 &amp; $Sg &amp; $2]]]; define R104 [[.</S>
			<S sid ="123" ssid = "57">-&gt; e || &quot;&lt;&quot; _ [$[SubjAgr &amp; $Person3 &amp; $Sg &amp; $7]]]; define R105 [[.</S>
			<S sid ="124" ssid = "58">-&gt; {ei} || &quot;&lt;&quot; _[$[SubjAgr &amp; $Person3 &amp; $Sg &amp; $15]]]; define R111 [[.</S>
			<S sid ="125" ssid = "59">-&gt; {to} || &quot;&lt;&quot; _ [$[SubjAgr &amp; $Person1 &amp; $Pl]]] ; define R301 [[.</S>
			<S sid ="126" ssid = "60">-&gt; n || &quot;&lt;&quot; _ [$[ObjAgr &amp; $Person1 &amp; $Sg]]] ; define R302 [[.</S>
			<S sid ="127" ssid = "61">-&gt; {ko} || &quot;&lt;&quot; _ [$[ObjAgr &amp; $Person2 &amp; $Sg]]] ; define R303 [[.</S>
			<S sid ="128" ssid = "62">-&gt; {mo} || &quot;&lt;&quot; _ [$[ObjAgr &amp; $Person3 &amp; $Sg &amp; $2]]]; define R304 [[.</S>
			<S sid ="129" ssid = "63">-&gt; {ei} || &quot;&lt;&quot; _ [$[ObjAgr &amp; $Person3 &amp; $Sg &amp; $7]]]; define R310 [[.</S>
			<S sid ="130" ssid = "64">-&gt; {lo} || &quot;&lt;&quot; _ [$[ObjAgr &amp; $Person1 &amp; $Pl]]] ; Table 10.</S>
			<S sid ="131" ssid = "65">Speciﬁc Subject and Object Agreement Rules markers, and both come before the stem.</S>
			<S sid ="132" ssid = "66">Because the rules are designed to build the verb forms “from inside out” starting with the stem, the rules in Block 3 have to apply before the rules in Block 1.</S>
			<S sid ="133" ssid = "67">With the rules in Table 10 we can already produce some Lingala stems fully marked with subject and object agreement markers.</S>
			<S sid ="134" ssid = "68">Table 11 illustrates the process with the xfst program.</S>
			<S sid ="135" ssid = "69">The ﬁrst command composes the input string &lt;bet,Sub:Per:1 Num:Sg Obj:Per:2 Num:Sg Tns:Past:Rec&gt; with Rule R302 and the result again with Rule R101.</S>
			<S sid ="136" ssid = "70">Because angle brackets, commas, and colons have a special meaning in regular expressions, we have to put them in double quotes.</S>
			<S sid ="137" ssid = "71">The separating space symbols, &quot; &quot;, also have to be quoted.</S>
			<S sid ="138" ssid = "72">The symbol .o. is the composition operator.</S>
			<S sid ="139" ssid = "73">The result of the composition is a single transducer containing one path.</S>
			<S sid ="140" ssid = "74">The xfst command ’print upper-words’ shows the original input, the ’print lower-words’ shows the resulting output.</S>
			<S sid ="141" ssid = "75">In the ﬁnite-state world, the linguistic notion of “rule application” corresponds to the composition of an input string with one or more rules in a cascade.</S>
			<S sid ="142" ssid = "76">As we see in Table 11, the eﬀect of the two rules of exponence is to change bet, to nakobet.</S>
			<S sid ="143" ssid = "77">xfst[0]: regex &quot;&lt;&quot; {bet} &quot;,&quot; Sub &quot;:&quot; Per &quot;:&quot; 1 &quot; &quot; Num &quot;:&quot; Sg &quot; &quot; Obj &quot;:&quot; Per &quot;:&quot; 2 &quot; &quot; Num &quot;:&quot; Sg &quot; &quot; Tns &quot;:&quot; Past &quot;:&quot; Rec &quot;&gt;&quot; .o. R302 .o. R101; 1.5 Kb.</S>
			<S sid ="144" ssid = "78">34 states, 33 arcs, 1 path..</S>
			<S sid ="145" ssid = "79">fst[1]: print upper-words &lt;bet,Sub:Per:1 Num:Sg Obj:Per:2 Num:Sg Tns:Past:Rec&gt; fst[1]: print lower-words &lt;nakobet,Sub:Per:1 Num:Sg Obj:Per:2 Num:Sg Tns:Past:Rec&gt; Table 11.</S>
			<S sid ="146" ssid = "80">A Cascade of Compositions This is almost what we want but it is evident that to produce actual surface forms on Lingala, we need to suppress the morphological features on the output side.</S>
			<S sid ="147" ssid = "81">For that we need the cleanup rule deﬁned in Table 12.</S>
			<S sid ="148" ssid = "82">It eliminates everything that is not part of the surface alphabet deﬁned in Table 5, that is, brackets, punctuation, spaces, numerals, and the multi-character symbols for attributes and values.</S>
			<S sid ="149" ssid = "83">The backslash in Table 12 is the term complement operator.</S>
			<S sid ="150" ssid = "84">The zero represents an epsilon.</S>
			<S sid ="151" ssid = "85">With Cleanup as the last rule of the cascade, the lower-side output string on the single path is reduced to nakobet.</S>
			<S sid ="152" ssid = "86">The upper-side string of the path still has its original form.</S>
			<S sid ="153" ssid = "87">That is, we now have a minimal lexical transducer that generates and analyzes the string nakobet.</S>
			<S sid ="154" ssid = "88">define Cleanup \L -&gt; 0; Table 12.</S>
			<S sid ="155" ssid = "89">Elimination Rule for Non-Alphabetic Symbols 4.3 Rules of Referral.</S>
			<S sid ="156" ssid = "90">In addition to speciﬁc subject and object markers, Lingala contains many aﬃxes that are used both for subjects and objects.</S>
			<S sid ="157" ssid = "91">To be faithful to the principles of Realizational Morphology, we will not deﬁne them directly but derive them from a common source by a rule of referral.</S>
			<S sid ="158" ssid = "92">Table 13 contains the common sources.</S>
			<S sid ="159" ssid = "93">Note that the rules in this table all contain the symbol Agr deﬁned in Table 8.</S>
			<S sid ="160" ssid = "94">In other words, the rules do not identify themselves as Sub ject or Object rules.</S>
			<S sid ="161" ssid = "95">The features are assigned to the place holder attribute Func.</S>
			<S sid ="162" ssid = "96">define RAgr1 [[.</S>
			<S sid ="163" ssid = "97">-&gt; {mo} || &quot;&lt;&quot; _ [$[Agr &amp; $Person3 &amp; $Sg &amp; $4]]]; define RAgr2 [[.</S>
			<S sid ="164" ssid = "98">-&gt; {li} || &quot;&lt;&quot; _ [$[Agr &amp; $Person3 &amp; $Sg &amp; $5]]]; define RAgr3 [[.</S>
			<S sid ="165" ssid = "99">-&gt; e || &quot;&lt;&quot; _ [$[Agr &amp; $Person3 &amp; $Sg &amp; $[9a&quot;.&quot;10a]]]]; define RAgr4 [[.</S>
			<S sid ="166" ssid = "100">-&gt; {lo} || &quot;&lt;&quot; _ [$[Agr &amp; $Person3 &amp; $Sg &amp; $[10|11]]]]; define RAgr5 [[.</S>
			<S sid ="167" ssid = "101">-&gt; {bo} || &quot;&lt;&quot; _ [$[Agr &amp; $Person3 &amp; $Sg &amp; $14]]]; define RAgr6 [[.</S>
			<S sid ="168" ssid = "102">-&gt; {bo} || &quot;&lt;&quot; _ [$[Agr &amp; $Person2 &amp; $Pl]]] ; define RAgr7 [[.</S>
			<S sid ="169" ssid = "103">-&gt; {ba} || &quot;&lt;&quot; _ [$[Agr &amp; $Person3 &amp; $Pl &amp; $2]]]; define RAgr8 [[.</S>
			<S sid ="170" ssid = "104">-&gt; {mi} || &quot;&lt;&quot; _ [$[Agr &amp; $Person3 &amp; $Pl &amp; $4]]]; define RAgr9 [[.</S>
			<S sid ="171" ssid = "105">-&gt; {ma} || &quot;&lt;&quot; _ [$[Agr &amp; $Person3 &amp; $Pl &amp; $[5|6]]]]; define RAgr10 [[.</S>
			<S sid ="172" ssid = "106">-&gt; {bi} || &quot;&lt;&quot; _ [$[Agr &amp; $Person3 &amp; $Pl &amp; $7]]]; define RAgr11 [[.</S>
			<S sid ="173" ssid = "107">-&gt; i || &quot;&lt;&quot; _ [$[Agr &amp; $Person3 &amp; $Pl &amp; $[9a|10]]]]; Table 13.</S>
			<S sid ="174" ssid = "108">Shared Agreement Rules The rules of referral in Table 14 all use a construct indicated by ‘ in the parc/xrce regular expression calculus that modiﬁes a given transducer by systematically replacing all occurrences of a given symbol with some other symbol.</S>
			<S sid ="175" ssid = "109">Rule R106, for example, derives a subject agreement rule from Rule RAgr1 in Table 13.</S>
			<S sid ="176" ssid = "110">Rule R305 derives an object agreement rule from the same source.</S>
			<S sid ="177" ssid = "111">define R106 ‘[RAgr1, Func, Sub]; define R107 ‘[RAgr2, Func, Sub]; define R108 ‘[RAgr3, Func, Sub]; define R109 ‘[RAgr4, Func, Sub]; define R110 ‘[RAgr5, Func, Sub]; define R112 ‘[RAgr6, Func, Sub]; define R113 ‘[RAgr7, Func, Sub]; define R114 ‘[RAgr8, Func, Sub]; define R115 ‘[RAgr9, Func, Sub]; define R116 ‘[RAgr10, Func, Sub]; define R117 ‘[RAgr11, Func, Sub]; define R305 ‘[RAgr1, Func, Obj]; define R306 ‘[RAgr2, Func, Obj]; define R307 ‘[RAgr3, Func, Obj]; define R308 ‘[RAgr4, Func, Obj]; define R309 ‘[RAgr5, Func, Obj]; define R311 ‘[RAgr6, Func, Obj]; define R312 ‘[RAgr7, Func, Obj]; define R313 ‘[RAgr8, Func, Obj]; define R314 ‘[RAgr9, Func, Obj]; define R315 ‘[RAgr10, Func, Obj]; define R316 ‘[RAgr11, Func, Obj]; Table 14.</S>
			<S sid ="178" ssid = "112">Rules of Referral Alternatively, we could have chosen either the subject or the object agreement rule as the basic one and derived the other by a rule of referral that substitutes the attribute Sub for Obj, or vice versa.</S>
			<S sid ="179" ssid = "113">Either way, Rule RAgr1 gets used twice, once as an object agreement rule, once as a subject agreement rule.</S>
			<S sid ="180" ssid = "114">Whatever theoretical insight there is in insisting that it is the same rule that applies in both cases, this insight is faithfully captured by the implementation.</S>
			<S sid ="181" ssid = "115">define R201 [[.</S>
			<S sid ="182" ssid = "116">-&gt; {ko} || &quot;&lt;&quot; _ [$[Fut&quot;:&quot;Immed]]] ; define R401 [[.</S>
			<S sid ="183" ssid = "117">-&gt; {ak} || _ &quot;,&quot; [$[Pres&quot;:&quot;[Hab1 | Hab2]| Past&quot;:&quot;[Hist | MostRem]]]]; define R402 [[.</S>
			<S sid ="184" ssid = "118">-&gt; a || _ &quot;,&quot; [$[Pres&quot;:&quot;Cont Fut&quot;:&quot;Immed]]]; define R501 [[.</S>
			<S sid ="185" ssid = "119">-&gt; i || _ &quot;,&quot; [$[Fut&quot;:&quot;MostRem Past&quot;:&quot;[Rec|Hist]]]]; Table 15.</S>
			<S sid ="186" ssid = "120">Rules of Tense and Aspect Marking The ﬁnal set of rules yet to be discussed involves the realization of Tense and Aspect features.</S>
			<S sid ="187" ssid = "121">The rules are expressed in Figure 15.</S>
			<S sid ="188" ssid = "122">Unlike the agreement features that come before the stem, most tense features are realized as suﬃxes after the stem.</S>
			<S sid ="189" ssid = "123">Consequently, the context speciﬁcation of the tense rules refer to the comma, the marker that separates the stem from the feature speciﬁcation as the right context.</S>
			<S sid ="190" ssid = "124">The one exception is the immediate future tense that is marked both by a preﬁx and by a suﬃx.</S>
			<S sid ="191" ssid = "125">All that remains to be done now is to deﬁne the cascade of compositions that maps each of the lexical forms to its proper surface realization, and vice versa.</S>
			<S sid ="192" ssid = "126">Figure 16 gives the explicit deﬁnition of Lingala verbs in Realizational Morphology.</S>
			<S sid ="193" ssid = "127">The text following the hash mark is a comment, not part of the deﬁnition.</S>
			<S sid ="194" ssid = "128">define LingalaVerbs [ VerbLex .o. R301 .o. R302 .o. R303 .o. R304 .o. R305 .o. # singular object R306 .o. R307 .o. R308 .o. R309 .o. R310 .o. R311 .o. R312 .o. R313 .o. R314 .o. # plural object R315 .o. R316 .o. R201 # future .o. R101 .o. R102 .o. R103 .o. R104 .o. R105 .o. # singular subject R106 .o. R107 .o. R108 .o. R109 .o. R110 .o. R111 .o. R112 .o. R113 .o. R114 .o. R115 .o. # plural subject R116 .o. R117 .o. R401 .o. R402 .o. R501 # tense .o. Cleanup ] ; Table 16.</S>
			<S sid ="195" ssid = "129">Deﬁnition of Lingala Verbal Morphology Some examples to show how the system is working are given in Table 17 where we are exploring the contents of the lexical transducer resulting from the script in Table 16 and the preceding deﬁnitions in xfst.</S>
			<S sid ="196" ssid = "130">The command ’print random- upper 5’ print ﬁve lexical strings at random; the command ’print random-lower 5’ prints ﬁve random surface strings.</S>
			<S sid ="197" ssid = "131">The command ’apply up loibeta’ prints out all the possible feature bundles associated with the surface form.</S>
			<S sid ="198" ssid = "132">The last command generates loibeta from one of its lexical interpretations.</S>
	</SECTION>
	<SECTION title="Conclusion. " number = "5">
			<S sid ="199" ssid = "1">What we have shown in this paper is that Stump’s theory of realizational morphology is yet another incarnation of ﬁnite-state morphology, diﬀerent in notation, but not in substance, from the technology that the successful commercial morphology applications are based on.</S>
			<S sid ="200" ssid = "2">Moving from Stump’s notation to a more standard regular expression calculus does not incur any loss of simplicity or elegance.</S>
			<S sid ="201" ssid = "3">Rather the opposite.</S>
			<S sid ="202" ssid = "4">Computational phonology and morphology have a curious non-relationship with “real” linguistics extending back to more than three decades.</S>
			<S sid ="203" ssid = "5">Time after fst[1]: print random-upper 5 &lt;bet,Sub:Per:3 Num:Sg Gen:5.6 Obj:Per:3 Num:Sg Gen:14.6 Tns:Pres:Cont&gt; &lt;bet,Sub:Per:3 Num:Sg Gen:14.6 Obj:Per:3 Num:Pl Gen:11.6 Tns:Pres:Cont&gt; &lt;bet,Sub:Per:3 Num:Sg Gen:1.2 Obj:Per:3 Num:Sg Gen:5.6 Tns:Pres:Hab1&gt; &lt;bet,Sub:Per:3 Num:Pl Gen:7.8 Obj:Per:1 Num:Pl Tns:Fut:MostRem&gt; &lt;bet,Sub:Per:3 Num:Sg Gen:15 Obj:Per:3 Num:Pl Gen:5.6 Tns:Past:MostRem&gt; xfst[1]: print random-lower 5 mamibeta loibeta ikolobeta mimobetak ekoeibeta xfst[1]: apply up loibeta &lt;bet,Sub:Per:3 Num:Sg Gen:11.6 Obj:Per:3 Num:Pl Gen:9a.10a Tns:Pres:Cont&gt; &lt;bet,Sub:Per:3 Num:Sg Gen:11.6 Obj:Per:3 Num:Pl Gen:10 Tns:Pres:Cont&gt; &lt;bet,Sub:Per:3 Num:Sg Gen:10 Obj:Per:3 Num:Pl Gen:9a.10a Tns:Pres:Cont&gt; &lt;bet,Sub:Per:3 Num:Sg Gen:10 Obj:Per:3 Num:Pl Gen:10 Tns:Pres:Cont&gt; xfst[1]: apply down apply down&gt; &lt;bet,Sub:Per:1 Num:Sg Obj:Per:2 Num:Sg Tns:Past:Rec&gt; nakobeti apply down&gt; &lt;bet,Sub:Per:3 Num:Pl Gen:7.8 Obj:Per:1 Num:Pl Tns:Fut:MostRem&gt; bilobeti Table 17.</S>
			<S sid ="204" ssid = "6">Exploring Lingala Verbal Morphology time, from Johnson [8] to Eisner [6], including Kaplan and Kay [9, 10], Koskenniemi [14], myself [11, 12], Beesley [2], Kiraz [13], and others, the computational knights have presented themselves at the Royal Court of Linguistics, rushed up to the Princess of Phonology and Morphology in great exitement to deliver the same message “Dear Princess.</S>
			<S sid ="205" ssid = "7">I have wonderful news for you: You are not like some of your NP-complete sisters.</S>
			<S sid ="206" ssid = "8">You are regular.</S>
			<S sid ="207" ssid = "9">You are rational.</S>
			<S sid ="208" ssid = "10">You are ﬁnite-state.</S>
			<S sid ="209" ssid = "11">Please marry me. Together we can do great things.” And time after time, the put-down response from the Princess has been the same: “Not interested.</S>
			<S sid ="210" ssid = "12">You do not understand Theory.</S>
			<S sid ="211" ssid = "13">Go away you geek.” This constant rejection of the most suitable suitor is puzzling.</S>
			<S sid ="212" ssid = "14">The Princess must have a vested interest in making simple things appear more complicated than they really are.</S>
			<S sid ="213" ssid = "15">The good news that the computational knights are trying to deliver is unwelcome.</S>
			<S sid ="214" ssid = "16">The Princess prefers the pretense that phonology/morphology is a profoundly complicated subject, shrouded by theories.</S>
			<S sid ="215" ssid = "17">If that is the right analysis of the situation, computational linguists should adopt a diﬀerent strategy.</S>
			<S sid ="216" ssid = "18">Instead of being the eternal rejected suitor at the Royal Court, they should adopt the role of the innocent boy in the street shouting “The Princess has no clothes.</S>
			<S sid ="217" ssid = "19">The Princess has no clothes...” That is my conclusion.</S>
			<S sid ="218" ssid = "20">Acknowledgements.</S>
			<S sid ="219" ssid = "21">I thank Louisa Sadler for stimulating discussions of Stump’s work, and Jason Eisner, Ronald M. Kaplan, Kemal Oﬂazer and Annie Zaenen for many helpful suggestions and comments.</S>
	</SECTION>
</PAPER>
