<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">new Czech morphological analyser ajka which is based on the algorithmic description of the Czech formal morphology.</S>
		<S sid ="2" ssid = "2">First, we present two most important word-forming processes in Czech — inflection and derivation.</S>
		<S sid ="3" ssid = "3">A brief description of the data structures used for storing morphological information as well as a discussion of the efficient storage of lexical items (stem bases of Czech words) is included too.</S>
		<S sid ="4" ssid = "4">Finally, we bring some interesting features of the designed and implemented system ajka together with current statistic data.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="5" ssid = "5">Typically, morphological analysis returns the base form (lemma) and associates it with all the possible POS (part-of-speech) labels together with all grammatical information for each known word form.</S>
			<S sid ="6" ssid = "6">In analytical languages a simple approach can be taken: it is enough to list all word forms to catch the most of morphological processes.</S>
			<S sid ="7" ssid = "7">In English, for example, a regular verb has usually only 4 distinct forms, and irregular ones have at most 8 forms.</S>
			<S sid ="8" ssid = "8">On the other hand, the highly inflectional languages like Czech or Finnish present a difficulty for such simple approaches as the expansion of the dictionary is at least an order of magnitude greater1 [4].</S>
			<S sid ="9" ssid = "9">Specialised finite-state compilers have been implemented [1], which allow the use of specific operations for combining base forms and affixes, and applying rules for morphophonological variations [3].</S>
			<S sid ="10" ssid = "10">Descriptions of morphological analysers for other languages can be found in [8, 11].</S>
			<S sid ="11" ssid = "11">Basically, there are three major types of word-forming processes — inflection, derivation, and compounding.</S>
			<S sid ="12" ssid = "12">Inflection refers to the systematic modification of a stem by means of prefixes and suffixes.</S>
			<S sid ="13" ssid = "13">Inflected forms express morphological distinctions like case or number, but do not change meaning or POS.</S>
			<S sid ="14" ssid = "14">In contrast, the process of derivation usually causes change in meaning and often change of POS.</S>
			<S sid ="15" ssid = "15">Compounding deals with the process of merging several word bases to form a new word.</S>
			<S sid ="16" ssid = "16">1 As our effective implementation of spell-checker for Czech based on finite state au-.</S>
			<S sid ="17" ssid = "17">tomata suggests, it does not necessarily mean that no application can take advantage of a simple listing of word forms in highly inflecting languages.</S>
			<S sid ="18" ssid = "18">Czech belongs to the family of inflectional languages which are characterised by the fact that one morpheme (typically an ending) carries the values of several grammatical categories together (for example an ending of nouns typically expresses a value of grammatical category of case, number and gender).</S>
			<S sid ="19" ssid = "19">This feature requires a special treatment of Czech words in text processing systems.</S>
			<S sid ="20" ssid = "20">To this end, we developed a universal morphological analyser which performs the morphological analysis based on dividing all words in Czech texts to their smallest relevant components that we call segments . The notion of segment roughly corresponds to the linguistic concept morpheme , which denotes the smallest meaningful unit of a language.</S>
			<S sid ="21" ssid = "21">Presented morphological analyser consists of three major parts: a formal description of morphological processes via morphological patterns, an assignment of Czech stems to their relevant patterns and a morphological analysis algorithm.</S>
			<S sid ="22" ssid = "22">The description of Czech formal morphology is represented by a system of inflectional patterns and sets of endings and it includes lists of segments and their correct combinations.</S>
			<S sid ="23" ssid = "23">The assignment of Czech stems to their patterns is contained in the Czech Machine Dictionary [10].</S>
			<S sid ="24" ssid = "24">Finally, algorithm of morphological analysis using this information splits each word into appropriate segments.</S>
			<S sid ="25" ssid = "25">The morphological analyser is being used for lemmatisation and morphological tagging of Czech texts in large corpora, as well as for generating correct word forms, and also as a spelling checker.</S>
			<S sid ="26" ssid = "26">It can also be applied to other problems that arise in the area of processing Czech texts, e.g. creating stop lists for building indexes used in information retrieval systems.</S>
	</SECTION>
	<SECTION title="Czech Inflectional Morphology. " number = "2">
			<S sid ="27" ssid = "1">The main part of the algorithmic description of formal morphology, as it was suggested in [10], is a pattern definition.</S>
			<S sid ="28" ssid = "2">The basic notion is a morphological paradigm — a set of all forms of inflectional word expressing a system of its respective grammatical categories.</S>
			<S sid ="29" ssid = "3">As stated in [5], the traditional grammar of Czech suggests much smaller paradigm system than there is existing in reality.</S>
			<S sid ="30" ssid = "4">For this reason we decided to build quite large set of paradigm patterns to cover all variations of Czech from the scratch.</S>
			<S sid ="31" ssid = "5">Fortunately, we had not been limited by technical restrictions,2 thus we could follow the straightforward approach to the linguistic adequacy and robust solution.</S>
			<S sid ="32" ssid = "6">The detailed description of all variations in Czech paradigms enables us to define application dependent generalisations of the pattern system.</S>
			<S sid ="33" ssid = "7">For example, if we do not need to take into consideration archaic word forms for a specific application, the number of paradigm pattern (that reaches 1500 in its fully expanded form) can be automatically reduced considerably.</S>
			<S sid ="34" ssid = "8">Noun paradigms consist of word forms in particular cases of singular and plural.</S>
			<S sid ="35" ssid = "9">Verbs have more paradigms — for present tense, for imperative forms, etc. 2 Hajiˇc [5], e.g., indicates that his system is limited to 214 paradigm patterns..</S>
			<S sid ="36" ssid = "10">For example, the nouns hora (mountain), slza (tear) and ˇreka (river) display the following forms in the paradigms: Nom.</S>
			<S sid ="37" ssid = "11">Gen. Dat.</S>
			<S sid ="38" ssid = "12">Acu.</S>
			<S sid ="39" ssid = "13">Voc.</S>
			<S sid ="40" ssid = "14">Loc.</S>
			<S sid ="41" ssid = "15">Ins.</S>
			<S sid ="42" ssid = "16">hora hory hoˇre horu horo hoˇre horou hory hor hor´am hory hory hor´ach horami slza slzy slze slzu slzo slze slzou slzy slz slz´am slzy slzy slz´ach slzami ˇreka ˇreky ˇrece ˇreku ˇreko ˇrece ˇrekou ˇreky ˇrek ˇrek´am ˇreky ˇreky ˇrek´ach ˇrekami As we can see, the corresponding word forms in the paradigms have the same ending.</S>
			<S sid ="43" ssid = "17">That is why we can divide the given word form into two parts — a stem and an ending . We then obtain the following segmentation: hor-{a,y,u,o,ou} hoˇr-{e,e} hor-{y, ,´am,y,y,´ach,ami} slz-{a,y,e,u,o,e,ou} slz-{y, ,´am,y,y,´ach,ami} ˇrek-{a,y,u,o,ou} ˇrec-{e,e} ˇrek-{y, ,´am,y,y,´ach,ami} In the paradigm for the word hora , there are two alternative stems (hor and hoˇr ); in the paradigm for the word slza , there is only one stem slz ; and in the paradigm for the word ˇreka , there are again two alternative stems ˇrek and ˇrec.</S>
			<S sid ="44" ssid = "18">We can also identify four different ending sets S1={a,y,u,o,ou}, S2={e,e}, next S3={y, ,´am,y,y,´ach,ami} and S4={a,y,e,u,o,e,ou}, but it is clear that S4=S1+S2.</S>
			<S sid ="45" ssid = "19">This observation leads us to a system of ending sets.</S>
			<S sid ="46" ssid = "20">We make distinction between two types of sets — basic and peripheral ending sets.</S>
			<S sid ="47" ssid = "21">The basic ones contain endings that have no influence to the form of the stem, while endings from the peripheral ending sets cause changes in the stem.</S>
			<S sid ="48" ssid = "22">In our case, sets S1 and S3 are basic and S2 is peripheral, because the ending e causes alternation change of the last letter r to ˇr in the stem hor and, similarly, k to c in the stem ˇrek . Moreover, we can put all the endings from set S1 and S3 into one (newly created) set, say S5, because they are basic and are common for stems hor , slz and ˇrek . Now we can shortly write previous paradigms in the following way: horS5 hoˇr-S2 slzS5+S2 ˇrekS5 ˇrecS2 Every ending carries values of grammatical categories of the relevant word form.</S>
			<S sid ="49" ssid = "23">For example, all endings in previously defined sets are characterised as endings of nouns in feminine gender.</S>
			<S sid ="50" ssid = "24">Endings from sets S1 and S2 originate from the singular paradigm, the others (from S3) express plural.</S>
			<S sid ="51" ssid = "25">Thus, the set S5 now includes endings from both singular and plural paradigm and this information must be preserved and stored in the system, so we decided to use the following data structure for storing ending sets: S5=[1FS.](a,1)(y,2)(u,4)(o,5)(ou,7) [1FP.](y,1)( ,2)(´am,3)(y,4)(y,5) (´ach,6)(ami,7) S2=[1FS.](e,3)(e,6) Since endings, grammatical tags and values of grammatical categories repeat in the definitions of sets, we store them in unique tables and use references to these tables in the definitions of sets.</S>
			<S sid ="52" ssid = "26">In the next step, we perform further segmentation of stems into a stem base and an intersegment . The stem base is the part that is common to all word forms in the paradigm (it doesn’t change) and the intersegment is a final group of the stem which forms changes.</S>
			<S sid ="53" ssid = "27">We obtain the following segmentation of stems: ho-{r,ˇr} slz-{ } ˇre-{k,c} Since stems hor and ˇrek can be followed by the endings from the set S5, while stems hoˇr and ˇrec can be followed by endings from the set S2, and stem slz accepts endings from both S5 and S2, we have to store the information about the only possible combinations of stem bases, intersegments and endings in our system in the form of a pattern definition.</S>
			<S sid ="54" ssid = "28">To this end, we use the following data structure: hora+&lt;r&gt;S5&lt;ˇr&gt;S2 slza+&lt; &gt;S5,S2 ˇreka+&lt;k&gt;S5&lt;c&gt;S2 A pattern is denoted by its unique identifier (hora , slza , ˇreka ) and it consists of blocks that are prefixed with an intersegment visually closed in &lt;&gt;.</S>
			<S sid ="55" ssid = "29">The special character “ ” stands for an empty intersegment.</S>
			<S sid ="56" ssid = "30">Each block then contains a list of identifiers of sets.</S>
			<S sid ="57" ssid = "31">Identifiers of sets are visually separated by a comma in lists.</S>
			<S sid ="58" ssid = "32">Again, since intersegments and lists of identifiers repeat in the definitions of patterns, we store them in unique tables and use references to these tables in the definitions.</S>
	</SECTION>
	<SECTION title="Derivative  Processes. " number = "3">
			<S sid ="59" ssid = "1">As have been shown in the previous paradigms, the morphological process of inflection is captured by means of paradigms in our system.</S>
			<S sid ="60" ssid = "2">Compounding does not play crucial role in Czech morphology if compared with other languages, e. g. German [7].</S>
			<S sid ="61" ssid = "3">Therefore, the description of derivative processes remains untouched so far.</S>
			<S sid ="62" ssid = "4">It will be discussed in this section.</S>
			<S sid ="63" ssid = "5">The process of morphological derivation of new words, primarily with distinct POS categories, is considered as a higher degree of morphological process, in the level above the inflection.</S>
			<S sid ="64" ssid = "6">Indeed, for example, a particular class of deverbative adjectives can be derived from the derivation paradigm of transitive verbs.</S>
			<S sid ="65" ssid = "7">A hierarchical system of morphological paradigms has been implemented as a tool able to capture different levels of the Czech morphology.</S>
			<S sid ="66" ssid = "8">Hierarchical patterns are constructed fully automatically from the binding defined on the level of basic forms connecting always one lemma with another one by a specified type of a link.</S>
			<S sid ="67" ssid = "9">If a process could be described as a nary relation, it would be partitioned into n − 1 binary relations.</S>
			<S sid ="68" ssid = "10">This partitioning is much more flexible and allows automatic generalisations of derivation relations.</S>
			<S sid ="69" ssid = "11">To demonstrate the derivation binding on the level of lemmata, we present the following example with participles: poˇc´ıtat--(DEVESUBST)--poˇc´ıt´an´ı count--counting poˇc´ıtat--(DEVEADJPAS)--poˇc´ıtan´y count--counted poˇc´ıtat--(DEVEADJPASSHORT)--poˇc´ıt´an count--is counted poˇc´ıtat--(DEVEADJACTIMPF)--poˇc´ıtaj´ıc´ı count--is counting From the given example it follows that each link connects one base form of a word with another one and names such relation.</S>
			<S sid ="70" ssid = "12">If the label of a base form is unambiguous and therefore it can be used as a primary identifier it is sufficient to specify only these labels in the binding process.</S>
			<S sid ="71" ssid = "13">If the label itself can be ambiguous, the pairs of lemma and the relevant inflectional pattern are connected.</S>
			<S sid ="72" ssid = "14">However, even this approach is not able to represent completely the dependency of the relation on a particular sense of a word.</S>
			<S sid ="73" ssid = "15">For example, the relation “possessive adjective” applies only for the reading of jeˇr´ab denoting a bird.</S>
			<S sid ="74" ssid = "16">This is the reason why we have implemented the system connecting pairs of triplets of (sense-id, lemma, paradigm) by a named relation.</S>
			<S sid ="75" ssid = "17">Indexing techniques and dictionary methods [6] used in our implementation allow an efficient retrieval of related lemmata.</S>
			<S sid ="76" ssid = "18">It is also possible quickly return a chosen base form for a set of related words — the feature which is highly favourable in several applications, e.g. in the area of information retrieval or indexing Internet documents.</S>
			<S sid ="77" ssid = "19">The system of base form binding is not limited to the basic derivative processes described above.</S>
			<S sid ="78" ssid = "20">The same principle e.g. depicts two types of relation in the level under the basic derivation, namely original/adapted orthography and inflectional/non-inflectional doublets in the case of loanwords.</S>
			<S sid ="79" ssid = "21">The former can be demonstrated by the example of a link between gymnasium/gymna´zium (in the actual version of our morphological analyser we use even more elaborated assignment of these doublet types in the form of basic type of relation and more specific subtype).</S>
			<S sid ="80" ssid = "22">The example of inflectional/non-inflectional doublet is the link between the word abb´e assigned to the paradigm abb´e (non-inflectional) and Tony . It is of course possible to model such relations on the basic level of inflectional paradigms as a word-form homonymy.</S>
			<S sid ="81" ssid = "23">However, it would lead to the mixture of unrelated forms and would complicate special types of analyses, e.g. a style-checker analysis, that could be very interesting.</S>
			<S sid ="82" ssid = "24">There are other relations connecting lemmata above the level of basic derivative processes.</S>
			<S sid ="83" ssid = "25">We take advantage of the standard process and are able to uniformly describe such different relations as diminutives (and its degree): v˚uz--(DIMIN:1)--voz´ık v˚uz--(DIMIN:2)--voz´ıˇcek, aspectual relations of verbs: ˇr´ıci--(ASPPAIR)--ˇr´ıkat, iterative relations of verbs (together with “degrees”): chodit--(ITER:1)--chod´ıvat chodit--(ITER:2)--chod´ıv´avat, the relations between an animate noun and derived possessive adjective: otec--(MASCPOSS)--otc˚uv, the process of creation feminine from masculine nouns: soudce--(MASC2FEMI)--soudkynˇe, or synonyms and antonyms: kosmonaut--(SYNO)--astronaut mlad´y--(ANTO)--star´y. The last class of links brings us directly to other relations that can be found in semantic nets like Wordnet [9].</S>
			<S sid ="84" ssid = "26">The typical relations of hyperonym/hyponym, part/whole (meronyms) etc. are modelled on the higher level, the level based on synonyms, to be able to link groups of synonyms (that are called synsets in the context of Wordnet).</S>
			<S sid ="85" ssid = "27">The possibility of building complex structures of links, e.g. relations of relations, is also employed in connecting roots of loanwords to their Czech equivalents.</S>
			<S sid ="86" ssid = "28">Similarly to [12], we are therefore able to relate words derived from the Greek root kard with the group of Czech words derived from the Czech root srd , e.g. osrdeˇcn´ık, kardiostimulator, srdce, kardiologie .</S>
	</SECTION>
	<SECTION title="Czech Morphological Analyser ajka. " number = "4">
			<S sid ="87" ssid = "1">The key point of successful implementation of the analyser is an efficient storage mechanism for lexical items.</S>
			<S sid ="88" ssid = "2">A trie structure is used for storing stem bases of Czech word forms.</S>
			<S sid ="89" ssid = "3">One of the main disadvantages of this approach are high memory requirements.</S>
			<S sid ="90" ssid = "4">We tried to solve this problem by implementing the trie structure in the form of the minimal finite state automaton.</S>
			<S sid ="91" ssid = "5">The incremental method of building such an automaton was presented in [2] and is fast enough for our purpose.</S>
			<S sid ="92" ssid = "6">Moreover, the memory requirements for storing the minimal automaton are significantly lower (see Table 1).</S>
			<S sid ="93" ssid = "7">There are two binary files that are essential for the analyser.</S>
			<S sid ="94" ssid = "8">One of them contains definitions of sets of endings and morphological patterns stored in data structures described in Section 2.</S>
			<S sid ="95" ssid = "9">The source of this binary file is a text file with definitions of ending sets and patterns.</S>
			<S sid ="96" ssid = "10">The second is a binary image of the Czech Machine Dictionary and contains stem bases of Czech words and auxiliary data structures.</S>
			<S sid ="97" ssid = "11">We developed a program abin that can read both of these text files and efficiently store their content into appropriate data structures in destination binary files.</S>
			<S sid ="98" ssid = "12">The first action of the analyser is loading these binary files.</S>
			<S sid ="99" ssid = "13">These files are not further processed, they are only loaded into memory.</S>
			<S sid ="100" ssid = "14">The main reason for this solution is to allow as quick a start of the analyser as possible.</S>
			<S sid ="101" ssid = "15">The next actions of the analyser are determined by steps of the morphological analysis algorithm.</S>
			<S sid ="102" ssid = "16">The basic principle of the algorithm is based on the segmentation described in Section 2.</S>
			<S sid ="103" ssid = "17">The separated ending then determines values of grammatical categories.</S>
			<S sid ="104" ssid = "18">More details can be found in [13].</S>
			<S sid ="105" ssid = "19">Another feature of the analyser is a possibility to select various forms of the basic word form (lemma).</S>
			<S sid ="106" ssid = "20">Finally, user can have more versions of binary files that contain morphological information and stem bases and can specify which pair should be used by the analyser.</S>
			<S sid ="107" ssid = "21">Users can take advantage of this feature to “switch on” analysis of colloquial Czech, domain-specific texts etc. The power of the analyser can be evaluated by two features.</S>
			<S sid ="108" ssid = "22">The most important thing is number of words that can be recognised by the analyser.</S>
			<S sid ="109" ssid = "23">This number depends on the quality and richness of the dictionary.</S>
			<S sid ="110" ssid = "24">Our database contains 223,600 stem bases and ajka is able to analyse (and generate) 5,678,122 correct Czech word forms.</S>
			<S sid ="111" ssid = "25">The second feature is the speed of analysis.</S>
			<S sid ="112" ssid = "26">In the brief mode, ajka can analyse more than 20,000 words per second on PentiumIII processor with the frequency of 800MHz.</S>
			<S sid ="113" ssid = "27">Some other statistic data, such as number of segments and size of binary files, is shown in the following Table 1.</S>
			<S sid ="114" ssid = "28">Table 1.</S>
			<S sid ="115" ssid = "29">Statistic data #int erse gme nts 779 #en din gs 643 #set s of endi ngs 2,8 06 #pa tter ns 1,5 70 #ste m bas es 223 ,60 0 #ge nera ted wor d form s 5,6 78, 122 #ge ner ate d tags 1,6 04 spe ed of the anal ysis 20,0 00 wor ds/s dicti ona ry 1,93 0,52 9 Byte s mor ph.</S>
			<S sid ="116" ssid = "30">info rma tion 147, 675 Byt es</S>
	</SECTION>
	<SECTION title="Conclusion. " number = "5">
			<S sid ="117" ssid = "1">The morphological analyser ajka has been tested on large corpora containing 100,000,000 positions.</S>
			<S sid ="118" ssid = "2">Based on the test results, the definitions of sets of endings and patterns as well as the Czech Machine Dictionary are being extended by some missing, mostly foreign-language stem bases and their appropriate patterns and endings.</S>
			<S sid ="119" ssid = "3">In its current state, ajka can be used for morphological analysis of any raw Czech texts.</S>
			<S sid ="120" ssid = "4">The analyser ajka can readily be adapted to other inflectional languages that have to deal with morphological analysis.</S>
			<S sid ="121" ssid = "5">In general, only the language-specific parts of the system, i.e. definitions of sets of endings and the dictionary, which are stored as text files, have to be replaced for this purpose.</S>
	</SECTION>
</PAPER>
