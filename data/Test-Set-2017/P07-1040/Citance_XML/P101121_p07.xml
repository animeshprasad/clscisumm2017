<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">We present three modifications of well- established automatic machine translation evaluation measures, to improve correlation between those measures and human evaluation.</S>
		<S sid ="2" ssid = "2">Following Lin &amp; Och, we present an improved version of the BLEU score, which uses a smoothed geometric mean for combining different n-gram precisions.</S>
		<S sid ="3" ssid = "3">We use segment boundary markers to increase the weight of words near the segment boundaries in the BLEU score.</S>
		<S sid ="4" ssid = "4">Our second MT evaluation measure is a variant of the WER which allows for block movements, but does not demand complete and disjoint coverage of the source sentence.</S>
		<S sid ="5" ssid = "5">As this might be problematic if MT systems are tuned on this score, we later investigate a linear combination of this measure with PER.</S>
		<S sid ="6" ssid = "6">Finally, we describe an edit distance similar to TER, which also allows for block reordering.</S>
		<S sid ="7" ssid = "7">Our measure uses a full search, but with the constraint that block operations must be bracketed.</S>
		<S sid ="8" ssid = "8">We describe this measure using a Bracketing Transduction Grammar, and sketch a polynomial-time algorithm for its calculation.</S>
		<S sid ="9" ssid = "9">We also modify the WER-like measures such that they use word-dependent substitution costs instead of fixed ones to model the similarity between words.</S>
		<S sid ="10" ssid = "10">Experimental comparison of these measures show that our new measures correlate significantly better with human judgment than the original measures.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="11" ssid = "11">For a couple of reasons, automatic evaluation of Machine Translation (MT) systems is a difficult task, mostly because it is difficult to define when a translation is good, and when it is bad.</S>
			<S sid ="12" ssid = "12">Or which of two given translations is better, and which one is worse.</S>
			<S sid ="13" ssid = "13">The main reason for this are ambiguities in natural languages: Usually, there is more than one correct translation for a source sentences; there are ambiguities in the choice of synonyms as well as in the order of the words.</S>
			<S sid ="14" ssid = "14">Because of the difficulty of this task, a multitude of automatic MT evaluation measures have been defined over the last couple of years.</S>
			<S sid ="15" ssid = "15">Some of these measures have become well- established, for example BLEU or TER, others are only of medium or small significance.</S>
			<S sid ="16" ssid = "16">We expect that in the context of NIST’s Metrics MATR evaluation, more measures will be added to the pool of evaluation measures.</S>
			<S sid ="17" ssid = "17">In a few previous papers, the proposed measures seemed to be more of theoretical interest than of practical use: While they certainly emphasis important linguistic effects, it is not investigated systematically in how far these effects play a role in the difference in quality in different MT systems.</S>
			<S sid ="18" ssid = "18">Some other proposed evaluation measures seemed to focus on specific properties and features of the previously generated translations they are trained or optimized on, which can (but does not need to) lead to evaluation measures which are basically classifiers dividing previously good from previously poor systems, or “easy” from “difficult” source sentences.</S>
			<S sid ="19" ssid = "19">If measures with this property are used to tune a typical statistical MT system, it can sometimes be observed that the MT system learns to “play” against this, and might even learn to produce translations which show the “good” features without actually being good translations.</S>
			<S sid ="20" ssid = "20">For example, Rosti et al.</S>
			<S sid ="21" ssid = "21">(2007) report such an effect.</S>
			<S sid ="22" ssid = "22">This is not to say that all new measures share these problems, nor that there is no need for MT evaluation measures which go beyond lexical comparison – quite the opposite.</S>
			<S sid ="23" ssid = "23">But these issues were the motivation for us to start from established evaluation measures, with known properties especially with regard to tuning, and alter them at a few selected points to improve their correlation with human judgment.</S>
			<S sid ="24" ssid = "24">This paper is organized as follows: In Section 2, we describe some modifications to the BLEU score, following Lin and Och (2004), and Leusch et al.</S>
			<S sid ="25" ssid = "25">(2005).</S>
			<S sid ="26" ssid = "26">We present a simple variant of WER in Section 3, called CDER, which allows for block transposition similar to TER, following Leusch et al.</S>
			<S sid ="27" ssid = "27">(2006).</S>
			<S sid ="28" ssid = "28">This measure can be efficiently calculated exactly, without having to resort to shift heuristics or greedy search as in TER.</S>
			<S sid ="29" ssid = "29">The tradeoff is that this measure by itself measures basically recall, not precision.</S>
			<S sid ="30" ssid = "30">To overcome this bias, we will later propose a linear combination of this measure and PER in Section 6.</S>
			<S sid ="31" ssid = "31">Before this, in Section 4, we describe another variant of TER which can be exactly calculated in polynomial time, this time by restricting possible shifts to ITG constrains.</S>
			<S sid ="32" ssid = "32">This method follows Leusch et al.</S>
			<S sid ="33" ssid = "33">(2003).</S>
			<S sid ="34" ssid = "34">We call this measure IN- VWER.</S>
			<S sid ="35" ssid = "35">In Section 5, we introduce two simple methods following Leusch et al.</S>
			<S sid ="36" ssid = "36">(2006) to improve edit- operation–based measures like PER, WER, TER, and CDER/INVWER by taking into account the lexical difference of words in a substitution operation.</S>
			<S sid ="37" ssid = "37">After an experimental evaluation of our three proposed evaluation measures in Section 7, we conclude this paper in Section 8.</S>
	</SECTION>
	<SECTION title="BLEUSP. " number = "2">
			<S sid ="38" ssid = "1">BLEU (Papineni et al., 2001) is a precision measure based on n-gram count vectors.</S>
			<S sid ="39" ssid = "2">The precision is modified such that multiple references are combined into a single n-gram count vector.</S>
			<S sid ="40" ssid = "3">Multiple occurrences of an n-gram in the candidate sentence are counted as correct only up to the maximum occurrence count within the reference sentences.</S>
			<S sid ="41" ssid = "4">Typically, unigrams, bigrams, trigrams, and four-grams are used for BLEU; their four precisions are combined using the geometric mean.</S>
			<S sid ="42" ssid = "5">To avoid a bias towards short candidate sentences consisting of “safe guesses” only, sentences shorter than the reference length will be penalized with a brevity penalty.</S>
			<S sid ="43" ssid = "6">In the original BLEU definition there is no smoothing for the geometric mean.</S>
			<S sid ="44" ssid = "7">This has the disadvantage that the whole score becomes zero already if the four-gram precision is zero, which especially happens often with short or difficult translations.</S>
			<S sid ="45" ssid = "8">As a result, sentence-level scores are often quite noisy, and not usable for evaluation.</S>
			<S sid ="46" ssid = "9">To allow for sentence-wise evaluation, Lin and Och (2004) define the BLEUS measure, which is basically BLEU where all bi-, tri-, and four-gram counts are initialized with 1 instead of 0.</S>
			<S sid ="47" ssid = "10">We have adopted this technique for this study, as experiments showed a clear improvement over BLEU in terms of correlation with human judgment on segment and document level; the effect on system level scores is negligible due to the already high n-gram counts here.</S>
			<S sid ="48" ssid = "11">In our experiments, BLEU and BLEUS lack in another minor point: The position of a word within a sentence can be quite significant for the correctness of the sentence.</S>
			<S sid ="49" ssid = "12">WER, TER, and CDER/INVWER (Sections 3 and 4) explicitly take into account the ordering of the words in a sentence.</S>
			<S sid ="50" ssid = "13">This is not the case with BLEU, although the order of inner words is regarded implicitly by n-gram overlap.</S>
			<S sid ="51" ssid = "14">To model the position of words at the initial or the end of a sentence, we enclose the sentence with artificial sentence boundary tokens.</S>
			<S sid ="52" ssid = "15">For example, the sentence A B C is considered to consist of • the unigrams [A], [B], and [C], • the bigrams [&lt;s&gt; A], [A B], [B C], and [C &lt;/s&gt;], • the trigrams [&lt;s&gt; &lt;s&gt; A], [&lt;s&gt; A B], [A B C], [B C &lt;/s&gt;], and [C &lt;/s&gt; &lt;/s&gt;], • etc. In the measure we denote as BLEUSP, all n- grams are counted like this for all candidate and reference segments, and for these counts, the BLEUS score is calculated.</S>
	</SECTION>
	<SECTION title="CDER. " number = "3">
			<S sid ="53" ssid = "1">As translations of sentences are often ambiguous in the order of phrases, reorderings of whole blocks of . o’clock seven at airport the at met we candida te be depicted using an alignme nt grid as shown in Figure 1: Here, each grid point corresp onds to a pair of inter word position s in candidat e and referenc e sentence, respecti vely.</S>
			<S sid ="54" ssid = "2">dLJ is the minimu m cost of a path between the lower left (first) and the upper right (last) alignme nt grid point which covers all reference and candidat e words.</S>
			<S sid ="55" ssid = "3">Deletion s and insertio ns corresp ond to horizont al and vertical edges, respectively.</S>
			<S sid ="56" ssid = "4">Substitu tions and identity operatio ns correspond to diagonal edges.</S>
			<S sid ="57" ssid = "5">Edges between arbitrar y grid points from the same row corresp ond to long jump operatio ns.</S>
			<S sid ="58" ssid = "6">It is easy to see that dLJ is symmetrica l. Lopre sti and Tomkins (1997) showed that finding an optimal path in a long jump alignme nt grid is deletion identity best path an NP-hard problem.</S>
			<S sid ="59" ssid = "7">Our experiments showed that insertion substitution long jump block start/ end node the calculation of exact long jump distances thus becomes impractical for sentences longer than about 20 words.</S>
			<S sid ="60" ssid = "8">A possible way to achieve polynomial run-time Figure 1: Example of a long jump alignment grid.</S>
			<S sid ="61" ssid = "9">All possible deletion, insertion, identity and substitution operations are depicted.</S>
			<S sid ="62" ssid = "10">Only long jump edges from the best path are drawn.</S>
			<S sid ="63" ssid = "11">words should not be penalized too hard by an MT evaluation measure.</S>
			<S sid ="64" ssid = "12">WER, which is based on the classical Levenshtein distance (Levenshtein, 1966), penalizes block reorderings rather hard – each word that has been shifted usually needs to be deleted in its old position, and inserted in its new position.</S>
			<S sid ="65" ssid = "13">One approach here is to extend the Levenshtein distance by an additional operation, namely block movement (or shift, as it is called in TER (Snover et al., 2005)).</S>
			<S sid ="66" ssid = "14">Note that the number of blocks in a sentence is equal to the number of gaps among the blocks plus one.</S>
			<S sid ="67" ssid = "15">Thus, the block movements can equivalently be expressed as long jump operations that jump over the gaps between two blocks.</S>
			<S sid ="68" ssid = "16">The costs of a long jump are considered constant.</S>
			<S sid ="69" ssid = "17">The blocks are read in the order of one of the sentences.</S>
			<S sid ="70" ssid = "18">These long jumps are combined with the “classical” Levenshtein edit operations, namely insertion, deletion, substitution, and the zero-cost operation identity.</S>
			<S sid ="71" ssid = "19">The resulting long jump distance dLJ gives the minimum number of operations which are necessary to transform the candidate sentence into the reference sentence.</S>
			<S sid ="72" ssid = "20">Like the Levenshtein distance, the long jump distance can is to restrict the number of admissible block permutations, for example as in Section 4.</S>
			<S sid ="73" ssid = "21">Alternatively, a heuristic or approximative distance can be calculated, as in GTM (Turian et al., 2003).</S>
			<S sid ="74" ssid = "22">An implementation of both approaches at the same time can be found in TER.</S>
			<S sid ="75" ssid = "23">In the following section we will present another approach which has a suitable run-time, while still maintaining completeness of the calculated measure.</S>
			<S sid ="76" ssid = "24">The idea of the proposed method is to drop some restrictions on the alignment path.</S>
			<S sid ="77" ssid = "25">The long jump distance as well as the Levenshtein distance require both reference and candidate translation to be covered completely and disjointly.</S>
			<S sid ="78" ssid = "26">When extending the metric by block movements, we drop this constraint for the candidate translation.</S>
			<S sid ="79" ssid = "27">That is, only the words in the reference sentence have to be covered exactly once, whereas those in the candidate sentence can be covered zero, one, or multiple times.</S>
			<S sid ="80" ssid = "28">Dropping the constraints allows for an efficient computation of the distance.</S>
			<S sid ="81" ssid = "29">We drop the constraints for the candidate sentence and not for the reference sentence because we do not want any information contained in the reference to be omitted.</S>
			<S sid ="82" ssid = "30">Moreover, the reference translation will not contain unnecessary repetitions of blocks.</S>
			<S sid ="83" ssid = "31">The new measure, which we call CDER, can thus be seen as a measure oriented towards recall, while measures like BLEU are guided by precision.</S>
			<S sid ="84" ssid = "32">The CDER is based on the C DC D distance1 introduced by Lopresti and Tomkins (1997).</S>
			<S sid ="85" ssid = "33">The authors show that the problem of finding the optimal solution can be solved in O(I 2 · J ) time, where I is the length of the candidate sentence and J the length of the reference sentence.</S>
			<S sid ="86" ssid = "34">Within this paper, we will refer to this distance as dCD . In (Leusch et al., 2006) we showed how it can be computed in O(I · J ) time using a modification of the Levenshtein algorithm.</S>
			<S sid ="87" ssid = "35">We also studied the reverse direction of the described measure; that is, we dropped the coverage constraints for the reference sentence instead of the candidate sentence.</S>
			<S sid ="88" ssid = "36">Additionally, the maximum of both directions has been considered as distance measure.</S>
	</SECTION>
	<SECTION title="INVWER. " number = "4">
			<S sid ="89" ssid = "1">Another approach to circumvent the NP-hardness of the block reordering problem is to reduce the search space by restricting the number of admissible block permutations: 4.1 Bracketed transpositions.</S>
			<S sid ="90" ssid = "2">In order to reduce the complexity of the search, we restrict consequent block transpositions to be bracketed, i.e. the two blocks to be swapped must both lie either completely within or completely out of any blocks from previous operations.</S>
			<S sid ="91" ssid = "3">The following examples illustrate admissible and forbidden block transpositions.</S>
			<S sid ="92" ssid = "4">The brackets indicate the blocks that are swapped.</S>
			<S sid ="93" ssid = "5">In the transformation of ABC D into C DBA in (1), only transpositions within these blocks are performed.</S>
			<S sid ="94" ssid = "6">In (2), the transformation from BC DA into BDAC crosses the blocks BC D and A from the previous transposition and is therefore forbidden.</S>
			<S sid ="95" ssid = "7">1.</S>
			<S sid ="96" ssid = "8">Admissible transpositions:.</S>
			<S sid ="97" ssid = "9">(A)(B C D) → ((B) (C D))(A) → ((C D) (B))(A) 2.</S>
			<S sid ="98" ssid = "10">Forbidden transpositions:.</S>
			<S sid ="99" ssid = "11">(A)(B C D) → (B C D)(A) /→ (B)(D A)(C) A concise definition of the Levenshtein and block transposition (shift) edit operations can be given us 1 C stands for cover and D for disjoint.</S>
			<S sid ="100" ssid = "12">We adopted this notion for our measures.</S>
			<S sid ="101" ssid = "13">ing bracketing transduction grammars.</S>
			<S sid ="102" ssid = "14">4.2 Bracketing Transduction Grammars.</S>
			<S sid ="103" ssid = "15">A bracketing transduction grammar (BTG) (Wu, 1995) is a pair-of-strings model that generates two output strings s and t. It consists of one common set of production rules for both output strings.</S>
			<S sid ="104" ssid = "16">A BTG always generates a pair of sentences.</S>
			<S sid ="105" ssid = "17">Terminals are pairs of symbols, where each may be the empty word E. Concatenation of the terminals and nonterminals on the right hand side of a production rule is either straight, denoted by [·], or inverted, denoted by (·).</S>
			<S sid ="106" ssid = "18">In the former case, the parse subtree is to be read left-to-right in both s and t, and in the latter case it is to be read left-to-right in s and right-to-left in t. A BTG contains only the start symbol S and one non- terminal symbol A, and each production rule consists of either a string of As or a terminal pair.</S>
			<S sid ="107" ssid = "19">Using the BTG formalism, we can describe the edit operations Inversion (= Shift), Substitution, Deletion, Insertion, as production rules, associated with a cost function c: 1.</S>
			<S sid ="108" ssid = "20">Concatenation: A → [AA].</S>
			<S sid ="109" ssid = "21">with c([αβ]) = c(α) + c(β) 2.</S>
			<S sid ="110" ssid = "22">Inversion: A → (AA).</S>
			<S sid ="111" ssid = "23">with c((αβ)) = c(α) + c(β) + cINV 3.</S>
			<S sid ="112" ssid = "24">Identity: A → x/x. with c(x/x) = 0 4.</S>
			<S sid ="113" ssid = "25">Substitution: A → x/y, where x /= y. with c(x/y) = cSUB</S>
	</SECTION>
	<SECTION title="Deletion:        A → x/E. " number = "5">
			<S sid ="114" ssid = "1">with c(x/E) = cDEL</S>
	</SECTION>
	<SECTION title="Insertion:       A → E/y. " number = "6">
			<S sid ="115" ssid = "1">with c(E/y) = cINS</S>
	</SECTION>
	<SECTION title="Start:              S → A; S → E/E. " number = "7">
			<S sid ="116" ssid = "1">with c(E/E) = 0 We define the inversion edit distance between a candidate sentence eI and a reference sentence e˜J to 1 1 be the minimum cost of the set T (sI , tJ ) of all parse 1 1 trees generated by the BTG for this sentence pair: (b) The triangular inequation holds: it is always cheaper to replace e by e˜ than to re dinv (sI , tJ ) := min c(τ ) (1) place e by et and then et by e˜.</S>
			<S sid ="117" ssid = "2">1 1 τ ∈T (sI ,tJ ) 1 1 Note that, without the inversion rule, the minimum production cost equals the Levenshtein distance.</S>
			<S sid ="118" ssid = "3">We use this distance to define our error measure, the Inversion Word Error Rate (INVWER), by normalizing it by the reference length.</S>
			<S sid ="119" ssid = "4">The distance can be calculated by an algorithm similar to a 2-dimensional CYK algorithm in time O(I 3J 3) 3.</S>
			<S sid ="120" ssid = "5">The costs of substituting a word e by e˜ are al-.</S>
			<S sid ="121" ssid = "6">ways equal or lower than those of deleting e and then inserting e˜.</S>
			<S sid ="122" ssid = "7">In short, cSUB ≤ 2.</S>
			<S sid ="123" ssid = "8">Under these conditions the algorithms for WER and CDER can easily be modified to use word- dependent substitution costs.</S>
			<S sid ="124" ssid = "9">For example, the only necessary modification in the CDER algorithm is to and space O(I 2J 2), as described in (Leusch et al., replace c SUB by c SUB (e, e˜) in Subsection 4.2.</S>
			<S sid ="125" ssid = "10">2003).</S>
			<S sid ="126" ssid = "11">Because the algorithm has basically a time complexity in Θ(I 6) if I ≈ J , it can become quite slow for long sentences.</S>
			<S sid ="127" ssid = "12">Because of this, we split sentences longer than 30 words, parallel in candidate and reference on PER-optimal split points.</S>
			<S sid ="128" ssid = "13">5 Word-dependent Substitution Costs.</S>
			<S sid ="129" ssid = "14">All automatic error measures which are based on the edit distance (for example WER, PER, TER, CDER, INVWER) assume fixed costs for the substitution of words.</S>
			<S sid ="130" ssid = "15">However, this is counter-intuitive, as replacing a word with another one which has a similar meaning will rarely change the meaning of a sentence significantly.</S>
			<S sid ="131" ssid = "16">On the other hand, replacing the same word with a completely different one probably will.</S>
			<S sid ="132" ssid = "17">Therefore, it seems advisable to make substitution costs dependent on the semantical and/or syntactical dissimilarity of the words.</S>
			<S sid ="133" ssid = "18">METEOR (Banerjee and Lavie, 2005) uses a similar idea of graduated similarity between words (exact match, stem match, WORDNET match), but instead of assuming different costs, it uses a matching procedure which matches the most similar words first.</S>
			<S sid ="134" ssid = "19">The MT system combination approach of Ayan et al.</S>
			<S sid ="135" ssid = "20">(2008) uses WORDNET matches as well as exact matches, and uses different costs for these matches.</S>
			<S sid ="136" ssid = "21">For algorithmic reasons, it is helpful to demand that an arbitrary substitution cost function cSUB for two words e, e˜ meets the following requirements: 1.</S>
			<S sid ="137" ssid = "22">cSUB depends only on e and e˜.</S>
			<S sid ="138" ssid = "23">2.</S>
			<S sid ="139" ssid = "24">cSUB is a metric; especially For PER, it is no longer possible to use a linear time algorithm in the general case.</S>
			<S sid ="140" ssid = "25">Instead, we use a modification of the Hungarian algorithm (Knuth, 1993).</S>
			<S sid ="141" ssid = "26">The question is now how to define the word- dependent substitution costs.</S>
			<S sid ="142" ssid = "27">A pragmatic approach is to compare the spelling of the words to be substituted with each other.</S>
			<S sid ="143" ssid = "28">The more similar the spelling is, the more similar we consider the words to be, and the lower we want the substitution costs between them to be.</S>
			<S sid ="144" ssid = "29">In English, this works well with similar tenses of the same verb, or with genitives or plurals of the same noun.</S>
			<S sid ="145" ssid = "30">Nevertheless, a similar spelling is no guarantee for a similar meaning, because prefixes such as “mis-”, “in-”, or “un-” can change the meaning of a word significantly.</S>
			<S sid ="146" ssid = "31">We have studied two different approaches to use the similarity in the spelling of two words as a substitution cost: 5.1 Character-based Levenshtein Distance.</S>
			<S sid ="147" ssid = "32">An obvious way of comparing the spelling is the Levenshtein distance.</S>
			<S sid ="148" ssid = "33">Here, words are compared on character level.</S>
			<S sid ="149" ssid = "34">To normalize this distance into a range from 0 (for identical words) to 1 (for completely different words), we divide the absolute distance by the length of the Levenshtein alignment path.</S>
			<S sid ="150" ssid = "35">5.2 Common Prefix Length.</S>
			<S sid ="151" ssid = "36">Another character-based substitution cost function we studied is based on the common prefix length of both words.</S>
			<S sid ="152" ssid = "37">In English, different tenses of the Table 1: Example of word-dependent substitution costs.</S>
			<S sid ="153" ssid = "38">7 6 5 4.5 and genders of most nouns and adjectives.</S>
			<S sid ="154" ssid = "39">However, it does not hold if verb prefixes are changed or removed.</S>
			<S sid ="155" ssid = "40">On the other hand, the common prefix length is sensitive to critical prefixes such as “mis-” for the same reason.</S>
			<S sid ="156" ssid = "41">Consequently, the common prefix length, normalized by the average length of both words, gives a reasonable measure for the similarity of two words.</S>
			<S sid ="157" ssid = "42">To transform the normalized common prefix length into costs, this fraction is then subtracted from 1.</S>
			<S sid ="158" ssid = "43">An example for these two approaches is shown in Table 1.</S>
			<S sid ="159" ssid = "44">6 Linear Combination of evaluation.</S>
			<S sid ="160" ssid = "45">measures An interesting topic in MT evaluation research is the question whether different MT evaluation measures can be combined into a consensus score, which hopefully shows a better correlation with the target – human evaluation – than the single measures.</S>
			<S sid ="161" ssid = "46">Recently, Albrecht &amp; Hwa (2007) have investigated on the combination of up to 53 measures and features in a regression model and a classifier as evaluation measure.</S>
			<S sid ="162" ssid = "47">Also, a linear combination of BLEU and TER has been successfully used for tuning MT systems (Mauser et al., 2008; Rosti et al., 2008).</S>
			<S sid ="163" ssid = "48">In our approach, we only are interested in the linear combination of two MT evaluation measures, particularly the combination of CDER and PER.</S>
			<S sid ="164" ssid = "49">We expect this combination to have a higher correlation with human evaluation than the measures alone.</S>
			<S sid ="165" ssid = "50">CDER (as opposed to PER) has the ability to reward correct local ordering, whereas PER (as opposed to CDER) penalizes overly long candidate sentences.</S>
			<S sid ="166" ssid = "51">The two measures were combined with linear interpolation.</S>
			<S sid ="167" ssid = "52">In order to determine the weights, we performed data analysis on seven different corpora in (Leusch et al., 2006).</S>
			<S sid ="168" ssid = "53">The results were consistent across all different data collections and language pairs: a lin Table 2: Corpus statistics of the MATR MT06 corpus that was used for experimental evaluation of the proposed measures.</S>
			<S sid ="169" ssid = "54">La ng ua ge pa ir (A ra bi c) – E ng lis h G en re N e w s w i r e t e x t s M T sy st e m s 8 D oc u m en ts 2 5 Se g m en ts 2 4 9 R ef er en ce s/ se g 4 H yp . le ng th 32 .5 Re f. le ng th 34 .3 Hu m an ev al ua tio n ad eq ua cy (1.</S>
			<S sid ="170" ssid = "55">. . 7) ear combination of about 60% CDER and 40% PER has a significantly higher correlation with human evaluation than each of the measures alone.</S>
			<S sid ="171" ssid = "56">Consequently, we chose these weights for the NIST Metrics MATR evaluation as well.</S>
			<S sid ="172" ssid = "57">7 Experimental results.</S>
			<S sid ="173" ssid = "58">For an experimental comparison of the different evaluation measures, we calculated the correlation between these measures and human evaluation, in particular the “adequacy”, for the MT06 corpus provided by NIST and LDC for the Metrics MATR 2008 evaluation (NIST, 2008).</S>
			<S sid ="174" ssid = "59">This corpus consists of translations of 25 Arabic newswire documents into English, as generated by 8 MT systems that participated in NIST’s 2006 MT evaluation.</S>
			<S sid ="175" ssid = "60">Some statistics on this corpus are listed in Table 2.</S>
			<S sid ="176" ssid = "61">Within NIST’s Metrics MATR evaluation, another corpus was provided to participants for metrics evaluation.</S>
			<S sid ="177" ssid = "62">But due to its extremely limited size – a single document consisting of 16 segments – correlation results generated on this corpus are quite noisy, and of limited significance.</S>
			<S sid ="178" ssid = "63">Table 3: Pearson’s r and Kendall’s τ (absolute) between adequacy and automatic evaluation measures on different levels of the MATR MT06 data.</S>
			<S sid ="179" ssid = "64">M ea su re r τ τ¯ se g do c sy s se g do c sy s sy s/s eg sy s/ do c W ER W ER + c( w) PE R PE R + c( w) 0.</S>
			<S sid ="180" ssid = "65">6 2 1 0.</S>
			<S sid ="181" ssid = "66">6 2 6 0.</S>
			<S sid ="182" ssid = "67">5 9 7 0.</S>
			<S sid ="183" ssid = "68">5 8 6 0.</S>
			<S sid ="184" ssid = "69">85 3 0.</S>
			<S sid ="185" ssid = "70">86 0 0.</S>
			<S sid ="186" ssid = "71">85 2 0.</S>
			<S sid ="187" ssid = "72">85 8 0.</S>
			<S sid ="188" ssid = "73">95 3 0.</S>
			<S sid ="189" ssid = "74">95 4 0.</S>
			<S sid ="190" ssid = "75">95 8 0.</S>
			<S sid ="191" ssid = "76">96 6 0.</S>
			<S sid ="192" ssid = "77">5 0 3 0.</S>
			<S sid ="193" ssid = "78">5 0 6 0.</S>
			<S sid ="194" ssid = "79">4 8 2 0.</S>
			<S sid ="195" ssid = "80">4 8 3 0.</S>
			<S sid ="196" ssid = "81">59 9 0.</S>
			<S sid ="197" ssid = "82">60 8 0.</S>
			<S sid ="198" ssid = "83">58 8 0.</S>
			<S sid ="199" ssid = "84">59 0 0.</S>
			<S sid ="200" ssid = "85">57 1 0.</S>
			<S sid ="201" ssid = "86">57 1 0.</S>
			<S sid ="202" ssid = "87">64 3 0.</S>
			<S sid ="203" ssid = "88">71 4 0.</S>
			<S sid ="204" ssid = "89">58 4 0.</S>
			<S sid ="205" ssid = "90">58 0 0.</S>
			<S sid ="206" ssid = "91">57 6 0.</S>
			<S sid ="207" ssid = "92">55 9 0.</S>
			<S sid ="208" ssid = "93">64 1 0.</S>
			<S sid ="209" ssid = "94">65 3 0.</S>
			<S sid ="210" ssid = "95">64 4 0.</S>
			<S sid ="211" ssid = "96">64 6 B LE U ( mi n R ef ) B L E U ( a v g R e f ) B L E U S B LE U SP 0.</S>
			<S sid ="212" ssid = "97">5 9 2 0.</S>
			<S sid ="213" ssid = "98">5 9 8 0.</S>
			<S sid ="214" ssid = "99">6 7 2 0.</S>
			<S sid ="215" ssid = "100">6 8 7 0.</S>
			<S sid ="216" ssid = "101">84 4 0.</S>
			<S sid ="217" ssid = "102">85 7 0.</S>
			<S sid ="218" ssid = "103">86 0 0.</S>
			<S sid ="219" ssid = "104">87 7 0.</S>
			<S sid ="220" ssid = "105">94 3 0.</S>
			<S sid ="221" ssid = "106">95 5 0.</S>
			<S sid ="222" ssid = "107">95 5 0.</S>
			<S sid ="223" ssid = "108">96 1 0.</S>
			<S sid ="224" ssid = "109">4 7 6 0.</S>
			<S sid ="225" ssid = "110">4 8 3 0.</S>
			<S sid ="226" ssid = "111">5 4 1 0.</S>
			<S sid ="227" ssid = "112">5 4 2 0.</S>
			<S sid ="228" ssid = "113">58 0 0.</S>
			<S sid ="229" ssid = "114">60 2 0.</S>
			<S sid ="230" ssid = "115">60 6 0.</S>
			<S sid ="231" ssid = "116">61 3 0.</S>
			<S sid ="232" ssid = "117">57 1 0.</S>
			<S sid ="233" ssid = "118">64 3 0.</S>
			<S sid ="234" ssid = "119">64 3 0.</S>
			<S sid ="235" ssid = "120">64 3 0.</S>
			<S sid ="236" ssid = "121">57 8 0.</S>
			<S sid ="237" ssid = "122">58 7 0.</S>
			<S sid ="238" ssid = "123">59 0 0.</S>
			<S sid ="239" ssid = "124">60 9 0.</S>
			<S sid ="240" ssid = "125">58 8 0.</S>
			<S sid ="241" ssid = "126">61 2 0.</S>
			<S sid ="242" ssid = "127">61 5 0.</S>
			<S sid ="243" ssid = "128">61 8 T ER IN V W ER IN V W ER + c( w) 0.</S>
			<S sid ="244" ssid = "129">5 9 7 0.</S>
			<S sid ="245" ssid = "130">6 3 8 0.</S>
			<S sid ="246" ssid = "131">6 4 9 0.</S>
			<S sid ="247" ssid = "132">84 9 0.</S>
			<S sid ="248" ssid = "133">86 7 0.</S>
			<S sid ="249" ssid = "134">87 1 0.</S>
			<S sid ="250" ssid = "135">95 7 0.</S>
			<S sid ="251" ssid = "136">95 8 0.</S>
			<S sid ="252" ssid = "137">95 8 0.</S>
			<S sid ="253" ssid = "138">4 9 5 0.</S>
			<S sid ="254" ssid = "139">5 0 9 0.</S>
			<S sid ="255" ssid = "140">5 1 2 0.</S>
			<S sid ="256" ssid = "141">60 2 0.</S>
			<S sid ="257" ssid = "142">60 6 0.</S>
			<S sid ="258" ssid = "143">60 6 0.</S>
			<S sid ="259" ssid = "144">57 1 0.</S>
			<S sid ="260" ssid = "145">57 1 0.</S>
			<S sid ="261" ssid = "146">57 1 0.</S>
			<S sid ="262" ssid = "147">59 5 0.</S>
			<S sid ="263" ssid = "148">58 3 0.</S>
			<S sid ="264" ssid = "149">57 3 0.</S>
			<S sid ="265" ssid = "150">66 7 0.</S>
			<S sid ="266" ssid = "151">64 3 0.</S>
			<S sid ="267" ssid = "152">63 8 C D ER + c( w) C D ER + PE R + c( w) 0.</S>
			<S sid ="268" ssid = "153">7 0 8 0.</S>
			<S sid ="269" ssid = "154">6 9 0 0.</S>
			<S sid ="270" ssid = "155">89 1 0.</S>
			<S sid ="271" ssid = "156">88 5 0.</S>
			<S sid ="272" ssid = "157">97 3 0.</S>
			<S sid ="273" ssid = "158">97 5 0.</S>
			<S sid ="274" ssid = "159">5 5 8 0.</S>
			<S sid ="275" ssid = "160">5 4 3 0.</S>
			<S sid ="276" ssid = "161">64 3 0.</S>
			<S sid ="277" ssid = "162">63 2 0.</S>
			<S sid ="278" ssid = "163">71 4 0.</S>
			<S sid ="279" ssid = "164">71 4 0.</S>
			<S sid ="280" ssid = "165">62 3 0.</S>
			<S sid ="281" ssid = "166">61 0 0.</S>
			<S sid ="282" ssid = "167">67 1 0.</S>
			<S sid ="283" ssid = "168">67 9 +c(w) denotes measures using word dependent substitution costs.</S>
			<S sid ="284" ssid = "169">“seg” is on segment level, “doc is on document level, “sys” is on system level.</S>
			<S sid ="285" ssid = "170">“sys/seg” is average system ranking per segment, “sys/doc” is average system ranking per document.</S>
			<S sid ="286" ssid = "171">We investigated two different aspects of automatic evaluation measures – their ability to give a reliable absolute estimate of their translation quality, and their ability to rank different translations with regard to their quality.</S>
			<S sid ="287" ssid = "172">As target for this, we chose the adequacy score, an integer value between 1 and 7, that was assigned to all translations in the corpus by a human judge.</S>
			<S sid ="288" ssid = "173">We measured the absolute prediction as Pearson’s correlation coefficient r (Casella and Berger, 1990), and the ranking capability as Kendall’s τ (Kendall, 1970).</S>
			<S sid ="289" ssid = "174">The latter has the big advantage over other coefficients like Spear- man’s ρ that it handles ties in a well-defined and reasonable manner.</S>
			<S sid ="290" ssid = "175">As there are only seven different outcomes for adequacy, but up to several thousand samples, ties are extremely frequent in these experiments.</S>
			<S sid ="291" ssid = "176">We measured both r and τ on three levels of granularity – the system level, that is comparing the accumulated scores of all documents per system, the document level, and the segment level.</S>
			<S sid ="292" ssid = "177">Comparing the scores of different systems at the same time as comparing different (source) docu put of different MT systems, and to compare the output for different source sentence.</S>
			<S sid ="293" ssid = "178">In other words, an evaluation metric gets a “bonus” in terms of correlation already if it is able to divide easy from difficult source sentences (which typically have good and bad translations respectively), as well as for dividing different MT systems.</S>
			<S sid ="294" ssid = "179">In practice, we are mostly interested in the latter: Our test corpus then is fixed, and there might be more efficient methods for estimating the “difficulty” of a source sentence.</S>
			<S sid ="295" ssid = "180">We use the MT evaluation measure here because we want to compare the actual MT systems, and not the source sentences, and the MT evaluation measure we chose should respect this.</S>
			<S sid ="296" ssid = "181">To divide these two effects in our experiments, we calculated the rank correlation (using τ ) over the different MT system for a fixed source segment or document respectively, and then calculated the arithmetic average over the different τ for the individual source segments (or documents).2 We denote this averaged correlation coefficient as τ¯.</S>
			<S sid ="297" ssid = "182">Our experimental results are listed in Table 3.</S>
			<S sid ="298" ssid = "183">2 This is another advantage of τ over r or ρ – in our under-.</S>
			<S sid ="299" ssid = "184">7.1 BLEU and BLEUSP.</S>
			<S sid ="300" ssid = "185">Using the average reference length instead of the minimum reference length brings a very small improvement in correlation with human judgment on segment level, and a slightly larger improvement on document and system level.</S>
			<S sid ="301" ssid = "186">The largest improvement for BLEU-like measures on the segment level comes from Lin &amp; Och’s smoothed geometric mean in BLEUS: r raises from .60 to .67, τ from .48 to .54, even though the ability to rank systems on the sentence or document level hardly increases.</S>
			<S sid ="302" ssid = "187">This can be increased using the segment boundary tokens: r improves from .67 to .68, and τ¯seg from .59 to .61.</S>
			<S sid ="303" ssid = "188">7.2 TER and INVWER.</S>
			<S sid ="304" ssid = "189">Even though TER and INVWER are structurally very similar, we see that INVWER has a significantly higher correlation than TER with human evaluation on segment and document level, even though it seems that TER has a better capability to actually judge between MT systems on smaller levels.</S>
			<S sid ="305" ssid = "190">Using word-dependent substitution costs brings small improvements on the segment level, but seems to have a slightly negative effect on the ability to differentiate between systems.</S>
			<S sid ="306" ssid = "191">7.3 Word-dependent substitution costs.</S>
			<S sid ="307" ssid = "192">Compared with our results in (Leusch et al., 2006), we see only small improvements, or for PER even a very small deterioration if we use word-dependent substitution costs on this corpus, both on segment and system level.</S>
			<S sid ="308" ssid = "193">For our final submission, we made the substitution costs dependent on the common prefix length in out Metrics MATR submission.</S>
			<S sid ="309" ssid = "194">7.4 CDER and linear combination of.</S>
			<S sid ="310" ssid = "195">evaluation measures CDER, as a pure recall measure, shows again the highest correlation of all evaluation measures, on segment, document, and system level.</S>
			<S sid ="311" ssid = "196">Unfortunately, it is unwise to use a purely recall-oriented measure in actual research.</S>
			<S sid ="312" ssid = "197">This is because MT systems tuned for such a measure, either directly or indirectly, tend to produce overly long sentences containing many unnecessary or even wrong insertions.</S>
			<S sid ="313" ssid = "198">To avoid this, and because doing so showed a signif on most of our development corpora, we use a linear combination of CDER (with a weight of .6) and PER (.4), both using word dependent substitution costs.</S>
			<S sid ="314" ssid = "199">Unfortunately, this combined measure shows a slightly lower correlation with human judgment on the sentence level than pure CDER.</S>
			<S sid ="315" ssid = "200">But even though, this measure has a significantly higher correlation on all levels than the original BLEU or TER score, and is better than or on par with even our improved scores INVWER and BLEUSP.</S>
	</SECTION>
	<SECTION title="Conclusions. " number = "8">
			<S sid ="316" ssid = "1">In this paper we have presented three improved evaluation measures for MT, based on the well- established and understood measures TER, BLEU, and a variant of WER and PER.</S>
			<S sid ="317" ssid = "2">While not exactly being revolutionary, our measures show a significant improvement in correlation with human judgment compared with the original measures.</S>
			<S sid ="318" ssid = "3">We further refined the way this correlation is measured, taking into account typical statistical and data effects when looking evaluating MT evaluation measures.</S>
			<S sid ="319" ssid = "4">We consider our results to be of importance because a multitude of new, sometimes “revolutionary” MT evaluation measures have been proposed over the last years, sometimes to be compared only with BLEU or TER in terms of correlation, even for applications where these baseline measures are not well suited for.</S>
			<S sid ="320" ssid = "5">One of our scientific contributions in this paper is to show that even with these only alterations and additions, we can have a significantly higher correlation with human judgment.</S>
			<S sid ="321" ssid = "6">Along the way, we hope to raise the baseline for new evaluation measures significantly.</S>
			<S sid ="322" ssid = "7">The measures described in this paper, as well as some additional measures, have been implemented by us under a python command line tool called PyET.</S>
			<S sid ="323" ssid = "8">The implementation uses shared libraries written in C++ for performance.</S>
			<S sid ="324" ssid = "9">Please contact the first author via EMail, or visit his web site3 to obtain a copy of this software.</S>
	</SECTION>
	<SECTION title="Acknowledgments. " number = "9">
			<S sid ="325" ssid = "1">This paper is based upon work supported by the Defense Advanced Research Projects Agency 3 http://wwwi6.informatik.rwthaachen←&apos; (DARPA) under Contract No.</S>
			<S sid ="326" ssid = "2">HR001106-C-0023.</S>
	</SECTION>
</PAPER>
