<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">We present a quasi-synchronous dependency grammar (Smith and Eisner, 2006) for machine translation in which the leaves of the tree are phrases rather than words as in previous work (Gimpel and Smith, 2009).</S>
		<S sid ="2" ssid = "2">This formulation allows us to combine structural components of phrase-based and syntax-based MT in a single model.</S>
		<S sid ="3" ssid = "3">We describe a method of extracting phrase dependencies from parallel text using a target-side dependency parser.</S>
		<S sid ="4" ssid = "4">For decoding, we describe a coarse-to-fine approach based on lattice dependency parsing of phrase lattices.</S>
		<S sid ="5" ssid = "5">We demonstrate performance improvements for ChineseEnglish and UrduEnglish translation over a phrase-based baseline.</S>
		<S sid ="6" ssid = "6">We also investigate the use of unsupervised dependency parsers, reporting encouraging preliminary results.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="7" ssid = "7">Two approaches currently dominate statistical machine translation (MT) research.</S>
			<S sid ="8" ssid = "8">Phrase-based models (Koehn et al., 2003) excel at capturing local reordering phenomena and memorizing multi-word translations.</S>
			<S sid ="9" ssid = "9">Models that employ syntax or syntax- like representations (Chiang, 2005; Galley et al., 2006; Zollmann and Venugopal, 2006; Huang et al., 2006) handle long-distance reordering better than phrase-based systems (Auli et al., 2009) but often require constraints on the formalism or rule extraction method in order to achieve computational tractability.</S>
			<S sid ="10" ssid = "10">As a result, certain instances of syntactic divergence are more naturally handled by phrase-based systems (DeNeefe et al., 2007).</S>
			<S sid ="11" ssid = "11">In this paper we present a new way of combining the advantages of phrase-based and syntax-based MT. We propose a model in which phrases are organized into a tree structure inspired by dependency syntax.</S>
			<S sid ="12" ssid = "12">Instead of standard dependency trees in which words are vertices, our trees have phrases as vertices.</S>
			<S sid ="13" ssid = "13">We describe a simple heuristic to extract phrase dependencies from an aligned parallel corpus parsed on the target side, and use them to compute target-side tree features.</S>
			<S sid ="14" ssid = "14">We define additional string-to-tree features and, if a source-side dependency parser is available, tree-to-tree features to capture properties of how phrase dependencies interact with reordering.</S>
			<S sid ="15" ssid = "15">To leverage standard phrase-based features alongside our novel features, we require a formalism that supports flexible feature combination and efficient decoding.</S>
			<S sid ="16" ssid = "16">Quasi-synchronous grammar (QG) provides this backbone (Smith and Eisner, 2006); we describe a coarse-to-fine approach for decoding within this framework, advancing substantially over earlier QG machine translation systems (Gimpel and Smith, 2009).</S>
			<S sid ="17" ssid = "17">The decoder involves generating a phrase lattice (Ueffing et al., 2002) in a coarse pass using a phrase-based model, followed by lattice dependency parsing of the phrase lattice.</S>
			<S sid ="18" ssid = "18">This approach allows us to feasibly explore the combined search space of segmentations, phrase alignments, and target phrase dependency trees.</S>
			<S sid ="19" ssid = "19">Our experiments demonstrate an average improvement of +0.65 BLEU in ChineseEnglish translation across three test sets and an improvement of +0.75 BLEU in UrduEnglish translation over a phrase-based baseline.</S>
			<S sid ="20" ssid = "20">We also describe experiments in which we replace supervised dependency parsers with unsupervised parsers, reporting promising results: using a supervised Chinese parser and a state-of-the-art unsupervised English parser provides our best results, giving an averaged gain of +0.79 BLEU over the baseline.</S>
			<S sid ="21" ssid = "21">We also discuss how our model improves translation quality and discuss future possibilities for combining approaches to ma 474 Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing, pages 474–485, Edinburgh, Scotland, UK, July 27–31, 2011.</S>
			<S sid ="22" ssid = "22">Qc 2011 Association for Computational Linguistics chine translation using our framework.</S>
	</SECTION>
	<SECTION title="Related Work. " number = "2">
			<S sid ="23" ssid = "1">We previously applied quasi-synchronous grammar to machine translation (Gimpel and Smith, 2009), but that system performed translation fundamentally at the word level.</S>
			<S sid ="24" ssid = "2">Here we generalize that model to function on phrases, enabling a tighter coupling be</S>
	</SECTION>
	<SECTION title="Model. " number = "3">
			<S sid ="25" ssid = "1">Given a sentence s and its dependency tree τs, we formulate the translation problem as finding the target sentence t∗, the segmentation γ∗ of s into phrases, the segmentation φ∗ of t∗ into phrases, the dependency tree τ ∗ on the target phrases φ∗, and the one-to-one phrase alignment a∗ such that tween the phrase segmentation and syntactic structures.</S>
			<S sid ="26" ssid = "2">We also present a decoder efficient enough toscale to large data sets and present performance im (t∗, γ∗, φ∗, τ ∗ , a∗) = argmax (t,γ,φ,τφ ,a) p(t, γ, φ, τφ, a | s, τs) provements in large-scale experiments over a state- of-the-art phrase-based baseline.</S>
			<S sid ="27" ssid = "3">Aside from QG, there have been many efforts to use dependency syntax in machine translation.</S>
			<S sid ="28" ssid = "4">Quirk et al.</S>
			<S sid ="29" ssid = "5">(2005) used a source-side dependency parser and projected automatic parses across word alignments in order to model dependency syntax on phrase pairs.</S>
			<S sid ="30" ssid = "6">Shen et al.</S>
			<S sid ="31" ssid = "7">(2008) presented an extension to Hiero (Chiang, 2005) in which rules have target-side dependency syntax and therefore enable the use of a dependency language model.</S>
			<S sid ="32" ssid = "8">More recently, researchers have sought the benefits of dependency syntax while preserving the advantages of phrase-based models, such as efficiency and coverage.</S>
			<S sid ="33" ssid = "9">Galley and Manning (2009) loosened standard assumptions about dependency parsing so that the efficient left-to-right decoding procedure of phrase-based translation could be retained while a dependency language model is incorporated.</S>
			<S sid ="34" ssid = "10">Carreras and Collins (2009) presented a string-to- dependency system that permits non-projective dependency trees (thereby allowing a larger space of translations) and use a rule extraction procedure that includes rules for every phrase in the phrase table.</S>
			<S sid ="35" ssid = "11">We take an additional step in this direction by working with dependency grammars on the phrases themselves, thereby bringing together the structural components of phrase-based and dependency-based MT in a single model.</S>
			<S sid ="36" ssid = "12">While others have worked on combining rules from multiple syntax-based systems (Liu et al., 2009) or using posteriors from multiple models to score translations (DeNero et al., 2010), we are not aware of any other work that seeks to directly integrate phrase-based and syntax-based machine translation at the modeling level.1 1 Dymetman and Cancedda (2010) present a formal analy-.</S>
			<S sid ="37" ssid = "13">We use a linear model (Och and Ney, 2002): p(t, γ, φ, τφ, a | s, τs) ∝ exp{θTg(s, τs, t, γ, φ, τφ, a)} where g is a vector of arbitrary feature functions on the full set of structures and θ holds corresponding feature weights.</S>
			<S sid ="38" ssid = "14">Table 1 summarizes our notation.</S>
			<S sid ="39" ssid = "15">In modeling p(t, γ, φ, τφ, a | s, τs), we make use of quasi-synchronous grammar (QG; Smith and Eisner, 2006).</S>
			<S sid ="40" ssid = "16">Given a source sentence and its parse, a QG induces a probabilistic monolingual grammar over sentences “inspired” by the source sentence and tree.</S>
			<S sid ="41" ssid = "17">We denote this grammar by Gs,τs ; its (weighted) language is the set of translations of s. Quasi-synchronous grammar makes no restrictions on the form of the target monolingual grammar, though dependency grammars have been used in most previous applications of QG (Wang et al., 2007; Das and Smith, 2009; Smith and Eisner, 2009), including previous work in MT (Smith and Eisner, 2006; Gimpel and Smith, 2009).</S>
			<S sid ="42" ssid = "18">We previously presented a word-based machine translation model based on a quasi-synchronous dependency grammar.</S>
			<S sid ="43" ssid = "19">However, it is well-known in the MT community that translation quality is improved when larger units are modeled.</S>
			<S sid ="44" ssid = "20">Therefore, we use a dependency grammar in which the leaves are phrases rather than words.</S>
			<S sid ="45" ssid = "21">We define a phrase dependency grammar as a model p(φ, τφ|t) over the joint space of segmen tations of a sentence into phrases and dependency trees on the phrases.2 Phrase dependency grammars sis of the problem of intersecting phrase-based and hierarchical translation models, but do not provide experimental results.</S>
			<S sid ="46" ssid = "22">2 We restrict our attention to projective trees in this paper,.</S>
			<S sid ="47" ssid = "23">but the generalization to non-projective trees is easily made.</S>
			<S sid ="48" ssid = "24">s = (s1 , . . .</S>
			<S sid ="49" ssid = "25">, sn ) so urc e lan gu ag e se nt en ce t = (t1 , . . .</S>
			<S sid ="50" ssid = "26">, tm ) tar get lan gu ag e se nte nc e, tra nsl ati on of s γ = (γ 1 , . . .</S>
			<S sid ="51" ssid = "27">, γn ) ∀ i, γ i = ( s j , . . .</S>
			<S sid ="52" ssid = "28">, s k ) s. t. γ 1 · . . .</S>
			<S sid ="53" ssid = "29">· γ n = s se gm ent ati on of s int o phr as es φ = (φ 1 , . . .</S>
			<S sid ="54" ssid = "30">, φm ) ∀ i, φ i = ( tj , . . .</S>
			<S sid ="55" ssid = "31">, t k ) s. t. φ 1 · . . .</S>
			<S sid ="56" ssid = "32">· φ m = t se gm ent ati on of t int o phr as es τs : {1, . . .</S>
			<S sid ="57" ssid = "33">, n} → {0, . . .</S>
			<S sid ="58" ssid = "34">, n} d e p e n d e nc y tr e e o n s o ur c e w or d s s, w h er e τs (i ) is th e in d e x of th e p ar e nt of w or d si (0 is th e ro ot , $) τφ : {1, . . .</S>
			<S sid ="59" ssid = "35">, ml } → {0, . . .</S>
			<S sid ="60" ssid = "36">, ml } d e p e n d e nc y tr e e o n ta rg et p hr as es φ , w h er e τφ (i ) is th e in d e x of th e p ar e nt of p hr as e φi a : {1, . . .</S>
			<S sid ="61" ssid = "37">, ml } → {1, . . .</S>
			<S sid ="62" ssid = "38">, nl } oneto on e ali gn me nt fro m phr as es in φ to phr as es in γ θ = (λ, ψ) par am ete rs of the full mo del (λ = phr ase ba se d, ψ = Q P D G) Table 1: Key notation.</S>
			<S sid ="63" ssid = "39">have recently been used by Wu et al.</S>
			<S sid ="64" ssid = "40">(2009) for feature extraction for opinion mining.</S>
			<S sid ="65" ssid = "41">When used for translation modeling, they allow us to capture phenomena like local reordering and idiomatic translations within each phrase as well as long-distance relationships among the phrases in a sentence.</S>
			<S sid ="66" ssid = "42">We then define a quasi-synchronous phrase dependency grammar (QPDG) as a conditionalmodel p(t, γ, φ, τφ, a | s, τs) that induces a prob abilistic monolingual phrase dependency grammar over sentences inspired by the source sentence and (lexical) dependency tree.</S>
			<S sid ="67" ssid = "43">The source and target sentences are segmented into phrases and the phrases are aligned in a one-to-one alignment.</S>
			<S sid ="68" ssid = "44">We note that we actually depart here slightly from the original definition of QG.</S>
			<S sid ="69" ssid = "45">The alignment variable in QG links target tree nodes to source tree nodes.</S>
			<S sid ="70" ssid = "46">However, we never commit to a source phrase dependency tree, instead using a source lexical dependency tree output by a dependency parser, so our alignment variable a is a function from target tree nodes (phrases in φ) to source phrases in γ, which might not be source tree nodes.</S>
			<S sid ="71" ssid = "47">The features in our model may consider a large number of source phrase dependency trees as long as they are consistent with τs.</S>
	</SECTION>
	<SECTION title="Features. " number = "4">
			<S sid ="72" ssid = "1">Our model contains all of the standard phrase-based features found in systems like Moses (Koehn et al., 2007), including four phrase table probability features, a phrase penalty feature, an n-gram language model, a distortion cost, six lexicalized reordering features, and a word penalty feature.</S>
			<S sid ="73" ssid = "2">We now describe in detail the additional features $ ← said : $ ← we should $ ← said that $ ← has been $ ← is a - us → relations $ ← will be $ ← he said $ ← it is cross - strait → relations $ ← this is $ ← pointed out that $ ← we must , and → is the → united states the chinese → government the → development of $ ← is the the two → countries $ ← said , he → said : one - china → principle $ ← he said : sino - us → relations Table 2: Most frequent phrase dependencies with at least 2 words in one of the phrases (dependencies in which one phrase is entirely punctuation are not shown).</S>
			<S sid ="74" ssid = "3">$ indicates the root of the tree.</S>
			<S sid ="75" ssid = "4">in our model that are used to score phrase dependency trees.</S>
			<S sid ="76" ssid = "5">We shall refer to these as QPDG features and will find it useful later to notation- ally distinguish their feature weights from those of the phrase-based model.</S>
			<S sid ="77" ssid = "6">We use λ for weights of the standard phrase-based model features and ψ for weights of the QPDG features.</S>
			<S sid ="78" ssid = "7">We include three categories of features, differentiated by what pieces of structure they consider.</S>
			<S sid ="79" ssid = "8">4.1 Target Tree Features.</S>
			<S sid ="80" ssid = "9">We first include features that only consider t, φ, and τφ.</S>
			<S sid ="81" ssid = "10">These features can be categorized as “syntactic language model” features (Shen et al., 2008; Galley and Manning, 2009), though unlike previous work our features model both the phrase segmentation and dependency structure.</S>
			<S sid ="82" ssid = "11">Typically, these sorts of features are probabilities estimated from a corpus parsed using a supervised parser.</S>
			<S sid ="83" ssid = "12">However, there do not currently exist treebanks with annotated phrase , → m a d e u p h e → m a d e u p s u p r e m e c o u r t → m a d e u p c o u r t → m a d e u p in s e pt e m b er 2 0 0 0 → m a d e u p in se pte mb er 20 00 , → ma de up 0.</S>
			<S sid ="84" ssid = "13">0 5 7 0.</S>
			<S sid ="85" ssid = "14">0 2 1 0.</S>
			<S sid ="86" ssid = "15">0 1 4 0.</S>
			<S sid ="87" ssid = "16">0 1 4 0.</S>
			<S sid ="88" ssid = "17">0 1 4 0.</S>
			<S sid ="89" ssid = "18">0 1 4 m a d e u p ← o f m a d e u p ← . m a d e u p ← , m a d e u p ← m i n d t o 0.</S>
			<S sid ="90" ssid = "19">0 6 5 0.</S>
			<S sid ="91" ssid = "20">0 2 9 0.</S>
			<S sid ="92" ssid = "21">0 1 6 0 . 0 1 Table 3: Most probable child phrases for the parent phrase “made up” for each direction, sorted by the conditional probability of the child phrase given the parent phrase and direction.</S>
			<S sid ="93" ssid = "22">phrase dependencies of the form (u, v, d), where u is the head phrase, v is the child phrase, and d ∈ {left , right } is the direction, we then estimate conditional probabilities p(v|u, d) using relative fre quency estimation.</S>
			<S sid ="94" ssid = "23">Table 3 shows the most probable child phrases for an example parent phrase.</S>
			<S sid ="95" ssid = "24">To combat data sparseness, we perform the same procedure with each word replaced by its word cluster ID obtained from Brown clustering (Brown et al., 1992).</S>
			<S sid ="96" ssid = "25">We include a feature in the model for the sum of the scaled log-probabilities of each attachment: m dependency trees.</S>
			<S sid ="97" ssid = "26">) max (0, C + log p(φi|φτ i=1 (i), d(i)l (1) Our solution is to use a standard supervised dependency parser and extract phrase dependencies using bilingual information.3 We begin by obtaining symmetrized word alignments and extracting phrase pairs using the standard heuristic from phrase-based MT (Koehn et al., 2003).</S>
			<S sid ="98" ssid = "27">Given the set of extracted phrase pairs for a sentence, denote by W the set of unique target-side phrases among them.</S>
			<S sid ="99" ssid = "28">We parse the target sentence with a dependency parser and, for each pair of phrases u, v ∈ W , we extract a phrase dependency (along with its direction) if u and v do not overlap and there is at least one lexical dependency between a word in u and a word in v. If there are lexical dependencies in both directions, we extract a phrase dependency only for the single longest one.</S>
			<S sid ="100" ssid = "29">Since we use a projective dependency parser, the longest lexical dependency between two phrases is guaranteed to be unique.</S>
			<S sid ="101" ssid = "30">Table 2 shows a listing of the most frequent phrase dependencies extracted (lexical dependencies are omitted).</S>
			<S sid ="102" ssid = "31">We note that during training we never explicitly commit to any single phrase dependency tree for a target sentence.</S>
			<S sid ="103" ssid = "32">Rather, we extract phrase dependencies from all phrase dependency trees consistent with the word alignments and the lexical dependency tree.</S>
			<S sid ="104" ssid = "33">Thus we treat phrase dependency trees analogously to phrase segmentations in standard phrase extraction.</S>
			<S sid ="105" ssid = "34">We perform this procedure on all sentence pairs in the parallel corpus.</S>
			<S sid ="106" ssid = "35">Given a set of extracted 3 For a monolingual task, Wu et al.</S>
			<S sid ="107" ssid = "36">(2009) used a shallow parser to convert lexical dependencies from a dependency parser into phrase dependencies.</S>
			<S sid ="108" ssid = "37">where d(i) = I [τφ(i) − i &gt; 0] is the direction of the dependency arc. Although we use log-probabilities in this feature function, we first add a constant C to each to ensure they are all positive.4 The max expression protects unseen parent-child phrase dependencies from causing the score to be negative infinity.</S>
			<S sid ="109" ssid = "38">Our motivation is a desire for the features to be used to prefer one derivation over another but not to rule out a derivation completely if it merely happens to contain a dependency unobserved in the training data.</S>
			<S sid ="110" ssid = "39">We also include lexical weighting features similar to those used in phrase-based MT (Koehn et al., 2003).</S>
			<S sid ="111" ssid = "40">Whenever we extract a phrase dependency, we extract the longest lexical dependency containedwithin it.</S>
			<S sid ="112" ssid = "41">For all (parent, child, direction) lexical dependency tuples (x, y, d), we estimate conditional probabilities plex (y|x, d) from the parsed cor pus using relative frequency estimation.</S>
			<S sid ="113" ssid = "42">Then, for a phrase dependency with longest lexical dependency (x, y, d), we add a feature for plex (y|x, d) to the model, using a formula similar to Eq. 1.</S>
			<S sid ="114" ssid = "43">Different instances of a phrase dependency may have different lexical dependencies extracted with them.</S>
			<S sid ="115" ssid = "44">We add the lexical weight for the most frequent, breaking ties by choosing the lexical dependency that maxi mizes p(y|x, d), as was also done by Koehn et al.</S>
			<S sid ="116" ssid = "45">(2003).</S>
			<S sid ="117" ssid = "46">In all, we include 4 target tree features: one for phrase dependencies, one for lexical dependencies, 4 The reasoning here is that whenever we use a phrase dependency that we have observed in the training data, we want to boost the score of the translation.</S>
			<S sid ="118" ssid = "47">If we used log-probabilities, each observed dependency would incur a penalty.</S>
			<S sid ="119" ssid = "48">a b c d e x y z a b c d e x y z a b c d e x y z a b c d e x y z Input: s e n t e n c e s , d e p e n d e n c y p a r s e τ s , c o a r s e p a r a m e t e r s λ M , f i n e p a r a m e t e r s ( λ , ψ ) Output: translation t LMERT ← GenerateL attices (s, λM ); LFB ← FBPrune (LMERT , λM ); (t, γ, φ, τφ , a) ← QGDEPPARSE (LFB , (λ, ψ)); Figure 1: String-to-tree configurations; each is associated with a feature that counts its occurrences in a derivation.</S>
			<S sid ="120" ssid = "49">and the same features computed from a transformed version of the corpus in which each word is replaced by its Brown cluster.</S>
			<S sid ="121" ssid = "50">4.2 String-to-Tree Configurations.</S>
			<S sid ="122" ssid = "51">We consider features that count instances of reordering configurations involving phrase dependencies.</S>
			<S sid ="123" ssid = "52">In addition to the target-side structures, these features consider γ and a, though not s or τs. For example, when building a parent-child phrase dependency with the child to the left, one feature value is incremented if their aligned source-side phrases are in the same order.</S>
			<S sid ="124" ssid = "53">This configuration is the leftmost in Fig.</S>
			<S sid ="125" ssid = "54">1; we include features for the other three configurations there as well, for a total of 4 features in this category.</S>
			<S sid ="126" ssid = "55">4.3 Tree-to-Tree Configurations.</S>
			<S sid ="127" ssid = "56">We include features that consider s, γ, and τs in addition to t, φ, and τφ.</S>
			<S sid ="128" ssid = "57">We begin with features for each of the quasi-synchronous configurations from Smith and Eisner (2006), adapted to phrase dependency grammars.</S>
			<S sid ="129" ssid = "58">That is, for a parent-child pair(τφ(i), i) in τφ, we consider the relationship be tween a(τφ(i)) and a(i), the source-side phrasesto which τφ(i) and i align.</S>
			<S sid ="130" ssid = "59">We use the follow ing named configurations from Smith and Eisner:root-root, parent-child, child-parent, grandparent return t; Algorithm 1: CoarseToFineDecode we use a phrase dependency tree for the target side, a lexical dependency tree for the source side, and a phrase alignment.</S>
			<S sid ="131" ssid = "60">We use the following heuristic approach.</S>
			<S sid ="132" ssid = "61">Given a pair of source words, one with index j in source phrase a(τφ(i)) and the other with index k in source phrase a(i), we have a parent- child configuration if τs(k) = j; if τs(j) = k, a child-parent configuration is present.</S>
			<S sid ="133" ssid = "62">In order for the grandparent-grandchild configuration to be present, the intervening parent word must be outside both phrases.</S>
			<S sid ="134" ssid = "63">For sibling and other c-command configurations, the shared parent or ancestor must also be outside both phrases.</S>
			<S sid ="135" ssid = "64">After obtaining a list of all configurations present for each pair of words (j, k), we fire the feature for the single configuration corresponding to the maximum distance |j − k|.</S>
			<S sid ="136" ssid = "65">If no configurations are present between any pair of words, the “other” feature fires.</S>
			<S sid ="137" ssid = "66">Therefore, only one configuration feature fires for each phrase dependency attachment.</S>
			<S sid ="138" ssid = "67">Finally, we include features that consider the dependency path distance between phrases in the source-side dependency tree that are aligned to parent-child pairs in τφ.</S>
			<S sid ="139" ssid = "68">We include a feature that sums, for each target phrase i, the inverse of the minimum undirected path length between each word grandchild, sibling, and c-command.5 We define a in a(i) and each word in τφ (a(i)).</S>
			<S sid ="140" ssid = "69">The minimumfeature to count instances of each of these configu rations, including an additional feature for “other” configurations that do not fit into these categories.6 When using a QPDG, there are multiple ways to compute tree-to-tree configuration features, since</S>
	</SECTION>
	<SECTION title="See Fig. 3 in Smith and Eisner (2006) for illustrations.. " number = "5">
			<S sid ="141" ssid = "1">6 We actually include two versions of each configuration feature other than “root-root”: one for the source phrases being in the same order as the target phrases and one for them being swapped.</S>
			<S sid ="142" ssid = "2">undirected path length is defined as the number of dependency arcs that must be crossed to travel from one word to the other in τs. We use one feature for undirected path length and one other for directed path length.</S>
			<S sid ="143" ssid = "3">If there is no (un)directed path from a word in a(i) to a word in τφ(a(i)), we use ∞ as the minimum length.</S>
			<S sid ="144" ssid = "4">There are 15 features in this category, for a total of 23 QPDG features.</S>
			<S sid ="145" ssid = "5">5 Decoding.</S>
			<S sid ="146" ssid = "6">For a QPDG model, decoding consists of finding the highest-scoring tuple (t, γ, φ, τφ, a) for an in put sentence s and its parse τs, i.e., finding the most probable derivation under the s/τs-specific grammar Gs,τs . We follow Gimpel and Smith (2009) in constructing a lattice to represent Gs,τs and using lattice parsing to search for the best derivation, but we construct the lattice differently and employ a coarse-to- fine strategy (Petrov, 2009) to speed up decoding.</S>
			<S sid ="147" ssid = "7">It has become common in recent years for MT researchers to exploit efficient data structures for encoding concise representations of the pruned search space of the model, such as phrase lattices for phrase-based MT (Ueffing et al., 2002; Macherey et al., 2008; Tromble et al., 2008).</S>
			<S sid ="148" ssid = "8">Each edge in a phrase lattice corresponds to a phrase pair and each path through the lattice corresponds to a tuple (t, γ, φ, a) for the input s. Decoding for a phrase lattice consists of finding the highest-scoring path, which is done using dynamic programming.</S>
			<S sid ="149" ssid = "9">To also maximize over τφ, we perform lattice dependency parsing, which allows us to search over the space of tuples (t, γ, φ, a, τφ).</S>
			<S sid ="150" ssid = "10">Given the lattice and Gs,τs , lattice parsing is a straightforward generalization of the standard arc-factored dynamic programming algorithm from Eisner (1996).</S>
			<S sid ="151" ssid = "11">The lattice parsing algorithm requires O(E2V ) time and O(E2 + V E) space, where E is the number of edges in the lattice and V is the number of nodes.7 Typical phrase lattices might easily contain tens of thousands of nodes and edges, making exact search prohibitively expensive for all but the smallest lattices.</S>
			<S sid ="152" ssid = "12">So, we use approximate search based on coarse-to-fine decoding.</S>
			<S sid ="153" ssid = "13">We now discuss each step of this procedure; an outline is shown as Alg.</S>
			<S sid ="154" ssid = "14">1.</S>
			<S sid ="155" ssid = "15">Pass 1: Lattice Pruning After generating phrase lattices using a phrase-based MT system, we prune lattice edges using forward-backward pruning (Six- tus and Ortmanns, 1999), which has also been used in previous work using phrase lattices (Tromble et al., 2008).</S>
			<S sid ="156" ssid = "16">This pruning method computes the max- marginal for each lattice edge, which is the score of the best full path that uses that edge.</S>
			<S sid ="157" ssid = "17">Maxmarginals 7 To prevent confusion, we use the term edge to refer to a phrase lattice edge and arc to refer to a parent-child dependency in the phrase dependency tree.</S>
			<S sid ="158" ssid = "18">offer the advantage that the best path in the lattice is preserved during pruning.</S>
			<S sid ="159" ssid = "19">For each lattice, we use a grid search to find the most liberal threshold that leaves fewer than 1000 edges in the resulting lattice.</S>
			<S sid ="160" ssid = "20">As complexity is quadratic in E, forcing E to be less than 1000 improves runtime substantially.</S>
			<S sid ="161" ssid = "21">After pruning, the lattices still contain more than 1016 paths on average and oracle BLEU scores are typically 1215 points higher than the model-best paths.</S>
			<S sid ="162" ssid = "22">Pass 2: Parent Ranking Given a pruned lattice, we then remove some candidate dependency arcs from consideration.</S>
			<S sid ="163" ssid = "23">It is common in dependency parsing to use a coarse model to rank the top k parents for each word, and to only consider these during parsing (Martins et al., 2009; Bergsma and Cherry, 2010).</S>
			<S sid ="164" ssid = "24">Unlike string parsing, our phrase lattices impose several types of constraints on allowable arcs.</S>
			<S sid ="165" ssid = "25">For example, each node in the phrase lattice is annotated with a coverage vector—a bit vector indicating which words in the source sentence have been translated—which implies a topological ordering of the nodes.</S>
			<S sid ="166" ssid = "26">To handle constraints like these, we first use the FloydWarshall algorithm (Floyd, 1962) to find the best score between every pair of nodes in the lattice.</S>
			<S sid ="167" ssid = "27">This algorithm also tells us whether each edge is reachable from each other edge, allowing us to immediately prune dependency arcs between edges that are unreachable from each other.</S>
			<S sid ="168" ssid = "28">After eliminating impossible arcs, we turn to pruning away unlikely ones.</S>
			<S sid ="169" ssid = "29">In standard (string) dependency parsing, every word is assigned a parent.</S>
			<S sid ="170" ssid = "30">In lattice parsing, however, most lattice edges will not be assigned any parent.</S>
			<S sid ="171" ssid = "31">Certain lattice edges are much more likely to be contained within paths, so we allow some edges to have more candidate parent edges than others.</S>
			<S sid ="172" ssid = "32">We introduce hyperparameters α, β, and µ to denote, respectively, the minimum, maximum, and average number of parent edges to be considered for each lattice edge (α ≤ µ ≤ β).</S>
			<S sid ="173" ssid = "33">We rank the full set of E2 arcs according to their scores (using the QPDG features and their weights ψ) and choose the top µE of these arcs while ensuring that each edge has at least α and at most β potential parent edges.</S>
			<S sid ="174" ssid = "34">This step reduces the time complexity from O(E2V ) to O(µEV ), where µ &lt; E. In our experiments, we set µ = 300, α = 100, and β = 400.</S>
			<S sid ="175" ssid = "35">Input: tuning set D = (S, T ), initial weights λ0 for coarse model, initial weights ψ0 for additional features in fine model Output: coarse model learned weights: λM , fine model learned weights: (λ∗, ψ∗) λM ← MERT (S, T , λ0 , 100, MOSES); LMERT ← GenerateLattices (S, λM ); LFB ← FBPrune (LMERT , λM ); (λ∗, ψ∗) ← MERT (LFB , T , (λM , ψ0 ), 200, QGDEPPARSE); return λM , (λ∗, ψ∗); Algorithm 2: CoarseToFineTrain Pass 3: Lattice Dependency Parsing After completing the coarse passes, we parse using bottom-up dynamic programming based on the agenda algorithm (Nederhof, 2003; Eisner et al., 2005).</S>
			<S sid ="176" ssid = "36">We only consider arcs that survived the filtering in Pass 2.</S>
			<S sid ="177" ssid = "37">We weight agenda items by the sum of their scores and the FloydWarshall best path scores both from the start node of the lattice to the beginning of the item and the end of the item to any final node.</S>
			<S sid ="178" ssid = "38">This heuristic helps us to favor exploration of items that are highly likely under the phrase-based model.</S>
			<S sid ="179" ssid = "39">If the score of the partial structure can only get worse when combining it with other structures (e.g., in a PCFG), then the first time that we pop an item of type GOAL from the agenda, we are guaranteed to have the best parse.</S>
			<S sid ="180" ssid = "40">However, in our model, some features are positive and others negative, making this property no longer hold; as a result, GOAL items may be popped out of order from the agenda.</S>
			<S sid ="181" ssid = "41">Therefore, we use an approximation, simply popping G GOAL items from the agenda and then stopping.</S>
			<S sid ="182" ssid = "42">The items are sorted by their scores and the best is returned by the decoder (or the k best in the case of MERT).</S>
			<S sid ="183" ssid = "43">In our experiments, we set G = 4000.</S>
			<S sid ="184" ssid = "44">The combined strategy yields average decoding times in the range of 30 seconds per sentence, which is comparable to other syntax-based MT systems.</S>
	</SECTION>
	<SECTION title="Training. " number = "6">
			<S sid ="185" ssid = "1">For tuning the coarse and fine parameters, we use minimum error rate training (MERT; Och, 2003) in a procedure shown as Alg.</S>
			<S sid ="186" ssid = "2">2.</S>
			<S sid ="187" ssid = "3">We first use MERT to train parameters for the coarse phrase-based model used to generate phrase lattices.</S>
			<S sid ="188" ssid = "4">Then, after generating the lattices, we prune them and run MERT a second time to tune parameters of the fine model, which includes all phrase-based and QPDG parameters.</S>
			<S sid ="189" ssid = "5">The arguments to MERT are a vector of source sentences (or lattices), a vector of target sentences, the initial parameter values, the size of the k-best list, and finally the decoder.</S>
			<S sid ="190" ssid = "6">We initialize λ to the default Moses feature weights and for ψ we initialize the two target phrase dependency weights to 0.004, the two lexical dependency weights to 0.001, and the weights for all configuration features to 0.0.</S>
			<S sid ="191" ssid = "7">Our training procedure requires two executions of MERT, and the second typically takes more iterations to converge (10 to 20 is typical) than the first due to the use of a larger feature set and increased possibility for search error due to the enlarged search space.</S>
	</SECTION>
	<SECTION title="Experiments. " number = "7">
			<S sid ="192" ssid = "1">For experimental evaluation, we consider Chinese- to-English (ZHEN) and Urdu-to-English (UREN) translation and compare our system to Moses (Koehn et al., 2007).</S>
			<S sid ="193" ssid = "2">For ZHEN, we used 303k sentence pairs from the FBIS corpus (LDC2003E14).</S>
			<S sid ="194" ssid = "3">We segmented the Chinese data using the Stanford Chinese segmenter in “CTB” mode (Chang et al., 2008), giving us 7.9M Chinese words and 9.4M English words.</S>
			<S sid ="195" ssid = "4">For UREN, we used parallel data from the NIST MT08 evaluation consisting of 1.2M Urdu words and 1.1M English words.</S>
			<S sid ="196" ssid = "5">We trained a baseline Moses system using default settings and features.</S>
			<S sid ="197" ssid = "6">Word alignment was performed using GIZA++ (Och and Ney, 2003) in both directions and the grow-diag-final-and heuristic was used to symmetrize the alignments.</S>
			<S sid ="198" ssid = "7">We used a max phrase length of 7 when extracting phrases.</S>
			<S sid ="199" ssid = "8">Trigram language models were estimated using the SRI language modeling toolkit (Stolcke, 2002) with modified KneserNey smoothing (Chen and Goodman, 1998).</S>
			<S sid ="200" ssid = "9">To estimate language models for each language pair, we used the English side of the parallel corpus concatenated with 200M words of randomly-selected sentences from the Gigaword v4 corpus (excluding the NY Times and LA Times).</S>
			<S sid ="201" ssid = "10">We used this baseline Moses system to generate phrase lattices for our system, so our model includes all of the Moses features in addition to the M T 03 (t un e) M T 0 2 M T 0 5 M T 0 6 A v e r a g e M os es Q PD G (T T) Q PD G (T T+ S2 T+ T2 T) 33 .8 4 34.</S>
			<S sid ="202" ssid = "11">63 (+ 0.</S>
			<S sid ="203" ssid = "12">79 ) 34.</S>
			<S sid ="204" ssid = "13">98 (+ 1.</S>
			<S sid ="205" ssid = "14">14 ) 33 .3 5 31.81 28.82 34.</S>
			<S sid ="206" ssid = "15">10 (+ 0.</S>
			<S sid ="207" ssid = "16">75 ) 32.15 (+0.34) 29.33 (+0.51) 34.</S>
			<S sid ="208" ssid = "17">26 (+ 0.</S>
			<S sid ="209" ssid = "18">91 ) 32.34 (+0.53) 29.35 (+0.53) 31 .3 3 31.</S>
			<S sid ="210" ssid = "19">86 (+ 0.</S>
			<S sid ="211" ssid = "20">53 ) 31.</S>
			<S sid ="212" ssid = "21">98 (+ 0.</S>
			<S sid ="213" ssid = "22">65 ) Table 4: ChineseEnglish Results (% BLEU).</S>
			<S sid ="214" ssid = "23">QPDG features described in §4.</S>
			<S sid ="215" ssid = "24">In our experiments, we compare our QPDG system (lattice parsing on each lattice) to the Moses baseline (finding the best path through each lattice).</S>
			<S sid ="216" ssid = "25">The conventional wisdom holds that hierarchical phrase-based translation (Chiang, 2005) performs better than phrase- based translation for language pairs that require large amounts of reordering, such as ZHEN and UREN.</S>
			<S sid ="217" ssid = "26">However, researchers have shown that this performance gap diminishes when using a larger distortion limit (Zollmann et al., 2008) and may disappear entirely when using a lexicalized reordering model (Lopez, 2008; Galley and Manning, 2010).</S>
			<S sid ="218" ssid = "27">So, we increase the Moses distortion limit from 6 (the default) to 10 and use Moses’ default lexical- ized reordering model (Koehn et al., 2005).</S>
			<S sid ="219" ssid = "28">We parsed the Chinese text using the Stanford parser (Levy and Manning, 2003) and the English text using TurboParser (Martins et al., 2009).</S>
			<S sid ="220" ssid = "29">We note that computing our features requires parsing the target (English) side of the parallel text, but not the source side.</S>
			<S sid ="221" ssid = "30">We only need to parse the source side of the tuning and test sets, and the only features that look at the source-side parse are those from §4.3.</S>
			<S sid ="222" ssid = "31">To obtain Brown clusters for the target tree features in §4.1, we used code from Liang (2005).8 We induced 100 clusters from the English side of the parallel corpus concatenated with 10M words of randomly-selected Gigaword sentences.</S>
			<S sid ="223" ssid = "32">Only words that appeared at least twice in this data were considered during clustering.</S>
			<S sid ="224" ssid = "33">An additional cluster was created for all other words; this allowed us to use phrase dependency cluster features even for out-of- vocabulary words.</S>
			<S sid ="225" ssid = "34">We used a max phrase length of 7 when extracting phrase dependencies to match the max phrase length used in phrase extraction.</S>
			<S sid ="226" ssid = "35">Approximately 87M unique phrase dependencies were extracted from the ZHEN data and 7M from the UREN data.We tuned the weights of our model using the pro Table 5: UrduEnglish Results (% BLEU).</S>
			<S sid ="227" ssid = "36">cedure described in §6.</S>
			<S sid ="228" ssid = "37">For ZHEN we used MT03 for tuning and MT02, MT05, and MT06 for testing.</S>
			<S sid ="229" ssid = "38">For UREN we used half of the documents (882 sentence pairs) from the MT08 test set for tuning (“Dev”) and MT09 for testing.</S>
			<S sid ="230" ssid = "39">We evaluated translation output using case-insensitive IBM BLEU (Pa- pineni et al., 2001).</S>
			<S sid ="231" ssid = "40">7.1 Results.</S>
			<S sid ="232" ssid = "41">Results for ZHEN and UREN translation are shown in Tables 4 and 5.</S>
			<S sid ="233" ssid = "42">We show results when using only the target tree features from §4.1 (TT), as well as when adding the string-to-tree features from §4.2 (S2T) and the tree-to-tree features from §4.3 (T2T).</S>
			<S sid ="234" ssid = "43">We note that T2T features are unavailable for UREN because we do not have an Urdu parser.</S>
			<S sid ="235" ssid = "44">We find that we can achieve moderate but consistent improvements over the baseline Moses system, for an average increase of 0.65 BLEU points for ZHEN and 0.75 for UREN.</S>
			<S sid ="236" ssid = "45">Fig.</S>
			<S sid ="237" ssid = "46">2 shows an example sentence from the MT05 test set along with its translation output and derivations produced by Moses and our QPDG system with the full feature set.</S>
			<S sid ="238" ssid = "47">This example shows the kind of improvements that our system makes.</S>
			<S sid ="239" ssid = "48">In Chinese, modifiers such as prepositional phrases and clauses are generally placed in front of the words they modify, frequently the opposite of English.</S>
			<S sid ="240" ssid = "49">In addition, Chinese occasionally uses postpositions where English uses prepositions.</S>
			<S sid ="241" ssid = "50">The Chinese sentence in Fig.</S>
			<S sid ="242" ssid = "51">2 exhibits both of these, as the prepositional phrase “after the Palestinian election” appears before the verb “strengthen” in the Chinese sentence and “after” appears as a postposition.</S>
			<S sid ="243" ssid = "52">Moses (Fig.</S>
			<S sid ="244" ssid = "53">2(a)) does not properly reorder the prepositional phrase, while our system (Fig.</S>
			<S sid ="245" ssid = "54">2(b)) properly handles both reorderings.9 We shall discuss these 8 http://www.cs.berkeley.edu/˜pliang/ software 9 Our.</S>
			<S sid ="246" ssid = "55">system’s derivation is not perfect, in that “in” is incor $ bush united : states will in palestine elections after strengthen peace efforts (a) (b) 布希 : 美 将 在 巴勒斯坦 大 后 加强 和平 努力 pre sid enti al ele ctio n in the uni ted stat es wil l stre ngt hen the pea ce eff ort s 布 希 : 美 将 在 巴勒斯坦 大 后 加强 和平 努力 $ (c) Refere nces b u s h : u s s e t t o b o o s t p e a c e e f f o r t s a f t e r p a l e s t i n i a n e l e c t i o n b u s h : u s t o s t e p u p p e a c e e f f o r t s a f t e r p a l e s t i n i a n e l e c t i o n s b u s h : u . s . w i l l e n h a n c e p e a c e e f f o r t s a f t e r p a l e s t i n i a n e l e c t i o n u s t o b o o s t p e a c e e f f o r t s a f t e r p a l e s t i n i a n e l e c t i o n s : b u s h Figure 2: (a) Moses translation output along with γ, φ, and a. An English gloss is shown above the Chinese sentence and above the gloss is shown the dependency parse from the Stanford parser.</S>
			<S sid ="247" ssid = "56">(b) QPDG system output with additional structure τφ .</S>
			<S sid ="248" ssid = "57">(c) reference translations.</S>
			<S sid ="249" ssid = "58">types of improvements further in §8.</S>
			<S sid ="250" ssid = "59">7.2 Unsupervised Parsing.</S>
			<S sid ="251" ssid = "60">Our results thus far use supervised parsers for both Chinese and English, but parsers are only available for a small fraction of the languages we would like to translate.</S>
			<S sid ="252" ssid = "61">Fortunately, unsupervised dependency grammar induction has improved substantially in recent years due to a flurry of recent research.</S>
			<S sid ="253" ssid = "62">While attachment accuracies on standard treebank test sets are still relatively low, it may be the case that even though unsupervised parsers do not match treebank annotations very well, they may perform well when used for extrinsic applications.</S>
			<S sid ="254" ssid = "63">We believe that syntax-based MT offers a compelling platform for development and extrinsic evaluation of unsupervised parsers.</S>
			<S sid ="255" ssid = "64">In this paper, we use the standard dependency model with valence (DMV; Klein and Manning, 2004).</S>
			<S sid ="256" ssid = "65">When training is initialized using the output of a simpler, concave dependency model, the rectly translated and reordered, but the system was nonetheless DMV can approach state-of-the-art unsupervised accuracy (Gimpel and Smith, 2011).</S>
			<S sid ="257" ssid = "66">For English, the resulting parser achieves 53.1% attachment accuracy on Section 23 of the Penn Treebank (Marcus et al., 1993), which approaches the 55.7% accuracy of a recent state-of-the-art unsupervised model (Blunsom and Cohn, 2010).</S>
			<S sid ="258" ssid = "67">The Chinese parser, initialized and trained the same way, achieves 44.4%, which is the highest reported accuracy on the Chinese Treebank (Xue et al., 2004) test set.</S>
			<S sid ="259" ssid = "68">Most unsupervised grammar induction models assume gold standard POS tags and sentences stripped of punctuation.</S>
			<S sid ="260" ssid = "69">We use the Stanford tag- ger (Toutanova et al., 2003) to obtain tags for both English and Chinese, parse the sentences without punctuation using the DMV, and then attach punctuation tokens to the root word of the tree in a post- processing step.</S>
			<S sid ="261" ssid = "70">For English, the predicted parents agreed with those of TurboParser for 48.7% of the tokens in the corpus.</S>
			<S sid ="262" ssid = "71">We considered all four scenarios: supervised and unsupervised English parsing paired with supervised E N u n s u p e r v i s e d supervised Z H u n s u p e r v i s e d s u p e r v i s e d 31.</S>
			<S sid ="263" ssid = "72">18 (3 3.</S>
			<S sid ="264" ssid = "73">76 ) 31.86 (34.78) 32.</S>
			<S sid ="265" ssid = "74">12 (3 4.</S>
			<S sid ="266" ssid = "75">74 ) 31.98 (34.98) M o s e s 3 1 . 3 3 ( 3 3 . 8 4 ) Table 6: Results when using unsupervised dependency parsers.</S>
			<S sid ="267" ssid = "76">Cells contain averaged % BLEU on the three test sets and % BLEU on tuning data (MT03) in parentheses.</S>
			<S sid ="268" ssid = "77">Fe at ur e Ini tia l Le ar ne d Le ft chi ld, sa me or de r L ef t c hil d, s w a p p hr a s e s Ri g ht c hil d, s a m e o r d e r Ri g ht c hi ld , s w a p p hr a s e s 9 . 0 1 . 1 7 . 3 1 . 6 8 . 9 0 . 0 7 . 3 2 . 3 Root ro ot P a r e n t c h i l d C h i l d p a r e n t G r a n d p a r e n t g r a n d c h i l d S i b l i n gC co m m an d Ot he r 0 . 4 4 . 2 1 . 2 1 . 0 2 . 4 6 . 1 1 . 5 0 . 8 6 . 1 0 . 4 0 . 2 1 . 9 6 . 7 0 . 9 Table 7: Average feature values across best translations of sentences in the MT03 tuning set, both before MERT (column 2) and after (column 3).</S>
			<S sid ="269" ssid = "78">“Same” versions of tree- to-tree configuration features are shown; the rarer “swap” features showed a similar trend.</S>
			<S sid ="270" ssid = "79">BLEU scores averaged over the three test sets with tuning data BLEU in parentheses.</S>
			<S sid ="271" ssid = "80">Surprisingly, we achieve our best results when using the unsupervised English parser in place of the supervised one (+0.79 over Moses), while keeping the Chinese parser supervised.</S>
			<S sid ="272" ssid = "81">Competitive performance is also found by using the unsupervised Chinese parser and supervised English parser (+0.53 over Moses).</S>
			<S sid ="273" ssid = "82">However, when using unsupervised parsers for both languages, performance was below that of Moses.</S>
			<S sid ="274" ssid = "83">During tuning for this configuration, we found that MERT struggled to find good parameter estimates, typically converging to suboptimal solutions after a small number of iterations.</S>
			<S sid ="275" ssid = "84">We believe this is due to the large number of features (37), the noise in the parse trees, and known instabilities of MERT.</S>
			<S sid ="276" ssid = "85">In future work we plan to experiment with training algorithms that are more stable and that can handle larger numbers of features.</S>
	</SECTION>
	<SECTION title="Analysis. " number = "8">
			<S sid ="277" ssid = "1">To understand what our model learns during MER training, we computed the feature vectors of the best derivation for each sentence in the tuning data at both the start and end of tuning.</S>
			<S sid ="278" ssid = "2">Table 7 shows these feature values averaged across all tuning sentences.</S>
			<S sid ="279" ssid = "3">The first four features are the configurations from Fig.</S>
			<S sid ="280" ssid = "4">1, in order from left to right.</S>
			<S sid ="281" ssid = "5">From these rows, we can observe that the model learns to encourage swapping when generating right children and penalize swapping for left children.</S>
			<S sid ="282" ssid = "6">In addition to objects, right children in English are often prepositional phrases, relative clauses, or other modifiers; as we noted above, Chinese generally places these modifiers before their heads, requiring reordering during translation.</S>
			<S sid ="283" ssid = "7">Here the model appears to be learning this reordering behavior.</S>
			<S sid ="284" ssid = "8">From the second set of features, we see that the model learns to favor producing dependency trees that are mostly isomorphic to the source tree, by favoring root-root and parent-child configurations at the expense of most others.</S>
	</SECTION>
	<SECTION title="Discussion. " number = "9">
			<S sid ="285" ssid = "1">In looking at BLEU score differences between the two systems, the unigram precisions were typically equal or only slightly different, while precisions for higher-order n-grams contained the bulk of the improvement.</S>
			<S sid ="286" ssid = "2">This suggests that our system is not finding substantially better translations for individual words in the input, but rather is focused on reordering the existing translations.</S>
			<S sid ="287" ssid = "3">This is not surprising given our choice of features, which focus on syntactic language modeling and syntax-based reordering.</S>
			<S sid ="288" ssid = "4">The obvious next step for our framework is to include bilingual rules that include source syntax (Quirk et al., 2005), target syntax (Shen et al., 2008), and syntax on both sides.</S>
			<S sid ="289" ssid = "5">Our framework allows integrating together all of these and other types of structures, with the ultimate goal of combining the strengths of multiple approaches to translation in a single model.</S>
	</SECTION>
	<SECTION title="Acknowledgments">
			<S sid ="290" ssid = "6">We thank Chris Dyer and the anonymous reviewers for helpful comments that improved this paper.</S>
			<S sid ="291" ssid = "7">This research was supported in part by the NSF through grant IIS 0844507, the U. S. Army Research Laboratory and the U. S. Army Research Office under contract/grant number W911NF10-10533, and Sandia National Laboratories (fellowship to K. Gimpel).</S>
	</SECTION>
</PAPER>
