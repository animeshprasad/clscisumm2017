<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">Multi Sentence Compression (MSC) is of great value to many real world applications, such as guided microblog summarization, opinion summarization and newswire summarization.</S>
		<S sid ="2" ssid = "2">Recently, word graph-based approaches have been proposed and become popular in MSC.</S>
		<S sid ="3" ssid = "3">Their key assumption is that redundancy among a set of related sentences provides a reliable way to generate informative and grammatical sentences.</S>
		<S sid ="4" ssid = "4">In this paper, we propose an effective approach to enhance the word graph-based MSC and tackle the issue that most of the state-of-the-art MSC approaches are confronted with: i.e., improving both informativity and grammaticality at the same time.</S>
		<S sid ="5" ssid = "5">Our approach consists of three main components: (1) a merging method based on Multiword Expressions (MWE); (2) a mapping strategy based on synonymy between words; (3) a re-ranking step to identify the best compression candidates generated using a POS-based language model (POSLM).</S>
		<S sid ="6" ssid = "6">We demonstrate the effectiveness of this novel approach using a dataset made of clusters of English newswire sentences.</S>
		<S sid ="7" ssid = "7">The observed improvements on informativity and grammaticality of the generated compressions show that our approach is superior to state-of-the-art MSC methods.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="8" ssid = "8">Multi-Sentence Compression (MSC) refers to the method of mapping a collection of related sentences to a sentence shorter than the average length of the input sentences, while retaining the most important information that conveys the gist of the content, and still remain grammatically correct [16, 4].</S>
			<S sid ="9" ssid = "9">MSC is one of the challenging tasks in natural language processing that has recently attracted increasing interest [4].</S>
			<S sid ="10" ssid = "10">This is mostly because of its potential use in various applications such as guided microblog summarization, opinion summarization, newswire summarization, text simplification for mobile devices and so on.</S>
			<S sid ="11" ssid = "11">A standard way to generate summaries usually consists of the following steps: ranking sentences by their importance, clustering them by similarity, and selecting a sentence from the top ranked clusters [31].</S>
			<S sid ="12" ssid = "12">Traditionally, most of the MSC approaches rely on syntactic parsers, e.g. [10, 8].</S>
			<S sid ="13" ssid = "13">As an alternative, some recent works in this field [9, 4] are based on word graphs, which only require a Part-Of-Speech (POS) tagger and a list of stopwords.</S>
			<S sid ="14" ssid = "14">These approaches simply rely on the words of the sentences and efficient dynamic programming.</S>
			<S sid ="15" ssid = "15">They take advantage of the redundancy among a set of related sentences to generate informative and grammatical sentences.</S>
			<S sid ="16" ssid = "16">Although the proposed approach in [9] introduces an elegant word graph to MSC, approximately half of their generated sentences are missing important information about the set of related sentences [4].</S>
			<S sid ="17" ssid = "17">Afterwards, Boudin and Morin (2013) enhanced their work and produced more informative sentences by maximizing the range of topics they cover.</S>
			<S sid ="18" ssid = "18">However, they confirmed that gram- maticality scores are decreased, since their re-ranking algorithm produces longer compressions to ameliorate informativity.</S>
			<S sid ="19" ssid = "19">Therefore, grammaticality might be sacrificed while enhancing informativity and vice versa.</S>
			<S sid ="20" ssid = "20">In this paper, we are motivated to tackle the main difficulty of the above mentioned MSC approaches which is to simultaneously improve both informativity and grammaticality of the compressed sentences.</S>
			<S sid ="21" ssid = "21">To this end, we propose a novel enhanced word graph-based MSC approach by employing significant merging, mapping and re-ranking steps that favor more informative and grammatical compressions.</S>
			<S sid ="22" ssid = "22">The contributions of the proposed method can be summarized as follows: (1) we exploit Multiword Expressions (MWE) from the given sentences and merge their words, constructing each MWE into a specific node in the word graph to reduce the ambiguity of mapping, so that well-organized and more informative compressions can be produced; (2) we take advantage of the concept of synonymy in two ways: firstly, we replace a merged MWE with its one -word synonym if available, and secondly, we use the synonyms of an upcoming single word to find the most proper nodes for mapping; (3) we employ a 7-gram POS-based language model (POSLM) to re-rank the k -shortest obtained paths, and produce well-structured and more grammatical compressions.</S>
			<S sid ="23" ssid = "23">To our knowledge, this paper presents the first attempt to use MWEs, synonymy and POSLM to improve the quality of word graph-based MSC.</S>
			<S sid ="24" ssid = "24">Extensive experiments on the released standard dataset demonstrate the effectiveness of our proposed approach.</S>
			<S sid ="25" ssid = "25">Figure 1.1 also depicts the overview of this approach.</S>
			<S sid ="26" ssid = "26">The rest of this paper is organized as follows.</S>
			<S sid ="27" ssid = "27">Section 2 summarizes the related work.</S>
			<S sid ="28" ssid = "28">Section 3 presents our proposed approach.</S>
			<S sid ="29" ssid = "29">The data preparation process for evaluating our method is demonstrated in Section 4, and Section 5 reports the evaluation metrics and the performed experiments.</S>
			<S sid ="30" ssid = "30">Finally, Section Clusters of Relevant Sen tences Google News POS-Tagging Tokenizing Stemmin g WordNet MWE Detection Synonym Mapping jMWE Word-Graph Co nstructor K-Shortest Paths Co mp ression Cand idates Newswir e Corpu s POS-Tagging POS-based Re-rankin g POSLM SRILM Best Comp ression Cand idates Figure 1.1: Overview of the proposed approach 6 concludes the paper.</S>
	</SECTION>
	<SECTION title="Related  Work. " number = "2">
			<S sid ="31" ssid = "1">2.1 Multi-Sentence Compression.</S>
			<S sid ="32" ssid = "2">State-of-the-art approaches in the field of MSC are generally divided into supervised [21, 11] and unsupervised groups [6].</S>
			<S sid ="33" ssid = "3">MSC methods traditionally use a syntactic parser to generate grammatical compressions, and fall into two categories (based on their implementations): (1) tree-based approaches, which create a compressed sentence by making edits to the syntactic tree of the original sen tence [21, 11, 10, 8]; (2) sentence-based approaches, which generates strings directly [6].</S>
			<S sid ="34" ssid = "4">As an alternative, word graph-based approaches that only require a POS tagger have recently been used in different tasks, such as guided microblog summarization [27], opinion summarization [12] and newswire summarization [9, 4, 30].</S>
			<S sid ="35" ssid = "5">In these approaches, a directed word graph is constructed in which nodes represent words while edges between two nodes represent adjacency relations between words in a sentence.</S>
			<S sid ="36" ssid = "6">Hence, the task of sentence compression is performed by finding the k-shortest paths in the word graph.</S>
			<S sid ="37" ssid = "7">In particular, our work is applied to newswire summarization.</S>
			<S sid ="38" ssid = "8">In this field, Filippova (2010) has introduced an elegant word graph-based MSC approach that relies on the redundancy among the set of related sentences.</S>
			<S sid ="39" ssid = "9">However, some important information are missed from 48% to 60% of the generated sentences in their approach [4].</S>
			<S sid ="40" ssid = "10">Thus, Boudin and Morin (2013) proposed an additional re-ranking scheme to identify summarizations that contain key phrases.</S>
			<S sid ="41" ssid = "11">However, they mentioned that grammaticality is sacrificed to improve informativity in their work.</S>
			<S sid ="42" ssid = "12">In our proposed approach, we utilize MWEs and synonym words in sentences to significantly enhance the traditional word graph, and improve informativity.</S>
			<S sid ="43" ssid = "13">Then, we re-rank the generated compression candidates with a 7-gram POSLM that captures the syntactic information, and strengthens the compressed sentences in terms of grammaticality.</S>
			<S sid ="44" ssid = "14">2.2 Multiword Expressions.</S>
			<S sid ="45" ssid = "15">An MWE is a combination of words with lexical, syntactic or semantic idiosyncrasy [26, 3].</S>
			<S sid ="46" ssid = "16">It is estimated that the number of MWEs in the lexicon of a native speaker of a language has the same order of magnitude as the number of single words [15].</S>
			<S sid ="47" ssid = "17">Hence, explicit identification of MWEs has been shown to be useful in various NLP applications.</S>
			<S sid ="48" ssid = "18">Components of an MWE can be treated as a single unit to improve the effectiveness of re-ranking steps in IR systems [1].</S>
			<S sid ="49" ssid = "19">In this paper, we identify MWEs, merge their components, and replace them with their available one -word synonyms, if applicable.</S>
			<S sid ="50" ssid = "20">These strategies help to construct an improved word graph and enhance the informativity of the compression candidates.</S>
			<S sid ="51" ssid = "21">2.3 POS-based Language Model (POSLM).</S>
			<S sid ="52" ssid = "22">A language model assigns a probability to a sequence of m words P (w1 , ..., wm ) by means of a probability distribution.</S>
			<S sid ="53" ssid = "23">Language models are an essential element of natural language processing, in tasks ranging from spell-checking to machine translation.</S>
			<S sid ="54" ssid = "24">Given the increasing need to ensure grammatical sentences in different applications, POSLM comes into play as a remedy.</S>
			<S sid ="55" ssid = "25">POSLM describes the probability of a sequence of m POS tags P (t1 , ..., tm ).</S>
			<S sid ="56" ssid = "26">POSLMs are traditionally used for speech recognition problems [14] and statistical machine translation systems [17, 23, 25] to capture syntactic information.</S>
			<S sid ="57" ssid = "27">In this paper, we benefit from POSLMs to capture the syntactic information of sentences and improve the grammaticality of compression candidates.</S>
	</SECTION>
	<SECTION title="Proposed Approach. " number = "3">
			<S sid ="58" ssid = "1">3.1 Word Graph Construction for MSC.</S>
			<S sid ="59" ssid = "2">Consider a set of related sentences S = {s1 , s2 , ..., sn }, a traditional word graph is constructed by iteratively adding sentences to it.</S>
			<S sid ="60" ssid = "3">This directed graph is an ordered pair G = (V, E) comprising of a set of vertices or words together with a set of directed edges which shows the adjacency between corresponding nodes [9, 4].</S>
			<S sid ="61" ssid = "4">The graph is firstly constructed by the first sentence and displays words in a sentence as a sequence of connected nodes.</S>
			<S sid ="62" ssid = "5">The first node is the start node and the last one is the end node.</S>
			<S sid ="63" ssid = "6">Words are added to the graph in three steps of the following order: (1) non-stopwords for which no candidate exists in the graph; or for which an unambiguous mapping is possible (i.e. there is only one node in the graph that refer to the same word/POS pair); (2) non-stopwords for which there are either several possible candidates in the graph; or for which they occur more than once in the sentence; (3) stopwords.</S>
			<S sid ="64" ssid = "7">For the last group, same as Boudin and Morin (2013), we use the stopword list included in nltk1 extended with temporal nouns such as ‘yesterday’, ‘Friday’, and etc..</S>
			<S sid ="65" ssid = "8">All MSC approaches aim at producing condensed sentences that inherit the most important information from the original content while remains syntactically correct.</S>
			<S sid ="66" ssid = "9">However, gaining these goals at the same time remains still difficult.</S>
			<S sid ="67" ssid = "10">As a remedy, we believe that a better resolution to construct an improved word graph can be obtained by using more sophisticated pre-processing and re-ranking steps.</S>
			<S sid ="68" ssid = "11">Thus, we focus on the notions of synonymy, MWE and POSLM re-ranking, which dramatically raise the informativity and grammaticality of compression candidates.</S>
			<S sid ="69" ssid = "12">In the following, we describe the details of our proposed approach: 3.2 Merging and Mapping Strategies.</S>
			<S sid ="70" ssid = "13">Like many NLP applications, MSC will benefit from the identification of MWEs and the concept of synonymy; and even more so when lexical diversity arises in a collection of sentences.</S>
			<S sid ="71" ssid = "14">For example, consider a sentence that includes an MWE (kick the bucket ): It would be a sad thing to kick the bucket without having been to Alaska.</S>
			<S sid ="72" ssid = "15">To benefit from this MWE that has 3 components/words, we propose the merging strategy below: Firstly, after tokenizing the sentence and stemming the words, we detect the MWE and its tuple POS with an MWE detector.</S>
			<S sid ="73" ssid = "16">This step has the advantage of reducing the ambiguity of mapping upcoming words onto the existing words with the same appearance in the graph.</S>
			<S sid ="74" ssid = "17">For example, the word kick above has a different meaning and POS (as an MWE component) from the identical appearance word kick in isolation (in another sentence say they kick open the door and entered the room.).</S>
			<S sid ="75" ssid = "18">So, MWE identification can keep us from mapping these two kick together and retain the important meaning of the content.</S>
			<S sid ="76" ssid = "19">To detect MWEs, we use the jMWE toolkit [19], which is a Java-based library for constructing and testing MWE token detectors.</S>
			<S sid ="77" ssid = "20">Secondly, we use version 3.0 of WordNet [22] to obtain its available one -word synonym with an appropriate POS and replace the n -words MWE with a shorter synonym word.</S>
			<S sid ="78" ssid = "21">WordNet groups all synonyms into a SynSet - a synonym set.</S>
			<S sid ="79" ssid = "22">1 http://nltk.org/ We only consider the most frequent one -word synonym in the WordNet that also appears in the other relevant sentences.</S>
			<S sid ="80" ssid = "23">If other relevant sentences contain none of the one -word synonyms, the most frequent one is selected directly from the WordNet to help condense the sentence.</S>
			<S sid ="81" ssid = "24">Three native speakers were asked to investigate all the synonym mappings performed in our approach, and specify whether each mapped synonym reflects the meaning of the original word in the sentence or not.</S>
			<S sid ="82" ssid = "25">Based on this evaluation, the average rate of correct synonym mappings is 88.21%.</S>
			<S sid ="83" ssid = "26">In case that no appropriate synonym is found for MWE, the merged MWE itself was used as a back-off.</S>
			<S sid ="84" ssid = "27">This can reduce the number of graph nodes and, consequently, the ambiguity for further false mappings of MWE components in the word graph.</S>
			<S sid ="85" ssid = "28">These steps are briefly depicted in Figure 3.1 (a).</S>
			<S sid ="86" ssid = "29">kick VB bucket NN smart / freq=n MWE Detector bright / freq=m brilliant / freq=p student Kick the bucket VB Synonym y WordNet Synonym bright / freq=m+n+p die VB student (a) (b) Figure 3.1: (a) Example of MWE merging and mapping, (b) Example of Synonym mapping Furthermore, we use the concept of synonymy for mapping upcoming single words.</S>
			<S sid ="87" ssid = "30">For example, consider 3 different sentences containing words bright, smart and brilliant, which are synonyms of each other.</S>
			<S sid ="88" ssid = "31">Assume each sentence contains one of these synonyms respectively.</S>
			<S sid ="89" ssid = "32">Without an appropriate mapping based on a notion of synonymy, these 3 nodes will be added to the word graph as separate nodes.</S>
			<S sid ="90" ssid = "33">With our approach, the word graph in this example is constructed with a single node containing a word as a representative of its synonyms from the other sentences.</S>
			<S sid ="91" ssid = "34">The weight of the obtained node is computed by summing the frequency scores from the other nodes as shown in Figure 3.1 (b) for each pair of word/POS.</S>
			<S sid ="92" ssid = "35">The main purpose of this modification is three fold: (i) the ambiguity of mapping nodes is reduced; (ii) the number of total possible paths (compression candidates) is decreased; and (iii) the weight of frequent similar words with different appearances in the content is better reflected by the notion of synonymy.</S>
			<S sid ="93" ssid = "36">In the following example, we will demonstrate how we use the pre-processing strategies to produce refined sentences, and generate an improved word graph.</S>
			<S sid ="94" ssid = "37">Among the underlined words, MWEs are put into bracket, and synonyms are identified by the same superscript notations.</S>
			<S sid ="95" ssid = "38">(1) ✿T✿e✿e✿n✿a✿g✿e boys are more interestedb c in [✿ju✿n✿✿k✿f✿o✿o✿d✿] marketing and c✿o✿n✿s✿u✿m✿✿e more ✿[f✿a✿st✿✿f✿o✿o✿d✿] (2) [Junk food]c e than girls.</S>
			<S sid ="96" ssid = "39">marketers find y✿o✿u✿n✿✿g boys more f✿a✿sc✿i✿n✿a✿t✿e✿d than girls, a survey ✿re✿l✿e✿a✿se✿d✿ by the Cancer Council shows.</S>
			<S sid ="97" ssid = "40">(3) Adolescenta survey.</S>
			<S sid ="98" ssid = "41">boys [✿u✿s✿e✿u✿p✿] e more [✿f✿a✿st✿✿fo✿o✿d✿✿] than girls, [✿a✿cc✿o✿r✿d✿i✿n✿g✿✿to✿] a new a (4) The survey, p✿u✿✿b✿li✿s✿h✿e✿d by the Cancer Council, observed ✿t✿e✿en✿✿a✿g✿e c boys were regular consumers of [✿ju✿✿n✿k✿f✿o✿o✿d✿] . The word graph constructed for the above sentences are partially shown in Figure 3.2.</S>
			<S sid ="99" ssid = "42">Some nodes, edge weights and punctuations are omitted from the graph for more clarity.</S>
			<S sid ="100" ssid = "43">more consume boys are interested find more in than and girls marketing teenage marketers End Start fast~food Figure 3.2: The generated word graph and a compression path Where mapping in the graph is ambiguous (i.e. there are two or more nodes in the graph that refer to the same word/POS pair), we follow the instruction stated by Filippova (2010): the immediate context (the preceding and following words in the sentence, and the neighboring nodes in the graph) or the frequency (i.e. the node which has words mapped to it) is used to select the best candidate node.</S>
			<S sid ="101" ssid = "44">A new node is created only if there is no suitable candidate to be mapped to, in the graph.</S>
			<S sid ="102" ssid = "45">In Filippova (2010), edge weights are calculated using the weighting function defined in Equation 3.1 in which wI (e i,j ) is given by Equation 3.2.</S>
			<S sid ="103" ssid = "46">w(ei,j ) = wI (e i,j ) (3.1) f req(i) × f req(j) I f req(i) + f req(j) w (e ) = s∈S dif f (s, i, j)− 1 (3.2) where f req(i) is the number of words mapped to the node i. The function dif f (s, i, j) refers to the distance between the offset positions of words i and j in sentence s. Algorithm 1 Proposed MSC Word Graph n 1: Input: A cluster of relevant sentences: S = {si }i=1 2: Output: G = (V, E) 3: for i = 1 to n do 4: t ← Tokenize(si ) 5: st ← Stemming(t) 6: MWEcomp ← MWE-Detection(t, st) 7: MWE-list ← Merge-MWE(M W E-comp) 8: sentSize ← SizeOf(t) 9: for j = 1 to sentSize do 10: LABEL ← tj 11: SID ← i 12: PID ← j 13: SameN ← getSameN odes(G, LABEL) 14: if sizeOf (SameN ) ≥ 1 then 15: vj ← getBestSame(SameN ) 16: mapListvj ← mapListvj ∪ (SI D, P I D) 17: else 18: SynN ← getSynonymNodes(G, LABEL) 19: if sizeOf (SynN ) ≥ 1 then 20: vj ← getBestSyn(SynN ) 21: mapListvj ← mapListvj ∪ (SI D, P I D) 22: esle if tj ∈ MWE-list then 23: WNSyn ← getBestWNSyn(LABEL) 24: vj ← creatNewNode(G, WNSyn) 25: mapListvj ← (SI D, P I D) 26: esle 27: vj ← creatNewNode(G, LABEL) 28: mapListvj ← (SI D, P I D) 29: end if 30: end if 31: if not existEdge (G, vj−1 → vj ) then 32: addEdge (vj−1 → vj , G) 33: end if 34: end for 35: end for Algorithm 1 presents the steps to build our proposed MSC word graph, G(V, E).</S>
			<S sid ="104" ssid = "47">We start with a cluster of relevant sentences from a set of input newswire clusters.</S>
			<S sid ="105" ssid = "48">Each cluster is denoted as S = {si }i=1 where each si is a sentence containing POS annotations.</S>
			<S sid ="106" ssid = "49">Line 45: Each si ∈ S is split into a set of tokens, where each token, tj consists of a word and its corresponding POS annotation (e.g.”boys:NN” ).</S>
			<S sid ="107" ssid = "50">The tokens are also stemmed into a set of stemmed words, st. Line 67: For each sentence, MWE components, i.e., MWEcomp, are detected using the set of tokens t and stems st. Then, these MWE components are merged in each sentence, and kept in a list of MWE-list.</S>
			<S sid ="108" ssid = "51">Line 1012: Each unique tj will form a node vj in the MSC graph, with tj being the label.</S>
			<S sid ="109" ssid = "52">Since we only have one node per unique token, each node keeps track of all sentences that include its token.</S>
			<S sid ="110" ssid = "53">So, each node keeps a list of sentence identifier, (SID) along with the position of token in that sentence, (PID).</S>
			<S sid ="111" ssid = "54">Each node including a single word or a merged MWE will thus carry a mapping list (mapList) which is a list of {SID:PID} pairs representing the node’s membership in a sentence.</S>
			<S sid ="112" ssid = "55">Line 1316: For mapping the token tj , we first explore the graph to find the same node (i.e. node that refers to the same word/POS pair as tj ).</S>
			<S sid ="113" ssid = "56">If two or more same nodes are found, considering the aforementioned ambiguous mapping criteria in Section 3.2, the best candidate node is selected for mapping.</S>
			<S sid ="114" ssid = "57">Then the pair of (SID:PID) of tj will be added to the mapping list of the selected node, i.e., mapListvj . Line 1821: If no same node exists in the graph, then we look for the best synonym node in the graph (i.e. find the most frequent synonym among the WordNet synsets that was earlier added to the graph.).</S>
			<S sid ="115" ssid = "58">Again, the mapping list of the selected node, mapListvj will be updated to include the pair of (SID:PID) of tj . Line 2228: If none of the above conditions are satisfied, it is time to create a new node in the graph.</S>
			<S sid ="116" ssid = "59">However as explained in Section 3.2, when tj is MWE, we extract the best WordNet one -word synonym, and replace the n -word MWE with this shorter synonym word.</S>
			<S sid ="117" ssid = "60">So, a shorter content node will be added to the graph.</S>
			<S sid ="118" ssid = "61">Line 3133: the original structure of a sentence is reordered with the use of directed edges.</S>
			<S sid ="119" ssid = "62">A heuristic algorithm is then used to find the k -shortest paths from start to end node in the graph.</S>
			<S sid ="120" ssid = "63">Throughout our experiments, the appropriate value for k is 150.</S>
			<S sid ="121" ssid = "64">By re-ranking this number of shortest paths, most of the potentially good candidates are kept and a decline in performance is prevented.</S>
			<S sid ="122" ssid = "65">Paths shorter than eight words or do not contain a verb are filtered before re-ranking.</S>
			<S sid ="123" ssid = "66">The remaining paths are re-ranked and the path that has the lightest average edge weight is eventually considered as the best compression.</S>
			<S sid ="124" ssid = "67">Next, an accurate re-ranking approach to identify the most informative grammatical compression candidate is described.</S>
			<S sid ="125" ssid = "68">3.3 Re-ranking Strategy (POSLM).</S>
			<S sid ="126" ssid = "69">Boudin and Morin (2013) have recently utilized TextRank (Mihalcea and Tarau 2004) to re-rank the compression candidates.</S>
			<S sid ="127" ssid = "70">In their approach, a word recommends other co-occurring words, and the strength of the recommendation is recursively computed based on the importance of the words making the recommendation.</S>
			<S sid ="128" ssid = "71">The score of a keyphrase k is computed by summing the salience of the words it contains, normalized with its length + 1 to favor longer n -grams according to Equation 3.3.</S>
			<S sid ="129" ssid = "72">score(k) = w∈k T extRank(w) length(k) + 1 (3.3) Finally, the paths are re-ranked and the score of a compression candidate c is given by Equation 3.4.</S>
			<S sid ="130" ssid = "73">score(c) = i,j∈path(c) w(ei,j ) length(c) × k∈c score(k) (3.4) In our re-ranking step, we benefit from the fact that POS tags capture the syntactic roles of words in a sentence.</S>
			<S sid ="131" ssid = "74">We use a POSLM to assign a grammaticality score to each generated compression.</S>
			<S sid ="132" ssid = "75">Our hypothesis is that POSLM helps in identifying the most grammatical sentence among the k -most informative compressions.</S>
			<S sid ="133" ssid = "76">This strategy shall improve the grammaticality of MSC, even when the grammatical structures of the input sentences are completely different.</S>
			<S sid ="134" ssid = "77">Word-based language models estimate the probability of a string of m words by Equation 3.5, and POSLMs estimate the probability of string of m POS tags by Equation 3.6 [23].</S>
			<S sid ="135" ssid = "78">m p(wm ) ∝ n p(wi |wi−1 ) (3.5) 1 i−1 m i−n+1 p(tm ) ∝ n p(ti |ti−1 ) (3.6) 1 i−1 i−n+1 where, n is the order of the language model, and w/t refers to the sub-sequence of words/tags from position i to j. To build a POSLM, we use the SRILM toolkit with modified KneserNey smoothing [28], and train the language model on our POS annotated corpus.</S>
			<S sid ="136" ssid = "79">SRILM collects n -gram statistics from all n -grams occurring in a corpus to build a single global language model.</S>
			<S sid ="137" ssid = "80">To train our POSLM, we need a POS- annotated corpus.</S>
			<S sid ="138" ssid = "81">In this regard, we make use of the Stanford POS tagger [29] to annotate the AFE sections of LDCs Gigaword corpus (LDC2003T05) as a large newswire corpus (∼170 M-words).</S>
			<S sid ="139" ssid = "82">Then, we remove all words from the pairs of words/POS in the POS annotated corpus.</S>
			<S sid ="140" ssid = "83">Although the vocabulary of a POSLM, which is usually ranging between 40 and 100 tags, is much smaller than the vocabulary of a word-based language model, there is still a chance in some cases of unseen events.</S>
			<S sid ="141" ssid = "84">Since modified KneserNey discounting appears to be the most efficient method in a systematic description and comparison of the usual smoothing methods [13], we use this type of smoothing to help our language model.</S>
			<S sid ="142" ssid = "85">The compression candidates also need to be annotated with POS tags.</S>
			<S sid ="143" ssid = "86">So, the score of each compression is estimated by the language model, based on its sequence of POS tags.</S>
			<S sid ="144" ssid = "87">Since factors like POS tags, are less sparse than surface forms, it is possible to create a higher order language models for these factors.</S>
			<S sid ="145" ssid = "88">This may encourage more syntactically correct output [18].</S>
			<S sid ="146" ssid = "89">Thus, in our approach we use 7-gram language modeling based on part of speech tagging to re-rank the k -best compressions generated by the word graph.</S>
			<S sid ="147" ssid = "90">To re-rank the obtained paths, our POSLM gives the perplexity score (scoreLM ) which is the geometric average of 1/probability of each sentence, normalized by the number of words.</S>
			<S sid ="148" ssid = "91">So, scoreLM for each sequence of POS in the k -best compressions is computed by Equation 3.7.</S>
			<S sid ="149" ssid = "92">scoreLM (c) = 10 log prob(c) #word (3.7) where prob(c) is the probability of compression (C) including #W ord number of words, computed by the 7-gram POSLM.</S>
			<S sid ="150" ssid = "93">As the estimated scores for each cluster of sentences fall into different ranges, we make use of unity-based normalization to bring the values of score(c) in Equation 4, and the scoreLM into the range [0, 1].</S>
			<S sid ="151" ssid = "94">The score of each compression is finally given by Equation 3.8 scoref inal (c) = µ × score(c) + (1 − µ) × scoreLM (c) (3.8) in which the scaling factor µ in our experiments has been set to 0.4, so as to reach the best re-ranking results.</S>
			<S sid ="152" ssid = "95">To better understand how POSLM is used, consider the sentences below, which have the same scores for informativity but are added into our re-ranking contest to be investigated based on their grammaticality.</S>
			<S sid ="153" ssid = "96">The corresponding POS sequences of these sentences are given to the trained language model to clarify which one is more grammatical.</S>
			<S sid ="154" ssid = "97">(1) Boys more consume fast food than girls.</S>
			<S sid ="155" ssid = "98">NNS RBR V BP Wrong Pattern JJ NN IN NNS (2) Boys co ns u m e more fa st fo od th an gir ls.</S>
			<S sid ="156" ssid = "99">N N S V B P J J R JJ N N I N N N S As expected, the winner of this contest is the second POS sequence, which has a better grammatical structure and gets a higher probability score from the POSLM.</S>
	</SECTION>
	<SECTION title="Data  Preparation. " number = "4">
			<S sid ="157" ssid = "1">Many attempts have been made to release various kinds of datasets and evaluation corpora for sentence compression and automatic summarization, such as the one introduced in [5].</S>
			<S sid ="158" ssid = "2">However, to our knowledge, there is no dataset available to evaluate MSC in an automatic way [4].</S>
			<S sid ="159" ssid = "3">Since the prepared dataset in Boudin and Morin (2013) is also in French, we have followed the below instructions to construct a Standard English newswire dataset: We have collected news articles in clusters on the Australian1 and U.S.2 edition of Google News over a period of five months (January 2015 - May 2015).</S>
			<S sid ="160" ssid = "4">Clusters composed of at least 15 news articles about one single news event, were manually extracted from different categories (i.e. Top Stories, World, Business, Technology, Entertainment, Science, Health, etc.).</S>
			<S sid ="161" ssid = "5">Leading sentences in news articles are known to provide a good summary of the article content and are used as a baseline in summarization [7].</S>
			<S sid ="162" ssid = "6">Hence, to obtain the sets of related sentences, we have extracted the first sentences from the articles in the cluster and removed duplicates.</S>
			<S sid ="163" ssid = "7">1 http://news.google.com.au/ 2 http://news.google.com/ The released dataset contains 568 sentences spread over 46 clusters (each is related to one single news event).</S>
			<S sid ="164" ssid = "8">The average number of sentences within each cluster is 12, with a minimum of 7 and a maximum of 24.</S>
			<S sid ="165" ssid = "9">Three native English speakers were also asked to meticulously read the sentences provided in the clusters, extract the most salient facts, summarize the set of sentences, and generate three reference summaries for each cluster with as less new vocabularies as possible.</S>
			<S sid ="166" ssid = "10">In practice, along with the clusters of sentences with similar lexical and grammatical structures (we refer to these clusters as normal ), it is likely to have clusters of content-relevant sentences, but with different (non-redundant) appearances and grammatical structures (we consider these clusters as diverse ).</S>
			<S sid ="167" ssid = "11">In fact, the denser a word graph is, the more edges interconnect with vertices and hence more paths pass through the same vertices.</S>
			<S sid ="168" ssid = "12">This results in low lexical and syntactical diversity, and vice versa [30].</S>
			<S sid ="169" ssid = "13">The density of a word graph generated by sentences of a cluster G = (V, E) is given by Equation 4.1.</S>
			<S sid ="170" ssid = "14">Density = |E| |V |(|V | − 1) (4.1) Thereupon, we have also identified 15 diverse clusters among the 46 clusters to demonstrate the effect of our approach on the normal and diverse groups.</S>
			<S sid ="171" ssid = "15">Table 4.1 lists the properties of the evaluation dataset.</S>
			<S sid ="172" ssid = "16">t o t a l # c l u s t e r s 4 6 # n o r m a l c l u s t e r s 3 1 # d i v e r s e c l u s t e r s 1 5 t o t a l # s e n t e n c e s 5 6 8 a v g # s e nt e n c e s/ cl u st er 12 mi n #s en te nc es /cl us te r 7 m ax #s en te nc es /cl us ter 24 Table 4.1: Information about the constructed dataset</S>
	</SECTION>
	<SECTION title="Experiments. " number = "5">
			<S sid ="173" ssid = "1">5.1 Evaluation Metrics.</S>
			<S sid ="174" ssid = "2">We evaluate the proposed method over our constructed dataset (normal and diverse clusters) using automatic and the manual evaluations.</S>
			<S sid ="175" ssid = "3">The quality of the generated compressions was assessed automatically through version 2.0 1 of Rouge [20] and the version 13a 2 of Bleu [24].</S>
			<S sid ="176" ssid = "4">These sets of metrics are typically used for evaluating automatic summarization and machine translation.</S>
			<S sid ="177" ssid = "5">They compare an automatically produced summary against a reference or a set of human-produced summaries.</S>
			<S sid ="178" ssid = "6">1 http://kavitaganesan.com/content/rouge-2.0 2 ftp://jaguar.ncsl.nist.gov/mt/resources/mtevalv13a.pl For the manual investigation of the quality of the generated compressions, three native English speakers were asked to rate the grammaticality and in- formativity of the compressions based on the points scale defined in Filippova (2010).</S>
			<S sid ="179" ssid = "7">Grammaticality : (i) if the compression is grammatically perfect → point 2 ; (ii) if the compression requires some minor editing → point 1 ; (iii) if the compression is ungrammatical → point 0.</S>
			<S sid ="180" ssid = "8">The lack of capitalization is ignored by the raters.</S>
			<S sid ="181" ssid = "9">Informativity : (i) if the compression conveys the gist of the content and is mostly similar to the human-produced summary → point 2 ; (ii) if the compression misses some important information → point 1 ; (iii) if the compression contains none of the important contents → point 0 (Table 5.1).</S>
			<S sid ="182" ssid = "10">The k value for the agreement between raters falls into range (0.4 ∼ 0.6) through Kappa’s evaluation metrics, which indicates that the strength of this agreement is moderate [2].</S>
			<S sid ="183" ssid = "11">Feature State of the Compression Point 2 1 0 ( grammatically perfect √ Grammaticality requires some minor editing √ ungrammatical √ Informativity ( conveys the gist of the content √ misses some important information √ contains none of the important contents √ Table 5.1: Points scale defined in the agreement between raters 5.2 Experiment Results.</S>
			<S sid ="184" ssid = "12">Two existing approaches, i.e., Filippova (2010) and Boudin and Morin (2013) are used as Baseline1 and Baseline2 respectively, for comparison purposes in our experiments.</S>
			<S sid ="185" ssid = "13">To better understand the behavior of our system, we examined our test dataset, and made the following observations.</S>
			<S sid ="186" ssid = "14">For the manual evaluation (Table 5.2), we observed a significant improvement in the average grammaticality and informativity scores along with the compression ratio (CompR) over the normal and diverse clusters.</S>
			<S sid ="187" ssid = "15">The informativity of Baseline1 is adversely influenced by missing important information about the set of related sentences [4].</S>
			<S sid ="188" ssid = "16">However Baseline2 enhanced the informativity, the grammaticality scores are decreased due to the outputs of longer compressions.</S>
			<S sid ="189" ssid = "17">In our approach, the remarkable improvement in the grammaticality scores is due to the adding of the syntactic-based re-ranking step.</S>
			<S sid ="190" ssid = "18">Using this re-ranking method, the most grammatical sentences are picked among the k -best compression candidates.</S>
			<S sid ="191" ssid = "19">Furthermore, merging MWEs, replacing them with their available one -word synonyms and mapping words using synonymy all enhance the informativity scores, and help to generate a denser word graph instead of a sparse one.</S>
			<S sid ="192" ssid = "20">Given that, the value of the compression ratio (∼48%) is better than the best obtained compression ratio on these two baselines (50%).</S>
			<S sid ="193" ssid = "21">The average performance of the baseline methods and the proposed approach Method Normal Diverse CompR Inf o. Gr a m. In fo . Gr a m. Ba sel in e1 1.4 4 1 . 6 7 1.</S>
			<S sid ="194" ssid = "22">1 7 1 . 1 9 5 0 % Ba sel in e2 1.6 8 1 . 6 0 1.</S>
			<S sid ="195" ssid = "23">3 0 1 . 1 2 5 8 % Pr op os ed 1.6 8 1 . 6 8 1.</S>
			<S sid ="196" ssid = "24">3 6 1 . 4 7 4 8 % Table 5.2: Average scores over normal and diverse clusters separately given by the raters; along with the estimated compression rate over the normal and diverse clusters in terms of Rouge and Bleu scores are also shown in Table 5.3.</S>
			<S sid ="197" ssid = "25">Rouge measures the concordance of candidate and reference summaries by determining n -gram, word sequence, and word pair matches.</S>
			<S sid ="198" ssid = "26">We used Rouge F-measure for unigram, bigrams, and su4 (skip- bigram with maximum gap length 4) to evaluate the compression candidates.</S>
			<S sid ="199" ssid = "27">The Bleu metric computes the scores for individual sentences; then averages these scores over the whole corpus for a final score.</S>
			<S sid ="200" ssid = "28">We used Bleu for 4-grams to evaluate the results.</S>
			<S sid ="201" ssid = "29">M et ri c Ba se lin e1 Ba se lin e2 Pr o po se d R ou ge1 0 . 4 9 1 2 0 . 5 0 9 3 0 . 5 8 4 1 R ou ge2 0 . 3 0 5 0 0 . 3 1 3 1 0 . 4 2 8 4 R ou ge su 4 0 . 2 8 6 7 0 . 3 0 0 2 0 . 3 9 5 0 Bl eu4 0 . 4 5 1 0 0 . 5 1 4 4 0 . 6 9 1 3 Table 5.3: Average scores by automatic evaluation over the normal and diverse clusters To make the candidate and reference summaries comparable, a process of manual MWE detection is performed on the reference summaries and the MWE components are merged by three native annotators.</S>
			<S sid ="202" ssid = "30">In details, automatic evaluation packages use WordNet to compare the synonyms in candidate and reference summaries.</S>
			<S sid ="203" ssid = "31">WordNet puts hyphenation on synonyms, e.g., kick-the-bucket, so annotators hyphenate MWEs in their summaries to be used in these packages.</S>
			<S sid ="204" ssid = "32">Then, the synonym properties are set in these packages to consider the synsets.</S>
			<S sid ="205" ssid = "33">Thus, n -words MWEs are linked to their one -word synonyms in the candidate summary.</S>
			<S sid ="206" ssid = "34">The overall results support our hypothesis that using the POSLM for re-ranking the compression candidates, results in more grammatical compressions, especially for diverse clusters.</S>
			<S sid ="207" ssid = "35">This issue is confirmed by 4-grams Bleu, which shows the grammaticality enhancement rather than the informativity.</S>
			<S sid ="208" ssid = "36">Meanwhile, we try to simultaneously improve the informativity by identifying and merging MWEs along with mapping the synonyms.</S>
			<S sid ="209" ssid = "37">Furthermore, the effectiveness of Rouge and Bleu is studied using the Pearson’s correlation coefficient.</S>
			<S sid ="210" ssid = "38">We found that Rouge shows a better correlation with informativity, while the Bleu correlates better with grammaticality.</S>
			<S sid ="211" ssid = "39">Overall, the results in Figure 5.1 show high correlation (0.5 ∼ 1.0) between the automatic evaluation results and human ratings for both Rouge and Bleu.</S>
			<S sid ="212" ssid = "40">The main reason may be the simulation of factors that humans usually consider for summarization, such as merging and mapping strategies, along with the syntactic criteria employed by POSLM.</S>
			<S sid ="213" ssid = "41">0.7 0.6 0.5 0.4 0.3 0.2 0.1 0 ROUGE-1 ROUGE-2 ROUGE-SU4 BLEU4 Info.</S>
			<S sid ="214" ssid = "42">0.611 0.563 0.588 0.549 Gram.</S>
			<S sid ="215" ssid = "43">0.472 0.529 0.507 0.605 Figure 5.1: The effectiveness of Rouge and Bleu To investigate the impact of each improvement separately, we have also conducted separate experiments over the prepared dataset.</S>
			<S sid ="216" ssid = "44">The results are shown in Figure 5.2 and the related data are provided in Table 5.4.</S>
			<S sid ="217" ssid = "45">In our work, merging and mapping strategies significantly increase the informativity of the compressions.</S>
			<S sid ="218" ssid = "46">So, their computed scores by Rouge are higher than the score of POSLM.</S>
			<S sid ="219" ssid = "47">However, the combination of MWE merging and mapping gets a slightly lower score from Rouge-su4.</S>
			<S sid ="220" ssid = "48">One reason may be that usage of synonymy only for MWEs and ignoring other one -word synonym mapping causes a more diverse graph, which slightly decreases the informativity and grammaticality of compressed sentences.</S>
			<S sid ="221" ssid = "49">Meanwhile, POSLM gets better scores from Bleu4, which indicates the grammaticality enhancement rather than the informativity.</S>
			<S sid ="222" ssid = "50">0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0 Synonymy Mergi ng &amp; Mappi ng POSLM All Together ROUGE-1 ROUGE-2 ROUGE-SU4 BLEU4 Figure 5.2: The effects of the improvements separately</S>
	</SECTION>
	<SECTION title="Conclusions. " number = "6">
</PAPER>
