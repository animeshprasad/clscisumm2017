<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">Kleene is a high-level programming language, based on the OpenFst library, for constructing and manipulating finite-state acceptors and transducers.</S>
		<S sid ="2" ssid = "2">Users can program using regular expressions, alternation-rule syntax and right-linear phrase-structure grammars; and Kleene provides variables, lists, functions and familiar program-control syntax.</S>
		<S sid ="3" ssid = "3">Kleene has been approved by SAP AG for release as free, open-source code under the Apache License, Version 2.0, and will be available by August 2012 for downloading from http:// www.kleenelang.org.</S>
		<S sid ="4" ssid = "4">The design, implementation, development status and future plans for the language are discussed.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="5" ssid = "5">Kleene1 is a finite-state programming language in the tradition of the AT&amp;T Lextools (Roark and Sproat, 2007),2 the SFSTPL language (Schmid, 2005),3 the Xerox/PARC finite-state toolkit (Beesley and Karttunen, 2003)4 and FOMA (Hulde´n, 2009b),5 all of which provide higher-level programming for- malisms built on top of low-level finite-state libraries.</S>
			<S sid ="6" ssid = "6">Kleene itself is built on the OpenFst library 1 Kleene is named after American mathematician Stephen Cole Kleene (1909–1994), who investigated the properties of regular sets and invented the metalanguage of regular expressions.</S>
			<S sid ="7" ssid = "7">2 http://www.research.att.com/˜alb/ lextools/ 3 http://www.ims.unistuttgart.de/ projekte/gramotron/SOFTWARE/SFST.html 4 http://www.fsmbook.com 5 http://code.google.com/p/foma/ (Allauzen et al., 2007),6 developed by Google Labs and NYU’s Courant Institute.</S>
			<S sid ="8" ssid = "8">The design and implementation of the language were motivated by three main principles, summarized as Syntax Matters, Licensing Matters and Open Source Matters.</S>
			<S sid ="9" ssid = "9">As for the syntax, Kleene allows programmers to specify weighted or unweighted finite-state machines (FSMs)— including acceptors that encode regular languages and two-projection transducers that encode regular relations—using regular expressions, alternation- rule syntax and right-linear phrase-structure grammars.</S>
			<S sid ="10" ssid = "10">The regular-expression operators are borrowed, as far as possible, from familiar Perl-like and academic regular expressions, and the alternation rules are based on the “rewrite rules” made popular by Chomsky and Halle (Chomsky and Halle, 1968).</S>
			<S sid ="11" ssid = "11">Borrowing from general-purpose programming languages, Kleene also provides variables, lists and functions, plus nested code blocks and familiar control structures such as if-else statements and while loops.</S>
			<S sid ="12" ssid = "12">As for the licensing, Kleene, like the OpenFst library, is released under the Apache License, Version 2.0, and its other dependencies are also released under this and similar permissive licenses that allow commercial usage.</S>
			<S sid ="13" ssid = "13">In contrast, many notable finite- state implementations, released under the GPL and similar licenses, are restricted to academic and other noncommercial use.</S>
			<S sid ="14" ssid = "14">The Kleene code is also open- source, allowing users to examine, correct, augment and even adopt the code if the project should ever be abandoned by its original maintainer(s).</S>
			<S sid ="15" ssid = "15">6 http://www.openfst.org 50 Proceedings of the 10th International Workshop on Finite State Methods and Natural Language Processing, pages 50–54, Donostia–San Sebastia´n, July 23–25, 2012.</S>
			<S sid ="16" ssid = "16">Qc 2012 Association for Computational Linguistics It is hoped that Kleene will provide an attractive development environment for experts and students.</S>
			<S sid ="17" ssid = "17">Pre-edited Kleene scripts can be run from the command line, but a graphical user interface is also provided for interactive learning, programming, testing and drawing of FSMs.</S>
			<S sid ="18" ssid = "18">Like comparable implementations of finite-state machines, Kleene can be used to implement a variety of useful applications, including spell-checking and -correction, phonetic modeling, morphological analysis and generation, and various kinds of pattern matching.</S>
			<S sid ="19" ssid = "19">The paper continues with a brief description the Kleene language, the current state of development, and plans for the future.</S>
	</SECTION>
	<SECTION title="Implementation. " number = "2">
			<S sid ="20" ssid = "1">The Java-language Kleene parser, implemented with JavaCC and JJTree (Copeland, 2007),7 is Unicode- capable and portable.</S>
			<S sid ="21" ssid = "2">Successfully parsed statements are reduced to abstract syntax trees (ASTs), which are interpreted by calling C++ functions in the OpenFst library via the Java Native Interface (JNI).</S>
	</SECTION>
	<SECTION title="Kleene Syntax. " number = "3">
			<S sid ="22" ssid = "1">3.1 Regular Expressions.</S>
			<S sid ="23" ssid = "2">Basic assignment statements have a regular expression on the right-hand side, as shown in Table 1.</S>
			<S sid ="24" ssid = "3">As in Perl regular expressions, simple alphabetic characters are literal, and concatenation is indicated by juxtaposition, with no overt operator.</S>
			<S sid ="25" ssid = "4">Parentheses can be used to group expressions.</S>
			<S sid ="26" ssid = "5">The postfixed * (the “Kleene star”), + (the “Kleene plus”), and ? denote zero-or-more, one-or-more, and optionality, respectively.</S>
			<S sid ="27" ssid = "6">Square-bracketed expressions have their own internal syntax to denote character sets, including character ranges such as [A-Z].</S>
			<S sid ="28" ssid = "7">The union operator is |.</S>
			<S sid ="29" ssid = "8">Basic regular operations missing from Perl regular expressions include composition (◦ or _o_), crossproduct (:), language intersection (&amp;), language negation (∼) and language subtraction (-).</S>
			<S sid ="30" ssid = "9">Weights are indicated inside angle brackets, e.g. &lt;0.1&gt;.</S>
			<S sid ="31" ssid = "10">Special characters can be literalized with a preceding backslash or inside double quotes, e.g. \* or &quot;*&quot; denotes a literal asterisk rather than the Kleene 7 https://javacc.dev.java.net plus.</S>
			<S sid ="32" ssid = "11">To improve the readability of expressions, spaces are not significant, unless they appear inside square brackets or are explicitly literalized inside double quotes or with a preceding backslash.</S>
			<S sid ="33" ssid = "12">In a language like Kleene where alphabetic symbols are literal, and the expression dog denotes three literal symbols, d, o and g, concatenated together, there must be a way to distinguish variable names from simple concatenations.</S>
			<S sid ="34" ssid = "13">The Kleene solution is to prefix variable names that are bound to FSM values with a dollar-sign sigil, e.g. $myvar.</S>
			<S sid ="35" ssid = "14">Once defined, a variable name can be used inside subsequent regular expressions, as in the following example, which models a fragment of Esperanto verb morphology.</S>
			<S sid ="36" ssid = "15">$vroot = don | dir | pens | ir ; // &quot;give&quot;, &quot;say&quot;, &quot;think&quot;, &quot;go&quot; $aspect = ad ; // optional repeated aspect $vend = as | is | os | us | u | i ; // pres, past, fut, cond, subj, inf $verbs = $vroot $aspect?</S>
			<S sid ="37" ssid = "16">$vend ; // use of predefined variables Similarly, names of functions that return FSMs are distinguished with the $ˆ sigil.</S>
			<S sid ="38" ssid = "17">To denote less common operations, rather than inventing and proliferating new and arguably cryptic regular expression operators, Kleene provides a set of predefined functions including $ˆreverse(regexp) $ˆinvert(regexp) $ˆinputProj(regexp) $ˆoutputProj(regexp ) $ˆcontains(regexp) $ˆignore(regexp, regexp) $ˆcopy(regexp) Users can also define their own functions, and function calls are regular expressions that can appear as operands inside larger regular expressions.</S>
			<S sid ="39" ssid = "18">3.2 Alternation-Rule.</S>
			<S sid ="40" ssid = "19">Syntax Kleene provides a variety of alternation-rule types, comparable to Xerox/PARC Replace Rules (Beesley and Karttunen, 2003, pp.</S>
			<S sid ="41" ssid = "20">130–82), but implemented using algorithms by Ma˚ns Hulde´n (Hulde´n, 2009a).</S>
			<S sid ="42" ssid = "21">$var = dog ; $var = d o g ; // equivalent to dog $var = ˜( a+ b* c?</S>
			<S sid ="43" ssid = "22">) ; $var = \˜ \+ \* \?</S>
			<S sid ="44" ssid = "23">; // literalized special characters $var = &quot;˜+*?&quot;; // literalized characters inside double quotes $var = &quot;dog&quot; ; // unnecessary literalization, equivalent to dog $myvar = (dog | cat | horse) s?</S>
			<S sid ="45" ssid = "24">; $yourvar = [A-Za-z] [A-Za-z09]* ; $hisvar = ([A-Za-z]-[aeiouAEIOU])+ ; $hervar = (bird|cow|elephant|pig) &amp; (pig|ant|bird) ; $ourvar = (dog):(chien) ◦ (chien):(Hund) ; $theirvar = [a-z]+ ( a &lt;0.91629&gt; | b &lt;0.1&gt; ) ; // weights in brackets Table 1: Kleene Regular-Expression Assignment Examples.</S>
			<S sid ="46" ssid = "25">input-expression -&gt; output-expression / left-context _ right-context Table 2: The Simplest Kleene Alternation-Rule Template.</S>
			<S sid ="47" ssid = "26">The simplest rules have the template shown in Table 2, and are interpreted into transducers that map the input to the output in the specified context.</S>
			<S sid ="48" ssid = "27">Such rules, which cannot be reviewed in detail here, are commonly used to model phonetic and orthographical alternations.</S>
			<S sid ="49" ssid = "28">3.3 Right-Linear Phrase Structure Grammars.</S>
			<S sid ="50" ssid = "29">While regular expressions are formally capable of describing any regular language or regular relation, some linguistic phenomena—especially productive morphological compounding and derivation—can be awkward to describe this way.</S>
			<S sid ="51" ssid = "30">Kleene therefore provides right-linear phrase-structure grammars that are similar in semantics, if not in syntax, to the Xerox/PARC lexc language (Beesley and Karttunen, 2003, pp.</S>
			<S sid ="52" ssid = "31">203–78).</S>
			<S sid ="53" ssid = "32">A Kleene phrase-structure grammar is defined as a set of productions, each assigned to a variable with a $&gt; sigil.</S>
			<S sid ="54" ssid = "33">Productions may include right-linear references to themselves or to other productions, which might not yet be defined.</S>
			<S sid ="55" ssid = "34">The productions are parsed immediately but are not evaluated until the entire photactics, including noun-root compounding.</S>
			<S sid ="56" ssid = "35">$&gt;Root = (kat | hund | elefant | dom) ( $&gt;Root | $&gt;AugDim ) ; $&gt;AugDim = ( eg | et )?</S>
			<S sid ="57" ssid = "36">$&gt;Noun ; $&gt;Noun = o $&gt;Plur ; $&gt;Plur = j?</S>
			<S sid ="58" ssid = "37">$&gt;Case ; $&gt;Case = n?</S>
			<S sid ="59" ssid = "38">; $net = $ˆstart($&gt;Root) ; The syntax on the right-hand side of productions is identical to the regular-expression syntax, but allowing right-linear references to productions of the form $&gt;Name.</S>
	</SECTION>
	<SECTION title="Kleene FSMs. " number = "4">
			<S sid ="60" ssid = "1">Each Kleene finite-state machine consists of a standard OpenFst FSM, under the default Tropical Semiring, wrapped with a Java object8 that stores the private alphabet9 of each machine.</S>
			<S sid ="61" ssid = "2">In Kleene, it is not necessary or possible to declare the characters being used; characters appearing in regular expressions, alternation rules and right- linear phrase-structure grammars are stored automatically as FSM arc labels using their Unicode grammar is built into an FSM via a call to the built-in 8 Each Java object of the class Fst contains a long integer.</S>
			<S sid ="62" ssid = "3">function $ˆstart(), which takes one production variable as its argument and treats it as the starting production of the whole grammar.</S>
			<S sid ="63" ssid = "4">The following example models a fragment of Esperanto noun mor field that stores a pointer to the OpenFst machine, which actually resides in OpenFst’s C++ memory space.</S>
			<S sid ="64" ssid = "5">9 The alphabet, sometimes known as the sigma, contains just.</S>
			<S sid ="65" ssid = "6">the symbols that appear explicitly in the labels of the FSM.</S>
			<S sid ="66" ssid = "7">code point value, and this includes Unicode supplementary characters.</S>
			<S sid ="67" ssid = "8">Programmer-defined multi- character symbols, represented in the syntax with surrounding single quotes, e.g. &apos;+Noun&apos; and &apos;+Verb&apos;, or, using another common convention, &apos;[Noun]&apos; and &apos;[Verb]&apos;, also need no declaration and are automatically stored using code point values taken from a Unicode Private Use Area.</S>
			<S sid ="68" ssid = "9">The dot (.)</S>
			<S sid ="69" ssid = "10">denotes any character, and it translates non-trivially into reserved arc labels that represent OTHER (i.e. unknown) characters.10</S>
	</SECTION>
	<SECTION title="Status. " number = "5">
			<S sid ="70" ssid = "1">5.1 Currently Working.</S>
			<S sid ="71" ssid = "2">As of the date of writing, Kleene is an advanced beta project offering the following: • Compilation of regular expressions, right- linear phrase-structure grammars, and several alternation-rule variations into FSMs.</S>
			<S sid ="72" ssid = "3">• Robust handling of Unicode, including supplementary characters, plus support for user- defined multi-character symbols.</S>
			<S sid ="73" ssid = "4">• Variables and maintenance of symbol tables in a frame-based environment.</S>
			<S sid ="74" ssid = "5">• Predefined and user-defined functions.</S>
			<S sid ="75" ssid = "6">• Handling of lists of FSMs, iteration over lists, and functions that handle and return lists.</S>
			<S sid ="76" ssid = "7">• A graphical user interface, including tools to draw FSMs and test them manually.</S>
			<S sid ="77" ssid = "8">• File I/O of FSMs in an XML format.</S>
			<S sid ="78" ssid = "9">• Interpretation of arithmetic expressions, arithmetic variables and functions, including boolean functions; and if-then statements and while loops that use boolean operators and functions.</S>
			<S sid ="79" ssid = "10">5.2 Future Work.</S>
			<S sid ="80" ssid = "11">The work remaining to be done includes: • Completion of the implementation of alternation-rule variations.</S>
			<S sid ="81" ssid = "12">• Writing of runtime code and APIs to apply FSMs to input and return output.</S>
			<S sid ="82" ssid = "13">• Conversion of FSMs into stand-alone executable code, initially in Java and C++.</S>
			<S sid ="83" ssid = "14">• Expansion to handle semirings other than the default Tropical Semiring of OpenFst.</S>
			<S sid ="84" ssid = "15">• Testing in nontrivial applications to determine memory usage and performance.</S>
	</SECTION>
	<SECTION title="History and Licensing. " number = "6">
			<S sid ="85" ssid = "1">Kleene was begun informally in late 2006, became part of a company project in 2008, and was under development until early 2011, when the project was canceled.</S>
			<S sid ="86" ssid = "2">On 4 May 2012, SAP AG released Kleene as free, open-source code under the Apache License, Version 2.0.11 The Kleene source code will be repackaged according to Apache standards and made available for download by August of 2012 at http://www.</S>
			<S sid ="87" ssid = "3">kleenelang.org.</S>
			<S sid ="88" ssid = "4">A user manual, currently over 100 pages, and an engineering manual will also be released.</S>
			<S sid ="89" ssid = "5">Precompiled versions will be provided for Linux, OS X and, if possible, Windows.</S>
	</SECTION>
	<SECTION title="Acknowledgments">
			<S sid ="90" ssid = "6">Sincere thanks are due to the OpenFst team and all who made that library available.</S>
			<S sid ="91" ssid = "7">A special personal thanks goes to Ma˚ns Hulde´n, who graciously released his algorithms for interpreting alternation rules and language-restriction expressions, and who went to great lengths to help me understand and re- implement them.</S>
			<S sid ="92" ssid = "8">I also acknowledge my SAP Labs colleagues Paola Nieddu and Phil Sours, who contributed to the design and implementation of Kleene, and my supervisor Michael Wiesner, who supported the open-source release.</S>
			<S sid ="93" ssid = "9">Finally, I thank Lauri Karttunen, who introduced me to finite-state linguistics and has always been a good friend and mentor.</S>
			<S sid ="94" ssid = "10">10 The treatment of FSM-specific alphabets and the handling.</S>
			<S sid ="95" ssid = "11">of OTHER characters is modeled on the Xerox/PARC implementation (Beesley and Karttunen, 2003, pp.</S>
			<S sid ="96" ssid = "12">56–60).</S>
			<S sid ="97" ssid = "13">11 http://www.apache.org/licenses/ LICENSE-2.0.html</S>
	</SECTION>
</PAPER>
