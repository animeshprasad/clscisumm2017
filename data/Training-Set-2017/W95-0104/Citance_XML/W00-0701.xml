<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">This article summarizes work on developing a learning theory account for the major learning and statistics based approaches used in natural language processing.</S>
		<S sid ="2" ssid = "2">It shows that these ap­ proaches can all be explained using a single dis­ tribution free inductive principle related to the pac model of learning.</S>
		<S sid ="3" ssid = "3">Furthermore, they all make predictions using the same simple knowl­ edge representation - a linear representation over a common feature space.</S>
		<S sid ="4" ssid = "4">This is signifi­ cant both to explaining the generalization and robustness properties of these methods and to understanding how these methods might be ex­ tended to learn from more structured, knowl­ edge intensive examples, as part of a learning centered approach to higher level natural lan­ guage inferences.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="5" ssid = "5">Many important natural language inferences can be viewed as problems of resolving phonetic, syntactic, semantics or pragmatics ambiguities, based on properties of the surrounding context.</S>
			<S sid ="6" ssid = "6">It is generally accepted that a learning compo­ nent must have a central role in resolving these context sensitive ambiguities, and a significant amount of work has been devoted in the last few years to developing learning methods for these tasks, with considerable success.</S>
			<S sid ="7" ssid = "7">Yet, our un­ derstanding of when and why learning works in this domain and how it can be used to support increasingly higher level tasks is still lacking.</S>
			<S sid ="8" ssid = "8">This article summarizes work on developing a learning theory account for the major learning approaches used in NL.</S>
			<S sid ="9" ssid = "9">While the major statistics based methods used in NLP are typically developed with a • This research is supported by NSF grants IIS9801638, SBR9873450 and IIS9984168.</S>
			<S sid ="10" ssid = "10">Bayesian view in mind, the Bayesian principle cannot directly explain the success and robust­ ness of these methods, since their probabilistic assumptions typically do not hold in the data.</S>
			<S sid ="11" ssid = "11">Instead, we provide this explanation using a sin­ gle, distribution free inductive principle related to the pac model of learning.</S>
			<S sid ="12" ssid = "12">We describe the unified learning framework and show that, in addition to explaining the success and robust­ ness of the statistics based methods, it also ap­ plies to other machine learning methods, such as rule based and memory based methods.</S>
			<S sid ="13" ssid = "13">An important component of the view devel­ oped is the observation that most methods use the same simple knowledge representation.</S>
			<S sid ="14" ssid = "14">This is a linear representation over a new feature space - a transformation of the original instance space to a higher dimensional and more expres­ sive space.</S>
			<S sid ="15" ssid = "15">Methods vary mostly algorithmicly, in ways they derive weights for features in this space.</S>
			<S sid ="16" ssid = "16">This is significant both to explaining the generalization properties of these methods and to developing an understanding for how and when can these methods be extended to learn from more structured, knowledge intensive ex­ amples, perhaps hierarchically.</S>
			<S sid ="17" ssid = "17">These issues are briefly discussed and we emphasize the impor­ tance of studying knowledge representation and inference in developing a learning centered ap­ proach to NL inferences.</S>
	</SECTION>
	<SECTION title="Learning Frameworks. " number = "2">
			<S sid ="18" ssid = "1">Generative probability models provide a princi­ pled way to the study of statistical classification in complex domains such as NL.</S>
			<S sid ="19" ssid = "2">It is common to assume a generative model for such data, es­ timate its parameters from training data and then use Bayes rule to obtain a classifier for this model.</S>
			<S sid ="20" ssid = "3">In the context of NL most clas­ sifiers are derived from probabilistic language models which estimate the probability of a sen­ tence s using Bayes rule, and then decompose this probability into a product of conditional probabilities according to the generative model.</S>
			<S sid ="21" ssid = "4">Pr(s) = Pr(w1,w2,···wn) = = IIf=1Pr(wilwi, ...</S>
			<S sid ="22" ssid = "5">Wi-d= IIf=1Pr(wilhi) where hi is the relevant history when predicting wi, and sis any sequence of tokens, words, part­ of-speech (pos) tags or other terms.</S>
			<S sid ="23" ssid = "6">This general scheme has been used to de­ rive classifiers for a variety of natural lan­ guage applications including speech applica­ tions (Rab89), pos tagging (Kup92; Sch95), word-sense ambiguation (GCY93) and context­ sensitive spelling correction (Gol95).</S>
			<S sid ="24" ssid = "7">While the use of Bayes rule is harmless, most of the work in statistical language modeling and ambiguity resolution is devoted to estimating terms of the form Pr(wlh).</S>
			<S sid ="25" ssid = "8">The generative models used to estimate these terms typically make Markov or other independence assumptions.</S>
			<S sid ="26" ssid = "9">It is evident from studying language data that these assump­ tions are often patently false and that there are significant global dependencies both within and across sentences.</S>
			<S sid ="27" ssid = "10">For example, when using (Hidden) Markov Model (HMM) as a generative model for pos tagging, estimating the probabil­ ity of a sequence of tags involves assuming that the pos tag ti of the word Wi is independent of other words in the sentence, given the preced­ ing tag ti-l· It is not surprising therefore that this results in a poor estimate of the probabil­ ity density function.</S>
			<S sid ="28" ssid = "11">However, classifiers built based on these false assumptions nevertheless seem to behave quite robustly in many cases.</S>
			<S sid ="29" ssid = "12">A different, distribution free inductive princi­ ple that is related to the pac model of learning is the basis for the account developed here.</S>
			<S sid ="30" ssid = "13">In an instance of the agnostic variant of pac learning (Val84; Hau92; KSS94), a learner is given data elements (x, l) that are sampled ac­ cording to some fixed but arbitrary distribu­ tion D on X x {0, 1}.</S>
			<S sid ="31" ssid = "14">X is the instance space and l E {0, 1} is the label1.</S>
			<S sid ="32" ssid = "15">D may simply re­ flect the distribution of the data as it occurs &quot;in nature&quot; (including contradictions) without assuming that the labels are generated accord­ ing to some &quot;rule&quot;.</S>
			<S sid ="33" ssid = "16">Given a sample, the goal of the learning algorithm is to eventually out­ put a hypothesis h from some hypothesis class 1-l that closely approximates the data.</S>
			<S sid ="34" ssid = "17">The 1The model can be extended to deal with any discrete or continuous range of the labels.</S>
			<S sid ="35" ssid = "18">true error of the hypothesis h is defined to be errorn(h) = Pr(x,l)ED[h(x) -::1 l], and the goal of the (agnostic) pac learner is to com­ pute, for any distribution D, with high prob­ ability (&gt; 18), a hypothesis h E 1i with true error no larger than f: + infhE1ierrorn(h).</S>
			<S sid ="36" ssid = "19">In practice, one cannot compute the true er­ ror errorn(h).</S>
			<S sid ="37" ssid = "20">Instead, the input tthe learn­ ing algorithm is a sample S = {(xt, F)} 1 of m labeled examples and the learner tries to find a hypothesis h with a small empirical er­ ror errors(h) = l{x E Slh(x) &quot;=I l}I/ISI, and hopes that it behaves well on future examples.</S>
			<S sid ="38" ssid = "21">The hope that a classifier learned from a train­ ing set will perform well on previously unseen examples is based on the basic inductive prin­ ciple underlying learning theory (Val84; Vap95) which, stated informally, guarantees that if the training and the test data are sampled from the same distribution, good performance on large enough training sample guarantees good per­ formance on the test data (i.e., good &quot;true&quot; er­ ror).</S>
			<S sid ="39" ssid = "22">Moreover, the quality of the generalization is inversely proportional to the expressivity of the class 1i.</S>
			<S sid ="40" ssid = "23">Equivalently, for a fixed sample size lSI, the quantified version of this princi­ ple (e.g.</S>
			<S sid ="41" ssid = "24">(Hau92)) indicates how much can one count on a hypothesis selected according to its performance on S. Finally, notice the underly­ ing assumption that the training and test data are sampled from the same distribution; this framework addresses this issue.</S>
			<S sid ="42" ssid = "25">(See (GR99).)</S>
			<S sid ="43" ssid = "26">In our discussion functions learned over the instance space X are not defined directly over the raw instances but rather over a transforma­ tion of it to a feature space.</S>
			<S sid ="44" ssid = "27">A feature is an in­ dicator function x : X{0, 1} which defines a subset of the instance space - all those elements in X which are mapped to 1 by X· X denotes a class of such functions and can be viewed as a transformation of the instance space; each ex­ ample (x 1, ...xn) EX is mapped to an example (Xl, ...</S>
			<S sid ="45" ssid = "28">XiXI) in the ew.</S>
			<S sid ="46" ssid = "29">space.</S>
			<S sid ="47" ssid = "30">Wsometimes view a feature as an md1cator functiOn over the labeled instance space X x {0, 1} and say that x(x, l) = 1 for examples x E x(X) with labell.</S>
	</SECTION>
	<SECTION title="Explaining Probabilistic Methods. " number = "3">
			<S sid ="48" ssid = "1">Using the abovementioned inductive principle we describe a learning theory account that ex­ plains the success and robustness of statistics based classifiers (Rot99a).</S>
			<S sid ="49" ssid = "2">A variety of meth ods used for learning in NL are shown to make their prediction using Linear Statistical Queries {LSQ) hypotheses.</S>
			<S sid ="50" ssid = "3">This is a family of linear predictors over a set of features which are di­ rectly related to the independence assumptions of the probabilistic model assumed.</S>
			<S sid ="51" ssid = "4">The success of these classification methods is then shown to be due to the combination of two factors: • Low expressive power of the derived classifier.</S>
			<S sid ="52" ssid = "5">Prs[x(x, l)] = l{(x, l) : x(x, l) = 11}/ISI.</S>
			<S sid ="53" ssid = "6">Chernoff bounds guarantee that the number of examples required to achieve tolerance T with probability at least 18 is polynomial in 1/T and log 1/8.</S>
			<S sid ="54" ssid = "7">(See (Kea93; Dec93; AD95)).</S>
			<S sid ="55" ssid = "8">Let X be a class of features and f : {0, 1} --+ a function that depends only on the values P[ ,l] for X E X. Given x E X, a Linear Statis­ tical Queries (LSQ) hypothesis predicts • Robustness properties shared by all linear sta­ tistical queries hypotheses.</S>
			<S sid ="56" ssid = "9">l = argmaxlE{0,1} LxEX f[x,lJ( AD {P[x,lJ} ).</S>
			<S sid ="57" ssid = "10">x(x).</S>
			<S sid ="58" ssid = "11">Since the hypotheses are computed over a fea­ ture space chosen so that they perform well on training data, learning theory implies that they perform well on previously unseen data, irre­ spective of whether the underlying probabilistic assumptions hold.</S>
			<S sid ="59" ssid = "12">3.1 Robust Learning.</S>
			<S sid ="60" ssid = "13">This section defines a learning algorithm and a class of hypotheses with some generaliza­ tion properties, that capture many probabilis­ tic learning methods used in NLP.</S>
			<S sid ="61" ssid = "14">The learn­ ing algorithm is a Statistical Queries{SQ) algo­ rithm (Kea93).</S>
			<S sid ="62" ssid = "15">An SQ algorithm can be viewed as a learning algorithm that interacts with its environment in a restricted way.</S>
			<S sid ="63" ssid = "16">Rather than viewing examples, the algorithm only requests the values of various statistics on the distribu­ tion of the examples to construct its hypothesis.</S>
			<S sid ="64" ssid = "17">(E.g. &quot;What is the probability that a randomly chosen example (x,l) has Xi= 0 and l = 1&quot;?)</S>
			<S sid ="65" ssid = "18">A statistical query has the form [x,l, T], where x E X is a feature, l E {0, 1} is a further (op­ tional) restriction imposed on the query and T is an error parameter.</S>
			<S sid ="66" ssid = "19">A call to the SQ oracle returns an estimate f&gt;[ ,l,r] of P[ ,l] = PrD{(x,i)lx(x) = 1 1\i = l} which satisfies lf&gt;x- Pxl &lt; T.</S>
			<S sid ="67" ssid = "20">(We usually omit T and/or l from this notation.)</S>
			<S sid ="68" ssid = "21">A statistical queries algorithm is a learning algorithm that constructs its hypothesis only using information received from an SQ oracle.</S>
			<S sid ="69" ssid = "22">An algorithm is said to use a query space X if it only makes queries of the form [x, l, T] where x E X. An SQ algorithm is said to be a good learning al­ gorithm if, with high probability, it outputs a hypothesis h with small error, using sample size that is polynomial in the relevant parameters.</S>
			<S sid ="70" ssid = "23">Given a query [x, l, T] the SQ oracle is sim­ ulated by drawing a large sample S of labeled examples (x, l) according to D and evaluating Clearly, the LSQ is a linear discriminator over the feature space X, with coefficients f that are computed given (potentially all) the values f&gt;[ ,l]&apos; The definition generalizes naturally to non-binary classifiers; in this case, the discrim­ inator between predicting l and other values is linear.</S>
			<S sid ="71" ssid = "24">A learning algorithm that outputs an LSQ hypothesis is called an LSQ algorithm.</S>
			<S sid ="72" ssid = "25">Example 3.1 The naive Bayes predictor (DH73) is derived using the assumption that given the label l E L the features&apos; values are statistically independent.</S>
			<S sid ="73" ssid = "26">Consequently, the Bayes optimal prediction is given by: h(x) = argmaxlELII 1Pr(xill)Pr(l), where Pr(l) denotes the prior probability of l {the fraction of examples labeled l) and Pr(xill) are the conditional feature probabilities {the fraction of the examples labeled l in which the ith feature has value Xi)· Therefore, we get: Claim: The naive Bayes algorithm is an LSQ algorithm over a set X which consists of n + 1 features: xo 1, Xi = Xi for i = 1, ...</S>
			<S sid ="74" ssid = "27">, n and where f[l,l]0 = logf&gt;[f,l] and f[x;,l]() = AD AD . logP[x;,l]/P[l,l]&apos; z = 1, ...</S>
			<S sid ="75" ssid = "28">,n. The observation that the LSQ hypothesis is linear over X yields the first generalization property of LSQ.</S>
			<S sid ="76" ssid = "29">VC theory implies that the VC dimension of the class of LSQ hypothe­ ses is bounded above by IX I· Moreover, if the LSQ hypothesis is sparse and does not make use of unobserved features in X (as in Ex.</S>
			<S sid ="77" ssid = "30">3.1) it is bounded by the number of features used (RotOO).</S>
			<S sid ="78" ssid = "31">Together with the basic general­ ization property described above this implies: Corollary 3.1 For LSQ, the number of train­ ing examples required in order to maintain a specific generalization performance guarantee scales linearly with the number of features used.</S>
			<S sid ="79" ssid = "32">The robustness property of LSQ can be cast for the case in which the hypothesis is learned using a training set sampled according to a dis­ tribution D, but tested over a sample from D&apos;.</S>
			<S sid ="80" ssid = "33">It still performs well as long as the distributional distance d(D, D&apos;) is controlled (Rot99a; RotOO).</S>
			<S sid ="81" ssid = "34">Theorem 3.2 Let A be an SQ( r, X) learning algorithm for a function class Q over the distri­ bution D and assume that d(D, D&apos;) &lt; 1 (for 1 inversely polynomial in r ).</S>
			<S sid ="82" ssid = "35">Then A is also an SQ( r, X) learning algorithm for g over D&apos;.</S>
			<S sid ="83" ssid = "36">Finally, we mention that the robustness of the algorithm to different distributions depends on the sample size and the richness of the feature class X plays an important role here.</S>
			<S sid ="84" ssid = "37">Therefore, for a given size sample, the use of simpler fea­ tures in the LSQ representation provides better robustness.</S>
			<S sid ="85" ssid = "38">This, in turn, can be traded off with the ability to express the learned function with an LSQ over a simpler set of features.</S>
			<S sid ="86" ssid = "39">3.2 Additional Examples.</S>
			<S sid ="87" ssid = "40">In addition to the naive Bayes (NB) classifier described above several other widely used prob­ abilistic classifiers can be cast as LSQ hypothe­ ses.</S>
			<S sid ="88" ssid = "41">This property is maintained even if the NB predictor is generalized in several ways, by al­ lowing hidden variables (GROO) or by assuming a more involved independence structure around the target variable.</S>
			<S sid ="89" ssid = "42">When the structure is mod­ eled using a general Bayesian network (since we care only about predicting a value for a single variable having observed the others) the Bayes optimal predictor is an LSQ hypothesis over fea­ tures that are polynomials x = Ilxi1Xi 2 •.• Xik of degree that depends on the number of neighbors of the target variable.</S>
			<S sid ="90" ssid = "43">A specific case of great interest to NLP is that of hidden Markov Mod­ els.</S>
			<S sid ="91" ssid = "44">In this case there are two types of variables, state variables Sand observed ones, 0 (Rab89).</S>
			<S sid ="92" ssid = "45">The task of predicting the value of a state vari­ able given values of the others can be cast as an LSQ, where X{S, 0, 1}x {S, 0, 1}, a suitably defined set of singletons and pairs of observables and state variables (Rot99a).</S>
			<S sid ="93" ssid = "46">Finally, Maximum Entropy (ME) models (Jay82; Rat97) are also LSQ models.</S>
			<S sid ="94" ssid = "47">In this framework, constrains correspond to features; the distribution (and the induced classifier) are defined in terms of the expected value of the fea­ tures over the training set.</S>
			<S sid ="95" ssid = "48">The induced clas sifier is a linear classifier whose weights are de­ rived from these expectations; the weights are computed iteratively (DR72) since no closed form solution is known for the optimal values.</S>
	</SECTION>
	<SECTION title="Learning Linear Classifiers. " number = "4">
			<S sid ="96" ssid = "1">It was shown in (Rot98) that several other learning approaches widely used in NL work also make their predictions by utilizing a lin­ ear representation.</S>
			<S sid ="97" ssid = "2">The SNoW learning archi­ tecture (Rot98; CCRR99; MPRZ99) is explic­ itly presented this way, but this holds also for methods that are presented in different ways, and some effort is required to cast them this way.</S>
			<S sid ="98" ssid = "3">These include Brill&apos;s transformation based method (Bri95)2 , decision lists (Yar94) and back-off estimation (Kat87; CB95).</S>
			<S sid ="99" ssid = "4">Moreover, even memory-based methods (ZD97; DBZ99) can be cast in a similar way (Rot99b).</S>
			<S sid ="100" ssid = "5">They can be reformulated as feature-based algorithms, with features of types that are commonly used by other features-based learning algorithms in NLP; the prediction com­ puted by MBL can be computed by a linear function over this set of features.</S>
			<S sid ="101" ssid = "6">Some other methods that have been recently used in language related applications, such as Boosting (CS99) and support vector machines are also making use of the same representation.</S>
			<S sid ="102" ssid = "7">At a conceptual level all learning methods are therefore quite similar.</S>
			<S sid ="103" ssid = "8">They transform the original input (e.g., sentence, sentence+pos in­ formation) to a new, high dimensional, feature space, whose coordinates are typically small conjunctions ( n-grams) over the original input.</S>
			<S sid ="104" ssid = "9">In this new space they search for a linear func­ tion that best separates the training data, and rely on the inductive principle mentioned to yield good behavior on future data.</S>
			<S sid ="105" ssid = "10">Viewed this way, methods are easy to compare and analyze for their suitability to NL applications and fu­ ture extensions, as we sketch below.</S>
			<S sid ="106" ssid = "11">The goal of blowing up the instance space to a high dimensional space is to increase the expres­ sivity of the classifier so that a linear function could represent the target concepts.</S>
			<S sid ="107" ssid = "12">Within this space, probabilistic methods are the most lim­ ited since they do not actually search in the 2 This holds only in cases in which the TBL condi­ tions do not depend on the labels, as in Context Sensi­ tive Spelling (MB97) and Prepositional Phrase Attach­ ment (BR94) and not in the general case.</S>
			<S sid ="108" ssid = "13">space of linear functions.</S>
			<S sid ="109" ssid = "14">Given the feature space they directly compute the classifier.</S>
			<S sid ="110" ssid = "15">In general, even when a simple linear function gen­ erates the training data, these methods are not guaranteed to be consistent with it (Rot99a).</S>
			<S sid ="111" ssid = "16">However, if the feature space is chosen so that they are, the robustness properties shown above become significant.</S>
			<S sid ="112" ssid = "17">Decision lists and MBL methods have advantages in their ability to rep­ resent exceptions and small areas in the feature space.</S>
			<S sid ="113" ssid = "18">MBL, by using long and very specialized conjunctions (DBZ99) and decision lists, due to their functional form - a linear function with exponentially decreasing weights - at the cost of predicting with a single feature, rather than a combination (Gol95).</S>
			<S sid ="114" ssid = "19">Learning methods that attempt to find the best linear function (relative to some loss function) are typically more flexi­ ble.</S>
			<S sid ="115" ssid = "20">Of these, we highlight here the SNoW ar­ chitecture, which has some specific advantages that favor NLP-like domains.</S>
			<S sid ="116" ssid = "21">SNoW determines the features&apos; weights using an online algorithm that attempts to minimize the number of mistakes on the training data us­ ing a multiplicative weight update rule (Lit88).</S>
			<S sid ="117" ssid = "22">The weight update rule is driven by the maxi­ mum entropy principle (KW95).</S>
			<S sid ="118" ssid = "23">The main im­ plication is that SNoW has significant advan­ tages in sparse spaces, those in which a few of the features are actually relevant to the tar­ get concept, as is typical in NLP.</S>
			<S sid ="119" ssid = "24">In domains with these characteristics, for a given number of training examples, SNoW generalizes better than additive update methods like perceptron and its close relative SVMs (Ros58; FS98) (and in general,it has better learning curves).</S>
			<S sid ="120" ssid = "25">Furthermore, although in SNoW the transfor­ mation to a large dimensional space needs to be done explicitly (rather than via kernel functions as is possible in perceptron and SVMs) its use of variable size examples nevertheless gives it com­ putational advantages, due to the sparse feature space in NLP applications.</S>
			<S sid ="121" ssid = "26">It is also significant for extensions to relational domain mentioned later.</S>
			<S sid ="122" ssid = "27">Finally, SNoW is a multi-class classifier.</S>
	</SECTION>
	<SECTION title="Future  Research Issues. " number = "5">
			<S sid ="123" ssid = "1">Research on learning in NLP needs to be inte­ grated with work on knowledge representation and inference to enable studying higher level NL tasks.</S>
			<S sid ="124" ssid = "2">We mention two important directions the implications on the learning issues.</S>
			<S sid ="125" ssid = "3">The unified view presented reveals that all methods blow up the dimensionality of the orig­ inal space in essentially the same way; they gen­ erate conjunctive features over the linear struc­ ture of the sentence (i.e., n-gram like features in the word and/or pos space).</S>
			<S sid ="126" ssid = "4">This does not seem to be expressive enough.</S>
			<S sid ="127" ssid = "5">Expressing complex concepts and relations necessary for higher level inferences will re­ quire more involved intermediate representa­ tions (&quot;features&quot;) over the input; higher order structural and semantic properties, long term dependencies and relational predicates need to be represented.</S>
			<S sid ="128" ssid = "6">Learning will stay manageable if done in terms of these intermediate represen­ tations as done today, using functionally simple representations (perhaps cascaded).</S>
			<S sid ="129" ssid = "7">Inductive logic programming (MDR94; Coh95) is a natural paradigm for this.</S>
			<S sid ="130" ssid = "8">How­ ever, computational limitations that include both learnability and subsumption render this approach inadequate for large scale knowledge intensive problems (KRV99; CROO).</S>
			<S sid ="131" ssid = "9">In (CROO) we suggest an approach that ad­ dresses the generation of complex and relational intermediate representations and supports effi­ cient learning on top of those.</S>
			<S sid ="132" ssid = "10">It allows the generation and use of structured examples which could encode relational information and long term functional dependencies.</S>
			<S sid ="133" ssid = "11">This is done us­ ing a construct that defines &quot;types&quot; of (poten­ tially, relational) features the learning process might use.</S>
			<S sid ="134" ssid = "12">These represent infinitely many fea­ tures, and are not generated explicitly; only those present in the data are generated, on the fly, as part of the learning process.</S>
			<S sid ="135" ssid = "13">Thus it yields hypotheses that are as expressive as re­ lational learners in a scalable fashion.</S>
			<S sid ="136" ssid = "14">This ap­ proach, however, makes some requirements on the learning process.</S>
			<S sid ="137" ssid = "15">Most importantly, the learning approach needs to be able to process variable size examples.</S>
			<S sid ="138" ssid = "16">And, it has to be feature efficient in that its complexity depends mostly on the number of relevant features.</S>
			<S sid ="139" ssid = "17">This seems to favor the SNoW approach over other algo­ rithms that learn the same representation.</S>
			<S sid ="140" ssid = "18">Eventually, we would like to perform infer­ ences that depend on the outcomes of several different classifiers; together these might need to coherently satisfy some constrains arising from the sequential nature of the data or task and do­ main specific issues.</S>
			<S sid ="141" ssid = "19">There is a need to study, along with learning and knowledge representa­ tion, inference methods that suit this frame­ work (KR97).</S>
			<S sid ="142" ssid = "20">Work in this direction requires a consistent semantics of the learners (Val99) and will have implications on the knowledge repre­ sentations and learning methods used.</S>
			<S sid ="143" ssid = "21">Prelim­ inary work in (PROO) suggests several ways to formalize this problem and is evaluated in the context of identifying phrase structure.</S>
	</SECTION>
</PAPER>
