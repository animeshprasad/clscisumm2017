<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">This paper addresses the problem of cor­ recting spelling errors that result in valid, though unintended words (such as peace and piece, or quiet and quite) and also the problem of correcting particular word usage errors (such as amount and num­ ber, or among and between).</S>
		<S sid ="2" ssid = "2">Such cor­ rections require contextual information and are not handled by conventional spelling programs such as Unix spell.</S>
		<S sid ="3" ssid = "3">First, we introduce a method called Trigrams that uses part-of-speech trigrams to encode the context.</S>
		<S sid ="4" ssid = "4">This method uses a small num­ ber of parameters compared to previous methods based on word trigrams.</S>
		<S sid ="5" ssid = "5">How­ ever, it is effectively unable to distinguish among words that have the same part of speech.</S>
		<S sid ="6" ssid = "6">For this case, an alternative feature-based method called Bayes per­ forms better; but Bayes is less effective than Trigrams when the distinction among words depends on syntactic constraints.</S>
		<S sid ="7" ssid = "7">A hybrid method called Tribayes is then in­ troduced that combines the best of the pre­ vious two methods.</S>
		<S sid ="8" ssid = "8">The improvement in performance of Tribayes over its compo­ nents is verified experimentally.</S>
		<S sid ="9" ssid = "9">Tribayes is also compared with the grammar checker in Microsoft Word, and is found to have sub­ stantially higher performance.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="10" ssid = "10">Spelling correction has become a very common tech­ nology and is often not perceived as a problem where progress can be made.</S>
			<S sid ="11" ssid = "11">However, conventional spelling checkers, such as Unix spell, are concerned only with spelling errors that result in words that cannot be found in a word list of a given language.</S>
			<S sid ="12" ssid = "12">One analysis has shown that up to 15% of spelling errors that result from elementary typographical er­ rors (character insertion, deletion, or transposition) yield another valid word in the language {Peterson, 1986).</S>
			<S sid ="13" ssid = "13">These errors remain undetected by tradi­ tional spelling checkers.</S>
			<S sid ="14" ssid = "14">In addition to typographical errors, words that can be easily confused with each other (for instance, the homophones peace and piece) also remain undetected.</S>
			<S sid ="15" ssid = "15">Recent studies of actual ob­ served spelling errors have estimated that overall, errors resulting in valid words account for anywhere from 25% to over 50% of the errors, depending on the application (Kukich, 1992).</S>
			<S sid ="16" ssid = "16">We will use the term context-sensitive spelling cor­ rection to refer to the task of fixing spelling errors that result in valid words, such as: (I) * Can I have a peace of cake?</S>
			<S sid ="17" ssid = "17">where peace was typed when piece was intended.</S>
			<S sid ="18" ssid = "18">The task will be cast as one of lexical disambigua­ tion: we are given a predefined collection of confu­ sion sets, such as {peace, piece}, {than, then}, etc., which circumscribe the space of spelling errors to look for.</S>
			<S sid ="19" ssid = "19">A confusion set means that each word in the set could mistakenly be typed when another word in the set was intended.</S>
			<S sid ="20" ssid = "20">The task is to predict, given an occurrence of a word in one of the confusion sets, which word in the set was actually intended.</S>
			<S sid ="21" ssid = "21">Previous work on context-sensitive spelling cor­ rection and related lexical disambiguation tasks has its limitations.</S>
			<S sid ="22" ssid = "22">Word-trigram methods (Mays, Dam­ erau, and Mercer, 1991) require an extremely large body of text to train the word-trigram model; even with extensive training sets, the problem of sparse data is often acute.</S>
			<S sid ="23" ssid = "23">In addition, huge word-trigram tables need to be available at run time.</S>
			<S sid ="24" ssid = "24">More­ over, word trigrams are ineffective at capturing long­ distance properties such as discourse topic and tense.</S>
			<S sid ="25" ssid = "25">Feature-based approaches, such as Bayesian clas­ sifiers (Gale, Church, and Yarowsky, 1993), deci­ sion lists (Yarowsky, 1994), and Bayesian hybrids (Golding, 1995), have had varying degrees of suc­ cess for the problem of context-sensitive spelling correction.</S>
			<S sid ="26" ssid = "26">However, we report experiments that show that these methods are of limited effective­ ness for cases such as {their, there, they&apos;re} and {than, then}, where the predominant distinction to be made among the words is syntactic.</S>
			<S sid ="27" ssid = "27">Confusion set Train Test Most freq.</S>
			<S sid ="28" ssid = "28">Base their, there, they&apos;re 3265 850 than, then 2096 514 its, it&apos;s 1364 366 your, you&apos;re 750 187 begin, being 559 146 passed, past 307 74 quiet, quite 264 66 weather, whether 239 61 accept, except 173 50 lead, led 173 49 cite, sight, site 115 34 principal, principle 147 34 raise, rise 98 39 affect, effect 178 49 peace, piece 203 50 country, county 268 62 amount, number 460 123 among, between 764 186 their 56.8 than 63.4 its 91.3 your 89.3 being 93.2 past 68.9 quite 83.3 whether 86.9 except 70.0 led 46.9 sight 64.7 principle 58.8 nse 64.1 effect 91.8 peace 44.0 country 91.9 number 71.5 between 71.5 Table 1: Performance of the baseline method for 18 confusion sets.</S>
			<S sid ="29" ssid = "29">&quot;Train&quot; and &quot;Test&quot; give the number of occurrences of any word in the confusion set in the training and test corpora.</S>
			<S sid ="30" ssid = "30">&quot;Most freq.&quot; is the word in the confusion set that occurred most often in the training corpus.</S>
			<S sid ="31" ssid = "31">&quot;Base&quot; is the percentage of correct predictions of the baseline system on the test corpus.</S>
			<S sid ="32" ssid = "32">In this paper, we first introduce a method called Trigrams that uses part-of-speech trigrams to en­ code the context.</S>
			<S sid ="33" ssid = "33">This method greatly reduces the number of parameters compared to known methods, which are based on word trigrams.</S>
			<S sid ="34" ssid = "34">This method also has the advantage that training can be done once and for all, and quite manageably, for all con­ fusion sets; new confusion sets can be added later without any additional training.</S>
			<S sid ="35" ssid = "35">This feature makes Trigrams a very easily expandable system.</S>
			<S sid ="36" ssid = "36">Empirical evaluation of the trigram method demonstrates that it performs well when the words to be discriminated have different parts of speech, but poorly when they have the same part of speech.</S>
			<S sid ="37" ssid = "37">In the latter case, it is reduced to simply guessing whichever word in the confusion set is the most com­ mon representative of its part-of-speech class.</S>
			<S sid ="38" ssid = "38">We consider an alternative method, Bayes, a Bayesian hybrid method (Golding, 1995), for the case where the words have the same part of speech.</S>
			<S sid ="39" ssid = "39">We confirm experimentally that Bayes and Trigrams have complementary performance, Trigrams being better when the words in the confusion set have dif­ ferent parts of speech, and Bayes being better when they have the same part of speech.</S>
			<S sid ="40" ssid = "40">We introduce a hybrid method, Tribayes, that exploits this com­ plementarity by invoking each method when it is strongest.</S>
			<S sid ="41" ssid = "41">Tribayes achieves the best accuracy of the methods under consideration in all situations.</S>
			<S sid ="42" ssid = "42">To evaluate the performance of Tribayes with re­ spect to an external standard, we compare it to the grammar checker in Microsoft Word.</S>
			<S sid ="43" ssid = "43">Tribayes is found to have substantially higher performance.</S>
			<S sid ="44" ssid = "44">This paper is organized as follows: first we present the methodology used in the experiments.</S>
			<S sid ="45" ssid = "45">We then discuss the methods mentioned above, interleaved with experimental results.</S>
			<S sid ="46" ssid = "46">The comparison with Mi­ crosoft Word is then presented.</S>
			<S sid ="47" ssid = "47">The final section concludes.</S>
	</SECTION>
	<SECTION title="Methodology. " number = "2">
			<S sid ="48" ssid = "1">Each method will be described in terms of its op­ eration on a single confusion set C = {w1.</S>
			<S sid ="49" ssid = "2">,Wn}; that is, we will say how the method disambiguates occurrences of words w 1 through Wn.</S>
			<S sid ="50" ssid = "3">The methods handle multiple confusion sets by applying the same technique to each confusion set independently.</S>
			<S sid ="51" ssid = "4">Each method involves a training phase and a test phase.</S>
			<S sid ="52" ssid = "5">We trained each method on 80% (randomly selected) of the Brown corpus (Kucera and Francis, 1967) and tested it on the remain­ ing 20%.</S>
			<S sid ="53" ssid = "6">All methods were run on a collection of 18 confusion sets, which were largely taken from the list of &quot;Words Commonly Confused&quot; in the back of Random House (Flexner, 1983).</S>
			<S sid ="54" ssid = "7">The con­ fusion sets were selected on the basis of being frequently-occurring in Brown, and representing a variety of types of errors, including homophone con­ fusions (e.g., {peace, piece}) and grammatical mis­ takes (e.g., {among, between}).</S>
			<S sid ="55" ssid = "8">A few confusion sets not in Random House were added, representing ty­ pographical errors (e.g., {begin, being}).</S>
			<S sid ="56" ssid = "9">The confu­ sion sets appear in Table 1.</S>
	</SECTION>
	<SECTION title="Baseline. " number = "3">
			<S sid ="57" ssid = "1">As an indicator of the difficulty of the task, we com­ pared each of the methods to the method which ig­ nores the context in which the word occurred, and just guesses based on the priors.</S>
			<S sid ="58" ssid = "2">Table 1 shows the performance of the baseline method for the 18 confusion sets.</S>
	</SECTION>
	<SECTION title="Trigrams. " number = "4">
			<S sid ="59" ssid = "1">Mays, Damerau, and Mercer (1991) proposed a word-trigram method for context-sensitive spelling correction based on the noisy channel model.</S>
			<S sid ="60" ssid = "2">Since this method is based on word trigrams, it requires an enormous training corpus to fit all of these parame­ ters accurately; in addition, at run time it requires extensive system resources to store and manipulate the resulting huge word-trigram table.</S>
			<S sid ="61" ssid = "3">In contrast, the method proposed here uses part­ of-speech trigrams.</S>
			<S sid ="62" ssid = "4">Given a target occurrence of a word to correct, it substitutes in turn each word in the confusion set into the sentence.</S>
			<S sid ="63" ssid = "5">For each substi­ tution, it calculates the probability of the resulting sentence.</S>
			<S sid ="64" ssid = "6">It selects as its answer the word that gives the highest probability.</S>
			<S sid ="65" ssid = "7">More precisely, assume that the word occurs in a sentence W = w1 ...w,.</S>
			<S sid ="66" ssid = "8">...Wn, and that wis a word we are considering substituting for it, yielding sentence W&apos;.</S>
			<S sid ="67" ssid = "9">Word wis then preferred over Wk iff P(W&apos;) &gt; P(W), where P(W) and P(W&apos;) are the probabilities of sentences W and W&apos; respectively.</S>
			<S sid ="68" ssid = "10">1 We calculate P(W) using the tag sequence of Was an intermediate quantity, and summing, over all pos­ sible tag sequences, the probability of the sentence with that tagging; that is: P(W) = LP(W, T) T where Tis a tag sequence for sentence W. The above probabilities are estimated as is tra­ ditionally done in trigram-based part-of-speech tag­ ging (Church, 1988; DeRose, 1988): P(W,T) P(WIT)P(T) (1) IT P(w;lt;) IT P(t;lt;_ 2 t;_!)</S>
			<S sid ="69" ssid = "11">(2) would be assigned to each word in the confusion set when substituted into the target sentence.</S>
			<S sid ="70" ssid = "12">Table 2 gives the results of the trigram method (as well as the Bayesian method of the next section) for the 18 confusion sets.2 The results are broken down into two cases: &quot;Different tags&quot; and &quot;Same tags&quot;.</S>
			<S sid ="71" ssid = "13">A target occurrence is put in the latter iff all words in the confusion set would have the same tag when substituted into the target sentence.</S>
			<S sid ="72" ssid = "14">In the &quot;Different tags&quot; condition, Trigrams generally does well, outscoring Bayes for all but 3 confusion sets - and in each of these cases, making no more than 3 errors more than Bayes.</S>
			<S sid ="73" ssid = "15">In the &quot;Same tags&quot; condition, however, Trigrams performs only as well as Baseline.</S>
			<S sid ="74" ssid = "16">This follows from Equations 1 and 2: when comparing P(W) and P(W&apos;), the dominant term corresponds to the most likely tagging; and in this term, if the target word Wf&lt; and its substitute whave the same tag t, then the comparison amounts to comparing P(w,.lt) and P(w lt).</S>
			<S sid ="75" ssid = "17">In other words, the decision reduces to which of the two words, and is the more common representative of part-of-speech class t.3</S>
	</SECTION>
	<SECTION title="Bayes. " number = "5">
			<S sid ="76" ssid = "1">The previous section showed that the part-of-speech trigram method works well when the words in the confusion set have different parts of speech, but es­ sentially cannot distinguish among the words if they have the same part of speech.</S>
			<S sid ="77" ssid = "2">In this case, a more effective approach is to learn features that char­ acterize the different contexts in which each word tends to occur.</S>
			<S sid ="78" ssid = "3">A number of feature-based methods have been proposed, including Bayesian classifiers (Gale, Church, and Yarowsky, 1993), decision lists (Yarowsky, 1994), Bayesian hybrids (Golding, 1995), and, more recently, a method based on the Winnow multiplicative weight-updating algorithm (Golding and Roth, 1996).</S>
			<S sid ="79" ssid = "4">We adopt the Bayesian hybrid method, which we will call Bayes, having experi­ mented with each of the methods and found Bayes to be among the best-performing for the task at hand.</S>
			<S sid ="80" ssid = "5">This method has been described elsewhere (Golding, 1995) and so will only be briefly reviewed here; how­ ever, the version used here uses an improved smooth­ ing technique, which is mentioned briefly below.</S>
			<S sid ="81" ssid = "6">where T = t1 ..</S>
			<S sid ="82" ssid = "7">.tn, and P(t;lt;-2t;_I) is the proba­ bility of seeing a part-of-speech tag t; given the two preceding part-of-speech tags t;_ 2 and ti-l· Equa­ tions 1 and 2 will also be used to tag sentences W and W&apos; with their most likely part-of-speech se­ quences.</S>
			<S sid ="83" ssid = "8">This will allow us to determine the tag that 1To enable fair comparisons between sequences of dif­ ferent length (as when considering maybe and may be), we actually compare the per-word geometric mean of the sentence probabilities.</S>
			<S sid ="84" ssid = "9">Otherwise, the shorter sequence will usually be preferred, as shorter sequences tend to have higher probabilities than longer ones.</S>
			<S sid ="85" ssid = "10">2 In the experiments reported here, the trigram.</S>
			<S sid ="86" ssid = "11">method was run using the tag inventory derived from the Brown corpus, except that a handful of common func­ tion words were tagged as themselves, namely: except, than, then, to, too, and whether.</S>
			<S sid ="87" ssid = "12">3 ln a few cases, however, Trigrams does not get ex­ actly the same score as Baseline.</S>
			<S sid ="88" ssid = "13">This can happen when the words in the confusion set have more than one tag in common; e.g., for {affect, effect}, the words can both be nouns or verbs.</S>
			<S sid ="89" ssid = "14">Trigrams may then choose differ­ ently when the words are tagged as nouns versus verbs, whereas Baseline makes the same choice in all cases.</S>
			<S sid ="90" ssid = "15">Co nf usi on set D i f f e r e n t t a g s S a m e t a g s B r e a k - d o w n S y s t e m s c o r e s B a s e T B B r e a k - d o w n S y s t e m s c o r e s B a s e T B th eir , th er e, th ey &apos;re t h a n , t h e n i t s , i t &apos; s y o u r , y o u &apos; r e b e g i n , b e i n g p a s s e d , p a s t q u i e t , q u i t e w e a t h e r , w h e t h e r a c c e p t , e x c e p t l e a d , l e d cit e,· sig ht, sit e p ri n c i p a l, p ri n c i p l e r a i s e , ri s e aff ect , eff ect p e a c e , p i e c e c o u n t r y , c o u n t y a m o u n t , n u m b e r a m o n g , b e t w e e n 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2 9 8 6 2 0 0 0 5 6 . 8 97.6 94.4 6 3 . 4 94.9 93.2 9 1 . 3 98.1 95.9 8 9 . 3 98.9 89.8 9 3 . 2 97.3 91.8 6 8 . 9 95.9 89.2 8 3 . 3 95.5 89.4 8 6 . 9 93.4 96.7 7 0 . 0 82.0 88.0 4 6 . 9 83.7 79.6 6 4 . 7 70.6 73.5 0 . 0 1 0 0 . 0 7 0 . 0 1 0 0 . 0 100.0 100.0 1 0 0 . 0 100.0 66.7 0 . 0 1 0 0 . 0 1 0 0 . 0 0 0 0 0 0 0 0 0 0 0 0 7 1 9 2 9 4 9 8 1 0 0 1 0 0 1 0 0 8 3 . 3 83.3 91.7 6 1 . 1 61.1 72.2 9 1 . 3 93.5 97.8 4 4 . 9 42.9 89.8 9 1 . 9 91.9 85.5 7 1 . 5 73.2 82.9 7 1 . 5 71.5 75.3 Table 2: Performance of the component methods, Baseline (Base), Trigrams (T), and Bayes (B).</S>
			<S sid ="91" ssid = "16">System scores are given as percentages of correct predictions.</S>
			<S sid ="92" ssid = "17">The results are broken down by whether or not all words in the confusion set would have the same tagging when substituted into the target sentence.</S>
			<S sid ="93" ssid = "18">The &quot;Breakdown&quot; columns show the percentage of examples that fall under each condition.</S>
			<S sid ="94" ssid = "19">Bayes uses two types of features: context words and collocations.</S>
			<S sid ="95" ssid = "20">Context-word features test for the presence of a particular word within ±k words of the target word; collocations test for a pattern of up to f contiguous words and/or part-of-speech tags around the target word.</S>
			<S sid ="96" ssid = "21">Examples for the confusion set {dairy, diary} include: (2) milk within ±10 words {3) in POSSDET _ where (2) is a context-word feature that tends to im­ ply dairy, while (3) is a collocation implying diary.</S>
			<S sid ="97" ssid = "22">Feature (3) includes the tag POSSDET for possessive determiners (his, her, etc.), and matches, for exam­ ple, the sequence in his4 in: (4) He made an entry in his diary.</S>
			<S sid ="98" ssid = "23">expressing a pattern of up to f contiguous elements.</S>
			<S sid ="99" ssid = "24">After working through the whole training corpus, Bayes collects and returns the set of features pro­ posed.</S>
			<S sid ="100" ssid = "25">Pruning criteria may be applied at this point to eliminate features that are based on insufficient data, or that are ineffective at discriminating among the words in the confusion set.</S>
			<S sid ="101" ssid = "26">At run time, Bayes uses the features learned dur­ ing training to correct the spelling of target words.</S>
			<S sid ="102" ssid = "27">Let :F be the set of features that match a particu­ lar target occurrence.</S>
			<S sid ="103" ssid = "28">Suppose for a moment that we were applying a naive Bayesian approach.</S>
			<S sid ="104" ssid = "29">We would then calculate the probability that each word w; in the confusion set is the correct identity of the target word, given that we have observed features :F, using Bayes&apos; rule with the independence assumption: Bayes learns these features from a training corpus of correct text.</S>
			<S sid ="105" ssid = "30">Each time a word in the confusion set occurs in the corpus, Bayes proposes every fea­ P(w;i:F) = (IT !E:F P(flw;)) ;j ture that matches the context -one context-word feature for every distinct word within ±k words of the target word, and one collocation for every way of 4 A tag is taken to match a word in the sentence iff the tag is a member of the word&apos;s set of possible part-of­ speech tags.</S>
			<S sid ="106" ssid = "31">Tag sets are used, rather than actual tags, because it is in general impossible to tag the sentence uniquely at spelling-correction time, as the identity of the target word has not yet been established.</S>
			<S sid ="107" ssid = "32">where each probability on the right-hand side is cal­ culated by a maximum-likelihood estimate (MLE) over the training set.</S>
			<S sid ="108" ssid = "33">We would then pick as our an­ swer the w; with the highest P(w;I:F).</S>
			<S sid ="109" ssid = "34">The method presented here differs from the naive approach in two respects: first, it does not assume independence among features, but rather has heuristics for de­ tecting strong dependencies, and resolving them by deleting features until it is left with a reduced set :F&apos; of (relatively) independent features, which are then used in place of :F in the formula above.</S>
			<S sid ="110" ssid = "35">Second, to estimate the P(flwi) terms, rather than using a simple MLE, it performs smoothing by interpolat­ ing between the MLE of P(flwi) and the MLE of the unigram probability, P(f).</S>
			<S sid ="111" ssid = "36">These enhancements greatly improve the performance of Bayes over the naive Bayesian approach.</S>
			<S sid ="112" ssid = "37">The results of Bayes are shown in Table 2.5 Gener­ ally speaking, Bayes does worse than Trigrams when the words in the confusion set have different parts of speech.</S>
			<S sid ="113" ssid = "38">The reason is that, in such cases, the pre­ dominant distinction to be made among the words is syntactic; and the trigram method, which brings to bear part-of-speech knowledge for the whole sen­ tence, is better equipped to make this distinction than Bayes, which only tests up to two syntactic el­ ements in its collocations.</S>
			<S sid ="114" ssid = "39">Moreover, Bayes&apos; use of context-word features is arguably misguided here, as context words pick up differences in topic and tense, which are irrelevant here, and in fact tend to degrade performance by detecting spurious differences.</S>
			<S sid ="115" ssid = "40">In a few cases, such as {begin, being}, this effect is enough to drive Bayes slightly below Baseline.</S>
			<S sid ="116" ssid = "41">6 For the condition where the words have the same part of speech, Table 2 shows that Bayes almost al­ ways does better than Trigrams.</S>
			<S sid ="117" ssid = "42">This is because, as discussed above, Trigrams is essentially acting like Baseline in this condition.</S>
			<S sid ="118" ssid = "43">Bayes, on the other hand, learns features that allow it to discriminate among the particular words at issue, regardless of their part of speech.</S>
			<S sid ="119" ssid = "44">The one exception is {country, county}, for which Bayes scores somewhat below Baseline.</S>
			<S sid ="120" ssid = "45">This is another case in which context words actu­ ally hurt Bayes, as running it without context words again improved its performance to the Baseline level.</S>
	</SECTION>
	<SECTION title="Tribayes. " number = "6">
			<S sid ="121" ssid = "1">The previous sections demonstrated the complemen­ tarity between Trigrams and Bayes: Trigrams works best when the words in the confusion set do not all have the same part of speech, while Bayes works best when they do.</S>
			<S sid ="122" ssid = "2">This complementarity leads directly to a hybrid method, Tribayes, that gets the best of each.</S>
			<S sid ="123" ssid = "3">It applies Trigrams first; in the process, it as­ certains whether all the words in the confusion set would have the same tag when substituted into the 5For the experiments reported here, Bayes was con­ figured as follows: k (the half-width of the window of context words) was set to 10; f.</S>
			<S sid ="124" ssid = "4">(the maximum length of a collocation) was set to 2; feature strength was measured using the reliability metric; pruning of collocations at training time was enabled; and pruning of context words was minimal - context words were pruned only if they had fewer than 2 occurrences or non-occurrences.</S>
			<S sid ="125" ssid = "5">6 We confirmed this by running Bayes without context words (i.e., with collocations only).</S>
			<S sid ="126" ssid = "6">Its performance was then always at or above Baseline.</S>
			<S sid ="127" ssid = "7">target sentence.</S>
			<S sid ="128" ssid = "8">If they do not, it accepts the answer provided by Trigrams; if they do, it applies Bayes.</S>
			<S sid ="129" ssid = "9">Two points about the application of Bayes in the hybrid method: first, Bayes is now being asked to distinguish among words only when they have the same part of speech.</S>
			<S sid ="130" ssid = "10">It should be trained accord­ ingly - that is, only on examples where the words have the same part of speech.</S>
			<S sid ="131" ssid = "11">The Bayes component of the hybrid will therefore be trained on a subset of the examples that would be used for training the stand-alone version of Bayes.</S>
			<S sid ="132" ssid = "12">The second point about Bayes is that, like Tri­ grams, it sometimes makes uninformed decisions­ decisions based only on the priors.</S>
			<S sid ="133" ssid = "13">For Bayes, this happens when none of its features matches the target occurrence.</S>
			<S sid ="134" ssid = "14">Since, for now, we do not have a good &quot;third-string&quot; algorithm to call when both Trigrams and Bayes fall by the wayside, we content ourselves with the guess made by Bayes in such situations.</S>
			<S sid ="135" ssid = "15">Table 3 shows the performance of Tribayes com­ pared to its components.</S>
			<S sid ="136" ssid = "16">In the &quot;Different tags&quot; con­ dition, Tribayes invokes Trigrams, and thus scores identically.</S>
			<S sid ="137" ssid = "17">In the &quot;Same tags&quot; condition, Tribayes invokes Bayes.</S>
			<S sid ="138" ssid = "18">It does not necessarily score the same, however, because, as mentioned above, it is trained on a subset of the examples that stand-alone Bayes is trained on.</S>
			<S sid ="139" ssid = "19">This can lead to higher or lower performance - higher because the training exam­ ples are more homogeneous (representing only cases where the words have the same part of speech); lower because there may not be enough training examples to learn from.</S>
			<S sid ="140" ssid = "20">Both effects show up in Table 3.</S>
			<S sid ="141" ssid = "21">Table 4 summarizes the overall performance of all methods discussed.</S>
			<S sid ="142" ssid = "22">It can be seen that Trigrams and Bayes each have their strong points.</S>
			<S sid ="143" ssid = "23">Tribayes, however, achieves the maximum of their scores, by and large, the exceptions being due to cases where one method or the other had an unexpectedly low score (discussed in Sections 4 and 5).</S>
			<S sid ="144" ssid = "24">The confusion set {raise, rise} demonstrates (albeit modestly) the ability of the hybrid to outscore both of its compo­ nents, by putting together the performance of the better component for both conditions.</S>
	</SECTION>
	<SECTION title="Comparison with  Microsoft  Word. " number = "7">
			<S sid ="145" ssid = "1">The previous section evaluated the performance of Tribayes with respect to its components, and showed that it got the best of both.</S>
			<S sid ="146" ssid = "2">In this section, we calibrate this overall performance by compar­ ing Tribayes with Microsoft Word (version 7.0), a widely used word-processing system whose grammar checker represents the state of the art in commercial context-sensitive spelling correction.</S>
			<S sid ="147" ssid = "3">Unfortunately we cannot evaluate Word using &quot;prediction accuracy&quot; (as we did above), as we do not always have access to the system&apos;s predictions­ sometimes it suppresses its predictions in an effort to filter out the bad ones.</S>
			<S sid ="148" ssid = "4">Instead, in this section Co nf usi on set D if f e r e n t t a g s S a m e t a g s B r e a k - d o w n S y st e m s c o r e s T T B B r e a k - d o w n Sy st e m sc or es B T B th eir , th er e, th ey &apos;re th an, th en its, it&apos; s y o u r , y o u &apos; r e b e g i n , b e i n g p a s s e d , p a s t q u i e t , q u i t e w e a t h e r , w h e t h e r a c c e p t , e x c e p t l e a d , l e d c it e , s i g h t, s i t e p r i n c i p a l, p r i n c i p l e r a i s e , r i s e a f f e c t , e f f e c t p e a c e , p i e c e c o u n t r y , c o u n t y a m o u n t , n u m b e r a m o n g , b e t w e e n 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2 9 8 6 2 0 0 0 9 7 . 6 9 7 . 6 9 4 . 9 9 4 . 9 9 8 . 1 98.1 9 8 . 9 9 8 . 9 9 7 . 3 97.3 9 5 . 9 9 5 . 9 9 5 . 5 95.5 9 3 . 4 93.4 8 2 . 0 8 2 . 0 8 3 . 7 83.7 7 0 . 6 7 0 . 6 10 0.</S>
			<S sid ="149" ssid = "5">0 100.0 1 0 0 . 0 100.0 10 0.</S>
			<S sid ="150" ssid = "6">0 100.0 10 0.</S>
			<S sid ="151" ssid = "7">0 100.0 0 0 0 0 0 0 0 0 0 0 0 7 1 9 2 9 4 9 8 1 0 0 1 0 0 1 0 0 9 1 . 7 83.3 7 2 . 2 75.0 9 7 . 8 95.7 8 9 . 8 89.8 8 5 . 5 85.5 8 2 . 9 82.9 7 5 . 3 75.3 Table 3: Performance of the hybrid method, Tribayes (TB), as compared with Trigrams (T) and Bayes (B).</S>
			<S sid ="152" ssid = "8">System scores are given as percentages of correct predictions.</S>
			<S sid ="153" ssid = "9">The results are broken down by whether or not all words in the confusion set would have the same tagging when substituted into the target sentence.</S>
			<S sid ="154" ssid = "10">The &quot;Breakdown&quot; columns give the percentage of examples under each condition.</S>
			<S sid ="155" ssid = "11">Co nf usi on set S y s t e m s c o r e s B a s e T B TB th ei r, th er e, th e y&apos; re th a n, th e n its, it&apos; s y o u r , y o u &apos; r e b e g i n , b e i n g p a s s e d , p a s t q u i e t , q u i t e w e a t h e r , w h e t h e r a c c e p t , e x c e p t l e a d , l e d cit e, sig ht, sit e p r i n c i p a l, p r i n c i p l e r a i s e , r i s e aff ect , eff ect p e a c e , p i e c e c o u n t r y , c o u n t y a m o u n t , n u m b e r a m on g, be tw ee n 5 6 . 8 97.6 94.4 97.6 6 3 . 4 94.9 93.2 94.9 9 1 . 3 98.1 95.9 98.1 8 9 . 3 98.9 89.8 98.9 9 3 . 2 97.3 91.8 97.3 6 8 . 9 95.9 89.2 95.9 8 3 . 3 95.5 89.4 95.5 8 6 . 9 93.4 96.7 93.4 7 0 . 0 82.0 88.0 82.0 4 6 . 9 83.7 79.6 83.7 6 4 . 7 70.6 73.5 70.6 5 8 . 8 88.2 85.3 88.2 6 4 . 1 64.1 74.4 76.9 9 1 . 8 93.9 95.9 95.9 4 4 . 0 44.0 90.0 90.0 9 1 . 9 91.9 85.5 85.5 7 1 . 5 73.2 82.9 82.9 7 1 . 5 71.5 75.3 75.3 Table 4: Overall performance of all methods: Baseline (Base), Trigrams (T), Bayes (B), and Tribayes (TB).</S>
			<S sid ="156" ssid = "12">System scores are given as percentages of correct predictions.</S>
			<S sid ="157" ssid = "13">we will use two parameters to evaluate system per­ formance: system accuracy when tested on correct usages of words, and system accuracy on incorrect usages.</S>
			<S sid ="158" ssid = "14">Together, these two parameters give a com­ plete picture of system performance: the score on correct usages measures the system&apos;s rate of false negative errors (changing a right word to a wrong one), while the score on incorrect usages measures false positives (failing to change a wrong word to a right one).</S>
			<S sid ="159" ssid = "15">We will not attempt to combine these two parameters into a single measure of system &quot;good­ ness&quot;, as the appropriate combination varies for dif­ ferent users, depending on the user&apos;s typing accuracy and tolerance of false negatives and positives.</S>
			<S sid ="160" ssid = "16">The test sets for the correct condition are the same ones used earlier, based on 20% of the Brown corpus.</S>
			<S sid ="161" ssid = "17">The test sets for the incorrect condition were gener­ ated by corrupting the correct test sets; in particu­ lar, each correct occurrence of a word in the confu­ sion set was replaced, in turn, with each other word in the confusion set, yielding n- 1 incorrect occur­ rences for each correct occurrence (where n is the size of the confusion set).</S>
			<S sid ="162" ssid = "18">We will also refer to the incorrect condition as the corrupted condition.</S>
			<S sid ="163" ssid = "19">To run Microsoft Word on a particular test set, we started by disabling error checking for all error types except those needed for the confusion set at issue.</S>
			<S sid ="164" ssid = "20">This was done to avoid confounding effects.</S>
			<S sid ="165" ssid = "21">For {their, there, they&apos;re}, for instance, we enabled &quot;word usage&quot; errors (which include substitutions of their for there, etc.), but we disabled &quot;contractions&quot; (which include replacing they&apos;re with they are).</S>
			<S sid ="166" ssid = "22">We then invoked the grammar checker, accepting every suggestion offered.</S>
			<S sid ="167" ssid = "23">Sometimes errors were pointed out but no correction given; in such cases, we skipped over the error.</S>
			<S sid ="168" ssid = "24">Sometimes the suggestions led to an infinite loop, as with the sentence: (5) Be sure it&apos;s out when you leave.</S>
			<S sid ="169" ssid = "25">where the system alternately suggested replacing it&apos;s with its and vice versa.</S>
			<S sid ="170" ssid = "26">In such cases, we accepted the first suggestion, and then moved on.</S>
			<S sid ="171" ssid = "27">Unlike Word, Tribayes, as presented above, is purely a predictive system, and never suppresses its suggestions.</S>
			<S sid ="172" ssid = "28">This is somewhat of a handicap in the comparison, as Word can achieve higher scores in the correct condition by suppressing its weaker sugges­ tions (albeit at the cost of lowering its scores in the corrupted condition).</S>
			<S sid ="173" ssid = "29">To put Tribayes on an equal footing, we added a postprocessing step in which it uses thresholds to decide whether to suppress its sug­ gestions.</S>
			<S sid ="174" ssid = "30">A suggestion is allowed to go through iff the ratio of the probability of the word being sug­ gested to the probability of the word that appeared originally in the sentence is above a threshold.</S>
			<S sid ="175" ssid = "31">The probability associated with each word is the per­ word sentence probability in the case of Trigrams, or the conditional probability P( w; IF) in the case of Bayes.</S>
			<S sid ="176" ssid = "32">The thresholds are set in a preprocessing phase based on the training set (80% of Brown, in our case).</S>
			<S sid ="177" ssid = "33">A single tunable parameter controls how steeply the thresholds are set; for the study here, this parameter was set to the middle of its useful range, providing a fairly neutral balance between reducing false negatives and increasing false positives.</S>
			<S sid ="178" ssid = "34">The results of Word and Tribayes for the 18 confu­ sion sets appear in Table 5.</S>
			<S sid ="179" ssid = "35">Six of the confusion sets (marked with asterisks in the table) are not handled by Word; Word&apos;s scores in these cases are 100% for the correct condition and 0% for the corrupted con­ dition, which are the scores one gets by never mak­ ing a suggestion.</S>
			<S sid ="180" ssid = "36">The opposite behavior - always suggesting a different word -would result in scores of 0% and 100% (for a confusion set of size 2).</S>
			<S sid ="181" ssid = "37">Al­ though this behavior is never observed in its extreme form, it is a good approximation of Word&apos;s behavior in a few cases, such as {principal, principle}, where it scores 12% and 94%.</S>
			<S sid ="182" ssid = "38">In general, Word achieves a high score in either the correct or the corrupted condition, but not both at once.</S>
			<S sid ="183" ssid = "39">Tribayes compares quite favorably with Word in this experiment.</S>
			<S sid ="184" ssid = "40">In both the correct and corrupted conditions, Tribayes&apos; scores are mostly higher (often by a wide margin) or the same as Word&apos;s; in the cases where they are lower in one condition, they are almost always considerably higher in the other.</S>
			<S sid ="185" ssid = "41">The one exception is {raise, rise}, where Tribayes and Word score about the same in both conditions.</S>
	</SECTION>
	<SECTION title="Conclusion. " number = "8">
			<S sid ="186" ssid = "1">Spelling errors that result in valid, though unin­ tended words, have been found to be very common in the production of text.</S>
			<S sid ="187" ssid = "2">Such errors were thought to be too difficult to handle and remain undetected in conventional spelling checkers.</S>
			<S sid ="188" ssid = "3">This paper in­ troduced Trigrams, a part-of-speech trigram-based method, that improved on previous trigram meth­ ods, which were word-based, by greatly reducing the number of parameters.</S>
			<S sid ="189" ssid = "4">The method was sup­ plemented by Bayes, a method that uses context features to discriminate among the words in the confusion set.</S>
			<S sid ="190" ssid = "5">Trigrams and Bayes were shown to have complementary strengths.</S>
			<S sid ="191" ssid = "6">A hybrid method, Tribayes, was then introduced to exploit this com­ plementarity by applying Trigrams when the words in the confusion set do not have the same part of speech, and Bayes when they do.</S>
			<S sid ="192" ssid = "7">Tribayes thereby gets the best of both methods, as was confirmed ex­ perimentally.</S>
			<S sid ="193" ssid = "8">Tribayes was also compared with the grammar checker in Microsoft Word, and was found to have substantially higher performance.</S>
			<S sid ="194" ssid = "9">Tribayes is being used as part of a grammar­ checking system we are currently developing.</S>
			<S sid ="195" ssid = "10">We are presently working on elaborating the system&apos;s threshold model; scaling up the number of confusion sets that can be handled efficiently; and acquiring confusion sets (or confusion matrices) automatically.</S>
			<S sid ="196" ssid = "11">Co nf usi on set T r i b a y e s C or re ct Corrupted M i c r o s o f t W o r d C or re ct Corrupted th eir , th er e, th ey &apos;re t h a n , t h e n i t s , i t &apos; s yo ur, yo u&apos;r e b e g i n , b e i n g p a s s e d , p a s t q u i e t , q u i t e w e a t h e r , w h e t h e r a c c e p t , e x c e p t l e a d , l e d c it e , s i g h t, s i t e p r i n c i p a l, p r i n c i p l e r a i s e , r i s e a f f e c t , e f f e c t p e a c e , p i e c e c o u n t r y , c o u n t y a m o u n t , n u m b e r a m o n g , b e t w e e n 9 9 . 4 87.6 9 7 . 9 85.8 9 9 . 5 9 2 . 1 9 8 . 9 98.4 1 0 0 . 0 8 4 . 2 1 0 0 . 0 92.4 1 0 0 . 0 72.7 1 0 0 . 0 6 5 . 6 9 0 . 0 70.0 8 7 . 8 81.6 1 0 0 . 0 35.3 9 4 . 1 73.5 9 2 . 3 48.7 9 8 . 0 93.9 9 6 . 0 74.0 9 0 . 3 80.6 9 1 . 9 68.3 8 8 . 7 54.8 9 8 . 8 59.8 1 0 0 . 0 22.2 9 6 . 2 73.0 9 8 . 9 79.1 1 0 0 . 0 * 0.0 * 3 7 . 8 86.5 1 0 0 . 0 * 0.0 * 1 0 0 . 0 * 0.0 * 7 4 . 0 36.0 1 0 0 . 0 * 0.0 * 1 7 . 6 6 6 . 2 1 1 . 8 9 4 . 1 9 2 . 3 51.3 1 0 0 . 0 77.6 3 6 . 0 88.0 1 0 0 . 0 * 0.0 * 1 0 0 . 0 * 0.0 * 9 7 . 8 0.0 Table 5: Comparison of Tribayes with Microsoft Word.</S>
			<S sid ="197" ssid = "12">System scores are given for two test sets, one con­ taining correct usages, and the other containing incorrect (corrupted) usages.</S>
			<S sid ="198" ssid = "13">Scores are given as percentages of correct answers.</S>
			<S sid ="199" ssid = "14">Asterisks mark confusion sets that are not handled by Microsoft Word.</S>
	</SECTION>
</PAPER>
